
chassis_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b23c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800b410  0800b410  0000c410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8d8  0800b8d8  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8d8  0800b8d8  0000c8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8e0  0800b8e0  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8e0  0800b8e0  0000c8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b8e4  0800b8e4  0000c8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b8e8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  200001e8  0800bad0  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800bad0  0000d6bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ae6  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002936  00000000  00000000  0001fcfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00022638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3e  00000000  00000000  00023848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fcd  00000000  00000000  00024686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a81  00000000  00000000  00048653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8049  00000000  00000000  0005f0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013711d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c4  00000000  00000000  00137160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0013d424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b3f4 	.word	0x0800b3f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800b3f4 	.word	0x0800b3f4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <BNO055_Read>:
    uint8_t buf[2] = {reg, data};
    return HAL_I2C_Master_Transmit(hi2c, BNO055_I2C_ADDR, buf, 2, HAL_MAX_DELAY);
}

static HAL_StatusTypeDef BNO055_Read(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *data, uint8_t len)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af02      	add	r7, sp, #8
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	461a      	mov	r2, r3
 8001030:	460b      	mov	r3, r1
 8001032:	72fb      	strb	r3, [r7, #11]
 8001034:	4613      	mov	r3, r2
 8001036:	72bb      	strb	r3, [r7, #10]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Master_Transmit(hi2c, BNO055_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
 8001038:	f107 020b 	add.w	r2, r7, #11
 800103c:	f04f 33ff 	mov.w	r3, #4294967295
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2150      	movs	r1, #80	@ 0x50
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f002 ff00 	bl	8003e4c <HAL_I2C_Master_Transmit>
 800104c:	4603      	mov	r3, r0
 800104e:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <BNO055_Read+0x36>
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	e00a      	b.n	8001070 <BNO055_Read+0x4c>

    return HAL_I2C_Master_Receive(hi2c, BNO055_I2C_ADDR, data, len, HAL_MAX_DELAY);
 800105a:	7abb      	ldrb	r3, [r7, #10]
 800105c:	b29b      	uxth	r3, r3
 800105e:	f04f 32ff 	mov.w	r2, #4294967295
 8001062:	9200      	str	r2, [sp, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	2150      	movs	r1, #80	@ 0x50
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f002 ffed 	bl	8004048 <HAL_I2C_Master_Receive>
 800106e:	4603      	mov	r3, r0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <BNO055_GetAccelerometer>:

    return HAL_OK;
}

HAL_StatusTypeDef BNO055_GetAccelerometer(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];
    HAL_StatusTypeDef status;

    status = BNO055_Read(hi2c, BNO055_ACCEL_DATA_X_LSB, buf, 6);
 8001082:	f107 0208 	add.w	r2, r7, #8
 8001086:	2306      	movs	r3, #6
 8001088:	2108      	movs	r1, #8
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffca 	bl	8001024 <BNO055_Read>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <BNO055_GetAccelerometer+0x26>
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	e036      	b.n	800110c <BNO055_GetAccelerometer+0x94>

    // Convert to m/s^2 (BNO055 accelerometer LSB = 1/100 m/s^2)
    data->accel_x = (int16_t)((buf[1] << 8) | buf[0]) / 100.0f;
 800109e:	7a7b      	ldrb	r3, [r7, #9]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7a3b      	ldrb	r3, [r7, #8]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001114 <BNO055_GetAccelerometer+0x9c>
 80010b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	edc3 7a00 	vstr	s15, [r3]
    data->accel_y = (int16_t)((buf[3] << 8) | buf[2]) / 100.0f;
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7abb      	ldrb	r3, [r7, #10]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d8:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001114 <BNO055_GetAccelerometer+0x9c>
 80010dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	edc3 7a01 	vstr	s15, [r3, #4]
    data->accel_z = (int16_t)((buf[5] << 8) | buf[4]) / 100.0f;
 80010e6:	7b7b      	ldrb	r3, [r7, #13]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010fc:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001114 <BNO055_GetAccelerometer+0x9c>
 8001100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	edc3 7a02 	vstr	s15, [r3, #8]

    return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	42c80000 	.word	0x42c80000

08001118 <BNO055_GetGyroscope>:

HAL_StatusTypeDef BNO055_GetGyroscope(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];
    HAL_StatusTypeDef status;

    status = BNO055_Read(hi2c, BNO055_GYRO_DATA_X_LSB, buf, 6);
 8001122:	f107 0208 	add.w	r2, r7, #8
 8001126:	2306      	movs	r3, #6
 8001128:	2114      	movs	r1, #20
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff7a 	bl	8001024 <BNO055_Read>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <BNO055_GetGyroscope+0x26>
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	e036      	b.n	80011ac <BNO055_GetGyroscope+0x94>

    // Convert to degrees/s (BNO055 gyroscope LSB = 1/16 degree/s)
    data->gyro_x = (int16_t)((buf[1] << 8) | buf[0]) / 16.0f;
 800113e:	7a7b      	ldrb	r3, [r7, #9]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21a      	sxth	r2, r3
 8001144:	7a3b      	ldrb	r3, [r7, #8]
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b21b      	sxth	r3, r3
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001154:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
    data->gyro_y = (int16_t)((buf[3] << 8) | buf[2]) / 16.0f;
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	7abb      	ldrb	r3, [r7, #10]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001178:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800117c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	edc3 7a04 	vstr	s15, [r3, #16]
    data->gyro_z = (int16_t)((buf[5] << 8) | buf[4]) / 16.0f;
 8001186:	7b7b      	ldrb	r3, [r7, #13]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	7b3b      	ldrb	r3, [r7, #12]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21b      	sxth	r3, r3
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80011a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	edc3 7a05 	vstr	s15, [r3, #20]

    return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <BNO055_GetEulerAngles>:

HAL_StatusTypeDef BNO055_GetEulerAngles(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];
    HAL_StatusTypeDef status;

    status = BNO055_Read(hi2c, BNO055_EULER_H_LSB, buf, 6);
 80011be:	f107 0208 	add.w	r2, r7, #8
 80011c2:	2306      	movs	r3, #6
 80011c4:	211a      	movs	r1, #26
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff2c 	bl	8001024 <BNO055_Read>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <BNO055_GetEulerAngles+0x26>
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	e036      	b.n	8001248 <BNO055_GetEulerAngles+0x94>

    // Convert to degrees (BNO055 euler angles are in degrees * 16)
    data->euler_h = (int16_t)((buf[1] << 8) | buf[0]) / 16.0f;
 80011da:	7a7b      	ldrb	r3, [r7, #9]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21a      	sxth	r2, r3
 80011e0:	7a3b      	ldrb	r3, [r7, #8]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80011f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	edc3 7a06 	vstr	s15, [r3, #24]
    data->euler_r = (int16_t)((buf[3] << 8) | buf[2]) / 16.0f;
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7abb      	ldrb	r3, [r7, #10]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21b      	sxth	r3, r3
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001214:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	edc3 7a07 	vstr	s15, [r3, #28]
    data->euler_p = (int16_t)((buf[5] << 8) | buf[4]) / 16.0f;
 8001222:	7b7b      	ldrb	r3, [r7, #13]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7b3b      	ldrb	r3, [r7, #12]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21b      	sxth	r3, r3
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001238:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800123c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	edc3 7a08 	vstr	s15, [r3, #32]

    return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <BNO055_GetQuaternion>:

HAL_StatusTypeDef BNO055_GetQuaternion(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    uint8_t buf[8];
    HAL_StatusTypeDef status;

    status = BNO055_Read(hi2c, BNO055_QUATERNION_DATA_W_LSB, buf, 8);
 800125a:	f107 020c 	add.w	r2, r7, #12
 800125e:	2308      	movs	r3, #8
 8001260:	2120      	movs	r1, #32
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fede 	bl	8001024 <BNO055_Read>
 8001268:	4603      	mov	r3, r0
 800126a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <BNO055_GetQuaternion+0x26>
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	e048      	b.n	8001308 <BNO055_GetQuaternion+0xb8>

    // Convert to float (BNO055 quaternion values are scaled by 2^14)
    data->quat_w = (int16_t)((buf[1] << 8) | buf[0]) / 16384.0f;
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	7b3b      	ldrb	r3, [r7, #12]
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21b      	sxth	r3, r3
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001310 <BNO055_GetQuaternion+0xc0>
 8001290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    data->quat_x = (int16_t)((buf[3] << 8) | buf[2]) / 16384.0f;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21a      	sxth	r2, r3
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b0:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001310 <BNO055_GetQuaternion+0xc0>
 80012b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    data->quat_y = (int16_t)((buf[5] << 8) | buf[4]) / 16384.0f;
 80012be:	7c7b      	ldrb	r3, [r7, #17]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	7c3b      	ldrb	r3, [r7, #16]
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d4:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001310 <BNO055_GetQuaternion+0xc0>
 80012d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    data->quat_z = (int16_t)((buf[7] << 8) | buf[6]) / 16384.0f;
 80012e2:	7cfb      	ldrb	r3, [r7, #19]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	7cbb      	ldrb	r3, [r7, #18]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f8:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001310 <BNO055_GetQuaternion+0xc0>
 80012fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	46800000 	.word	0x46800000

08001314 <BNO055_GetAllData>:

HAL_StatusTypeDef BNO055_GetAllData(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;

    status = BNO055_GetAccelerometer(hi2c, data);
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fea9 	bl	8001078 <BNO055_GetAccelerometer>
 8001326:	4603      	mov	r3, r0
 8001328:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <BNO055_GetAllData+0x20>
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	e021      	b.n	8001378 <BNO055_GetAllData+0x64>

    status = BNO055_GetGyroscope(hi2c, data);
 8001334:	6839      	ldr	r1, [r7, #0]
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff feee 	bl	8001118 <BNO055_GetGyroscope>
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <BNO055_GetAllData+0x36>
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	e016      	b.n	8001378 <BNO055_GetAllData+0x64>

    status = BNO055_GetEulerAngles(hi2c, data);
 800134a:	6839      	ldr	r1, [r7, #0]
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff31 	bl	80011b4 <BNO055_GetEulerAngles>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <BNO055_GetAllData+0x4c>
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	e00b      	b.n	8001378 <BNO055_GetAllData+0x64>

    status = BNO055_GetQuaternion(hi2c, data);
 8001360:	6839      	ldr	r1, [r7, #0]
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff74 	bl	8001250 <BNO055_GetQuaternion>
 8001368:	4603      	mov	r3, r0
 800136a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <BNO055_GetAllData+0x62>
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	e000      	b.n	8001378 <BNO055_GetAllData+0x64>

    return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_UART_RxCpltCallback>:

int BuffN=-40;

int32_t lx, ly, rx, ry, cro, squ, tri, cir, up, down, left, right, ll1, rr1, ll2, rr2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]


	 HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 8001388:	2210      	movs	r2, #16
 800138a:	4904      	ldr	r1, [pc, #16]	@ (800139c <HAL_UART_RxCpltCallback+0x1c>)
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <HAL_UART_RxCpltCallback+0x20>)
 800138e:	f004 ff79 	bl	8006284 <HAL_UART_Receive_DMA>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000540 	.word	0x20000540
 80013a0:	20000464 	.word	0x20000464

080013a4 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	69b9      	ldr	r1, [r7, #24]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	1a8a      	subs	r2, r1, r2
 80013be:	fb03 f202 	mul.w	r2, r3, r2
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1acb      	subs	r3, r1, r3
 80013c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	4413      	add	r3, r2
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	0000      	movs	r0, r0
	...

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af04      	add	r7, sp, #16
int main(void)
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ee:	f001 fc51 	bl	8002c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f2:	f000 fc03 	bl	8001bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f6:	f000 ff83 	bl	8002300 <MX_GPIO_Init>
  MX_DMA_Init();
 80013fa:	f000 ff61 	bl	80022c0 <MX_DMA_Init>
  MX_I2C1_Init();
 80013fe:	f000 fca3 	bl	8001d48 <MX_I2C1_Init>
  MX_UART4_Init();
 8001402:	f000 ff33 	bl	800226c <MX_UART4_Init>
  MX_DAC_Init();
 8001406:	f000 fc6b 	bl	8001ce0 <MX_DAC_Init>
  MX_TIM1_Init();
 800140a:	f000 fccb 	bl	8001da4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800140e:	f000 fd21 	bl	8001e54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001412:	f000 fd73 	bl	8001efc <MX_TIM3_Init>
  MX_TIM5_Init();
 8001416:	f000 fdc5 	bl	8001fa4 <MX_TIM5_Init>
  MX_TIM8_Init();
 800141a:	f000 fe33 	bl	8002084 <MX_TIM8_Init>
  MX_TIM11_Init();
 800141e:	f000 fe89 	bl	8002134 <MX_TIM11_Init>
  MX_TIM13_Init();
 8001422:	f000 fed5 	bl	80021d0 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 8001426:	2210      	movs	r2, #16
 8001428:	498b      	ldr	r1, [pc, #556]	@ (8001658 <main+0x278>)
 800142a:	488c      	ldr	r0, [pc, #560]	@ (800165c <main+0x27c>)
 800142c:	f004 ff2a 	bl	8006284 <HAL_UART_Receive_DMA>


  /* Start DAC */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);  // Motor 1 control (S1)
 8001430:	2100      	movs	r1, #0
 8001432:	488b      	ldr	r0, [pc, #556]	@ (8001660 <main+0x280>)
 8001434:	f001 fdf7 	bl	8003026 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);  // Motor 1 control (S1)
 8001438:	2110      	movs	r1, #16
 800143a:	4889      	ldr	r0, [pc, #548]	@ (8001660 <main+0x280>)
 800143c:	f001 fdf3 	bl	8003026 <HAL_DAC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lx = (rxbuff[0] & 0x80) ? (int32_t)rxbuff[0] - 256 : (int32_t)rxbuff[0];
 8001440:	4b85      	ldr	r3, [pc, #532]	@ (8001658 <main+0x278>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b25b      	sxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	da04      	bge.n	8001454 <main+0x74>
 800144a:	4b83      	ldr	r3, [pc, #524]	@ (8001658 <main+0x278>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001452:	e001      	b.n	8001458 <main+0x78>
 8001454:	4b80      	ldr	r3, [pc, #512]	@ (8001658 <main+0x278>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4a82      	ldr	r2, [pc, #520]	@ (8001664 <main+0x284>)
 800145a:	6013      	str	r3, [r2, #0]

	  ly = (rxbuff[1] & 0x80) ? (int32_t)rxbuff[1] - 256 : (int32_t)rxbuff[1];
 800145c:	4b7e      	ldr	r3, [pc, #504]	@ (8001658 <main+0x278>)
 800145e:	785b      	ldrb	r3, [r3, #1]
 8001460:	b25b      	sxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	da04      	bge.n	8001470 <main+0x90>
 8001466:	4b7c      	ldr	r3, [pc, #496]	@ (8001658 <main+0x278>)
 8001468:	785b      	ldrb	r3, [r3, #1]
 800146a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800146e:	e001      	b.n	8001474 <main+0x94>
 8001470:	4b79      	ldr	r3, [pc, #484]	@ (8001658 <main+0x278>)
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	4a7c      	ldr	r2, [pc, #496]	@ (8001668 <main+0x288>)
 8001476:	6013      	str	r3, [r2, #0]

	  rx = (rxbuff[2] & 0x80) ? (int32_t)rxbuff[2] - 256 : (int32_t)rxbuff[2];
 8001478:	4b77      	ldr	r3, [pc, #476]	@ (8001658 <main+0x278>)
 800147a:	789b      	ldrb	r3, [r3, #2]
 800147c:	b25b      	sxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	da04      	bge.n	800148c <main+0xac>
 8001482:	4b75      	ldr	r3, [pc, #468]	@ (8001658 <main+0x278>)
 8001484:	789b      	ldrb	r3, [r3, #2]
 8001486:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800148a:	e001      	b.n	8001490 <main+0xb0>
 800148c:	4b72      	ldr	r3, [pc, #456]	@ (8001658 <main+0x278>)
 800148e:	789b      	ldrb	r3, [r3, #2]
 8001490:	4a76      	ldr	r2, [pc, #472]	@ (800166c <main+0x28c>)
 8001492:	6013      	str	r3, [r2, #0]

	  ry = (rxbuff[3] & 0x80) ? (int32_t)rxbuff[3] - 256 : (int32_t)rxbuff[3];
 8001494:	4b70      	ldr	r3, [pc, #448]	@ (8001658 <main+0x278>)
 8001496:	78db      	ldrb	r3, [r3, #3]
 8001498:	b25b      	sxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	da04      	bge.n	80014a8 <main+0xc8>
 800149e:	4b6e      	ldr	r3, [pc, #440]	@ (8001658 <main+0x278>)
 80014a0:	78db      	ldrb	r3, [r3, #3]
 80014a2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014a6:	e001      	b.n	80014ac <main+0xcc>
 80014a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001658 <main+0x278>)
 80014aa:	78db      	ldrb	r3, [r3, #3]
 80014ac:	4a70      	ldr	r2, [pc, #448]	@ (8001670 <main+0x290>)
 80014ae:	6013      	str	r3, [r2, #0]


	  cro= (rxbuff[4] & 0x80) ? (int32_t)rxbuff[4] - 256 : (int32_t)rxbuff[4];
 80014b0:	4b69      	ldr	r3, [pc, #420]	@ (8001658 <main+0x278>)
 80014b2:	791b      	ldrb	r3, [r3, #4]
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	da04      	bge.n	80014c4 <main+0xe4>
 80014ba:	4b67      	ldr	r3, [pc, #412]	@ (8001658 <main+0x278>)
 80014bc:	791b      	ldrb	r3, [r3, #4]
 80014be:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014c2:	e001      	b.n	80014c8 <main+0xe8>
 80014c4:	4b64      	ldr	r3, [pc, #400]	@ (8001658 <main+0x278>)
 80014c6:	791b      	ldrb	r3, [r3, #4]
 80014c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001674 <main+0x294>)
 80014ca:	6013      	str	r3, [r2, #0]
	//
	  squ= (rxbuff[5] & 0x80) ? (int32_t)rxbuff[5] - 256 : (int32_t)rxbuff[5];
 80014cc:	4b62      	ldr	r3, [pc, #392]	@ (8001658 <main+0x278>)
 80014ce:	795b      	ldrb	r3, [r3, #5]
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	da04      	bge.n	80014e0 <main+0x100>
 80014d6:	4b60      	ldr	r3, [pc, #384]	@ (8001658 <main+0x278>)
 80014d8:	795b      	ldrb	r3, [r3, #5]
 80014da:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014de:	e001      	b.n	80014e4 <main+0x104>
 80014e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001658 <main+0x278>)
 80014e2:	795b      	ldrb	r3, [r3, #5]
 80014e4:	4a64      	ldr	r2, [pc, #400]	@ (8001678 <main+0x298>)
 80014e6:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN 3 */
	  uint16_t dutycycle;

	  //stop
		if(ly>=Buff2 && ly<=Buff1 && lx>=Buff2 && lx<=Buff1 && rx>=Buff2 && rx<=Buff1){
 80014e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001668 <main+0x288>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b63      	ldr	r3, [pc, #396]	@ (800167c <main+0x29c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	db39      	blt.n	8001568 <main+0x188>
 80014f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001668 <main+0x288>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b61      	ldr	r3, [pc, #388]	@ (8001680 <main+0x2a0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dc33      	bgt.n	8001568 <main+0x188>
 8001500:	4b58      	ldr	r3, [pc, #352]	@ (8001664 <main+0x284>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b5d      	ldr	r3, [pc, #372]	@ (800167c <main+0x29c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	db2d      	blt.n	8001568 <main+0x188>
 800150c:	4b55      	ldr	r3, [pc, #340]	@ (8001664 <main+0x284>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b5b      	ldr	r3, [pc, #364]	@ (8001680 <main+0x2a0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	dc27      	bgt.n	8001568 <main+0x188>
 8001518:	4b54      	ldr	r3, [pc, #336]	@ (800166c <main+0x28c>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b57      	ldr	r3, [pc, #348]	@ (800167c <main+0x29c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	db21      	blt.n	8001568 <main+0x188>
 8001524:	4b51      	ldr	r3, [pc, #324]	@ (800166c <main+0x28c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b55      	ldr	r3, [pc, #340]	@ (8001680 <main+0x2a0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	dc1b      	bgt.n	8001568 <main+0x188>

			//motor 1
		   HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2101      	movs	r1, #1
 8001534:	4853      	ldr	r0, [pc, #332]	@ (8001684 <main+0x2a4>)
 8001536:	f002 fb2b 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 800153a:	4b53      	ldr	r3, [pc, #332]	@ (8001688 <main+0x2a8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2200      	movs	r2, #0
 8001540:	639a      	str	r2, [r3, #56]	@ 0x38

		   //motor 2
		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2102      	movs	r1, #2
 8001546:	484f      	ldr	r0, [pc, #316]	@ (8001684 <main+0x2a4>)
 8001548:	f002 fb22 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 800154c:	4b4f      	ldr	r3, [pc, #316]	@ (800168c <main+0x2ac>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2200      	movs	r2, #0
 8001552:	635a      	str	r2, [r3, #52]	@ 0x34

		   //motor 3
		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2104      	movs	r1, #4
 8001558:	484a      	ldr	r0, [pc, #296]	@ (8001684 <main+0x2a4>)
 800155a:	f002 fb19 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 800155e:	4b4a      	ldr	r3, [pc, #296]	@ (8001688 <main+0x2a8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2200      	movs	r2, #0
 8001564:	635a      	str	r2, [r3, #52]	@ 0x34
 8001566:	e2bf      	b.n	8001ae8 <main+0x708>

		}

		//forward
		else if( ly>=Buff1 && (lx<=BuffP && lx>=BuffN) ){
 8001568:	4b3f      	ldr	r3, [pc, #252]	@ (8001668 <main+0x288>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b44      	ldr	r3, [pc, #272]	@ (8001680 <main+0x2a0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	db34      	blt.n	80015de <main+0x1fe>
 8001574:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <main+0x284>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b45      	ldr	r3, [pc, #276]	@ (8001690 <main+0x2b0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	dc2e      	bgt.n	80015de <main+0x1fe>
 8001580:	4b38      	ldr	r3, [pc, #224]	@ (8001664 <main+0x284>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b43      	ldr	r3, [pc, #268]	@ (8001694 <main+0x2b4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	db28      	blt.n	80015de <main+0x1fe>

  //	  		long map(long x, long in_min, long in_max, long out_min, long out_max)
  //	  		{
  //	  		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  //	  		}
			dutycycle=map(ly,Buff1,127,0,fast);
 800158c:	4b36      	ldr	r3, [pc, #216]	@ (8001668 <main+0x288>)
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <main+0x2a0>)
 8001592:	6819      	ldr	r1, [r3, #0]
 8001594:	4b40      	ldr	r3, [pc, #256]	@ (8001698 <main+0x2b8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	227f      	movs	r2, #127	@ 0x7f
 800159e:	f7ff ff01 	bl	80013a4 <map>
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
  //	  		int Buff2=-20;
  //	  		int BuffP=40;
  //	  		int BuffN=-40;

			//motor 1
			HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2101      	movs	r1, #1
 80015aa:	4836      	ldr	r0, [pc, #216]	@ (8001684 <main+0x2a4>)
 80015ac:	f002 faf0 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 80015b0:	4b35      	ldr	r3, [pc, #212]	@ (8001688 <main+0x2a8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2200      	movs	r2, #0
 80015b6:	639a      	str	r2, [r3, #56]	@ 0x38

		   //motor 2
		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, RESET);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2102      	movs	r1, #2
 80015bc:	4831      	ldr	r0, [pc, #196]	@ (8001684 <main+0x2a4>)
 80015be:	f002 fae7 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, dutycycle);
 80015c2:	4b32      	ldr	r3, [pc, #200]	@ (800168c <main+0x2ac>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	88fa      	ldrh	r2, [r7, #6]
 80015c8:	635a      	str	r2, [r3, #52]	@ 0x34

		   //motor 3
		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2104      	movs	r1, #4
 80015ce:	482d      	ldr	r0, [pc, #180]	@ (8001684 <main+0x2a4>)
 80015d0:	f002 fade 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, dutycycle);
 80015d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001688 <main+0x2a8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	88fa      	ldrh	r2, [r7, #6]
 80015da:	635a      	str	r2, [r3, #52]	@ 0x34
 80015dc:	e284      	b.n	8001ae8 <main+0x708>


		}
		//backward
		else if(ly<=Buff2 && (lx<=BuffP && lx>=BuffN) )
 80015de:	4b22      	ldr	r3, [pc, #136]	@ (8001668 <main+0x288>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4b26      	ldr	r3, [pc, #152]	@ (800167c <main+0x29c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dc58      	bgt.n	800169c <main+0x2bc>
 80015ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <main+0x284>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <main+0x2b0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	dc52      	bgt.n	800169c <main+0x2bc>
 80015f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <main+0x284>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <main+0x2b4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	db4c      	blt.n	800169c <main+0x2bc>

	   {

			 dutycycle=map(ly,-128,Buff2,fast,0);
 8001602:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <main+0x288>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <main+0x29c>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b23      	ldr	r3, [pc, #140]	@ (8001698 <main+0x2b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2100      	movs	r1, #0
 8001610:	9100      	str	r1, [sp, #0]
 8001612:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001616:	f7ff fec5 	bl	80013a4 <map>
 800161a:	4603      	mov	r3, r0
 800161c:	80fb      	strh	r3, [r7, #6]

			 //motor 1
			   HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2101      	movs	r1, #1
 8001622:	4818      	ldr	r0, [pc, #96]	@ (8001684 <main+0x2a4>)
 8001624:	f002 fab4 	bl	8003b90 <HAL_GPIO_WritePin>
			   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8001628:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <main+0x2a8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2200      	movs	r2, #0
 800162e:	639a      	str	r2, [r3, #56]	@ 0x38

			   //motor 2
			   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, SET);
 8001630:	2201      	movs	r2, #1
 8001632:	2102      	movs	r1, #2
 8001634:	4813      	ldr	r0, [pc, #76]	@ (8001684 <main+0x2a4>)
 8001636:	f002 faab 	bl	8003b90 <HAL_GPIO_WritePin>
			   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, dutycycle);
 800163a:	4b14      	ldr	r3, [pc, #80]	@ (800168c <main+0x2ac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	88fa      	ldrh	r2, [r7, #6]
 8001640:	635a      	str	r2, [r3, #52]	@ 0x34

			   //motor 3
			   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2104      	movs	r1, #4
 8001646:	480f      	ldr	r0, [pc, #60]	@ (8001684 <main+0x2a4>)
 8001648:	f002 faa2 	bl	8003b90 <HAL_GPIO_WritePin>
			   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, dutycycle);
 800164c:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <main+0x2a8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	88fa      	ldrh	r2, [r7, #6]
 8001652:	635a      	str	r2, [r3, #52]	@ 0x34
 8001654:	e248      	b.n	8001ae8 <main+0x708>
 8001656:	bf00      	nop
 8001658:	20000540 	.word	0x20000540
 800165c:	20000464 	.word	0x20000464
 8001660:	20000204 	.word	0x20000204
 8001664:	20000550 	.word	0x20000550
 8001668:	20000554 	.word	0x20000554
 800166c:	20000558 	.word	0x20000558
 8001670:	2000055c 	.word	0x2000055c
 8001674:	20000560 	.word	0x20000560
 8001678:	20000564 	.word	0x20000564
 800167c:	20000008 	.word	0x20000008
 8001680:	20000004 	.word	0x20000004
 8001684:	40020800 	.word	0x40020800
 8001688:	200002fc 	.word	0x200002fc
 800168c:	200002b4 	.word	0x200002b4
 8001690:	2000000c 	.word	0x2000000c
 8001694:	20000010 	.word	0x20000010
 8001698:	20000000 	.word	0x20000000


	   }

		//RIGHT
		else if(lx>=Buff1 && (ly<=BuffP && ly>=BuffN))
 800169c:	4b8e      	ldr	r3, [pc, #568]	@ (80018d8 <main+0x4f8>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b8e      	ldr	r3, [pc, #568]	@ (80018dc <main+0x4fc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	db52      	blt.n	800174e <main+0x36e>
 80016a8:	4b8d      	ldr	r3, [pc, #564]	@ (80018e0 <main+0x500>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b8d      	ldr	r3, [pc, #564]	@ (80018e4 <main+0x504>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dc4c      	bgt.n	800174e <main+0x36e>
 80016b4:	4b8a      	ldr	r3, [pc, #552]	@ (80018e0 <main+0x500>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b8b      	ldr	r3, [pc, #556]	@ (80018e8 <main+0x508>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	db46      	blt.n	800174e <main+0x36e>

	   {

			dutycycle=map(lx,Buff1,127,0,fast);
 80016c0:	4b85      	ldr	r3, [pc, #532]	@ (80018d8 <main+0x4f8>)
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	4b85      	ldr	r3, [pc, #532]	@ (80018dc <main+0x4fc>)
 80016c6:	6819      	ldr	r1, [r3, #0]
 80016c8:	4b88      	ldr	r3, [pc, #544]	@ (80018ec <main+0x50c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2300      	movs	r3, #0
 80016d0:	227f      	movs	r2, #127	@ 0x7f
 80016d2:	f7ff fe67 	bl	80013a4 <map>
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]

			//motor 1
			HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, SET);
 80016da:	2201      	movs	r2, #1
 80016dc:	2101      	movs	r1, #1
 80016de:	4884      	ldr	r0, [pc, #528]	@ (80018f0 <main+0x510>)
 80016e0:	f002 fa56 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 80016e4:	4b83      	ldr	r3, [pc, #524]	@ (80018f4 <main+0x514>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	88fa      	ldrh	r2, [r7, #6]
 80016ea:	639a      	str	r2, [r3, #56]	@ 0x38

		   //motor 2
		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2102      	movs	r1, #2
 80016f0:	487f      	ldr	r0, [pc, #508]	@ (80018f0 <main+0x510>)
 80016f2:	f002 fa4d 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, (0.86 * dutycycle));
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff33 	bl	8000564 <__aeabi_i2d>
 80016fe:	a374      	add	r3, pc, #464	@ (adr r3, 80018d0 <main+0x4f0>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ff98 	bl	8000638 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	497a      	ldr	r1, [pc, #488]	@ (80018f8 <main+0x518>)
 800170e:	680c      	ldr	r4, [r1, #0]
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f7ff fa68 	bl	8000be8 <__aeabi_d2uiz>
 8001718:	4603      	mov	r3, r0
 800171a:	6363      	str	r3, [r4, #52]	@ 0x34

		   //motor 3
		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, RESET);
 800171c:	2200      	movs	r2, #0
 800171e:	2104      	movs	r1, #4
 8001720:	4873      	ldr	r0, [pc, #460]	@ (80018f0 <main+0x510>)
 8001722:	f002 fa35 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (0.86 * dutycycle));
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff1b 	bl	8000564 <__aeabi_i2d>
 800172e:	a368      	add	r3, pc, #416	@ (adr r3, 80018d0 <main+0x4f0>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe ff80 	bl	8000638 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	496d      	ldr	r1, [pc, #436]	@ (80018f4 <main+0x514>)
 800173e:	680c      	ldr	r4, [r1, #0]
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa50 	bl	8000be8 <__aeabi_d2uiz>
 8001748:	4603      	mov	r3, r0
 800174a:	6363      	str	r3, [r4, #52]	@ 0x34
 800174c:	e1cc      	b.n	8001ae8 <main+0x708>


	   }
		//left

		else if(lx<=Buff2 && (ly<=BuffP && ly>=BuffN) )
 800174e:	4b62      	ldr	r3, [pc, #392]	@ (80018d8 <main+0x4f8>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b6a      	ldr	r3, [pc, #424]	@ (80018fc <main+0x51c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	dc53      	bgt.n	8001802 <main+0x422>
 800175a:	4b61      	ldr	r3, [pc, #388]	@ (80018e0 <main+0x500>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b61      	ldr	r3, [pc, #388]	@ (80018e4 <main+0x504>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	dc4d      	bgt.n	8001802 <main+0x422>
 8001766:	4b5e      	ldr	r3, [pc, #376]	@ (80018e0 <main+0x500>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b5f      	ldr	r3, [pc, #380]	@ (80018e8 <main+0x508>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	db47      	blt.n	8001802 <main+0x422>

	   {

			dutycycle=map(lx,-128,Buff2,fast,0);
 8001772:	4b59      	ldr	r3, [pc, #356]	@ (80018d8 <main+0x4f8>)
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	4b61      	ldr	r3, [pc, #388]	@ (80018fc <main+0x51c>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b5c      	ldr	r3, [pc, #368]	@ (80018ec <main+0x50c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2100      	movs	r1, #0
 8001780:	9100      	str	r1, [sp, #0]
 8001782:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001786:	f7ff fe0d 	bl	80013a4 <map>
 800178a:	4603      	mov	r3, r0
 800178c:	80fb      	strh	r3, [r7, #6]
			//motor 1
			HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	2101      	movs	r1, #1
 8001792:	4857      	ldr	r0, [pc, #348]	@ (80018f0 <main+0x510>)
 8001794:	f002 f9fc 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 8001798:	4b56      	ldr	r3, [pc, #344]	@ (80018f4 <main+0x514>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	88fa      	ldrh	r2, [r7, #6]
 800179e:	639a      	str	r2, [r3, #56]	@ 0x38

		   //motor 2
		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2102      	movs	r1, #2
 80017a4:	4852      	ldr	r0, [pc, #328]	@ (80018f0 <main+0x510>)
 80017a6:	f002 f9f3 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, (0.86 * dutycycle));
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fed9 	bl	8000564 <__aeabi_i2d>
 80017b2:	a347      	add	r3, pc, #284	@ (adr r3, 80018d0 <main+0x4f0>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7fe ff3e 	bl	8000638 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	494d      	ldr	r1, [pc, #308]	@ (80018f8 <main+0x518>)
 80017c2:	680c      	ldr	r4, [r1, #0]
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f7ff fa0e 	bl	8000be8 <__aeabi_d2uiz>
 80017cc:	4603      	mov	r3, r0
 80017ce:	6363      	str	r3, [r4, #52]	@ 0x34

		   //motor 3
		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2104      	movs	r1, #4
 80017d4:	4846      	ldr	r0, [pc, #280]	@ (80018f0 <main+0x510>)
 80017d6:	f002 f9db 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (0.86 * dutycycle));
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fec1 	bl	8000564 <__aeabi_i2d>
 80017e2:	a33b      	add	r3, pc, #236	@ (adr r3, 80018d0 <main+0x4f0>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe ff26 	bl	8000638 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4940      	ldr	r1, [pc, #256]	@ (80018f4 <main+0x514>)
 80017f2:	680c      	ldr	r4, [r1, #0]
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7ff f9f6 	bl	8000be8 <__aeabi_d2uiz>
 80017fc:	4603      	mov	r3, r0
 80017fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8001800:	e172      	b.n	8001ae8 <main+0x708>


	   }

	  //top-right
		else if(lx>70 && ly>70)
 8001802:	4b35      	ldr	r3, [pc, #212]	@ (80018d8 <main+0x4f8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b46      	cmp	r3, #70	@ 0x46
 8001808:	dd2d      	ble.n	8001866 <main+0x486>
 800180a:	4b35      	ldr	r3, [pc, #212]	@ (80018e0 <main+0x500>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b46      	cmp	r3, #70	@ 0x46
 8001810:	dd29      	ble.n	8001866 <main+0x486>
		{

			dutycycle=map(rx,-128,Buff2,400,0);
 8001812:	4b3b      	ldr	r3, [pc, #236]	@ (8001900 <main+0x520>)
 8001814:	6818      	ldr	r0, [r3, #0]
 8001816:	4b39      	ldr	r3, [pc, #228]	@ (80018fc <main+0x51c>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	2300      	movs	r3, #0
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001822:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001826:	f7ff fdbd 	bl	80013a4 <map>
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]

			//motor 1
			HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, SET);
 800182e:	2201      	movs	r2, #1
 8001830:	2101      	movs	r1, #1
 8001832:	482f      	ldr	r0, [pc, #188]	@ (80018f0 <main+0x510>)
 8001834:	f002 f9ac 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 8001838:	4b2e      	ldr	r3, [pc, #184]	@ (80018f4 <main+0x514>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	88fa      	ldrh	r2, [r7, #6]
 800183e:	639a      	str	r2, [r3, #56]	@ 0x38

		   //motor 2
		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2102      	movs	r1, #2
 8001844:	482a      	ldr	r0, [pc, #168]	@ (80018f0 <main+0x510>)
 8001846:	f002 f9a3 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, dutycycle);
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <main+0x518>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	88fa      	ldrh	r2, [r7, #6]
 8001850:	635a      	str	r2, [r3, #52]	@ 0x34

		   //motor 3
		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, SET);
 8001852:	2201      	movs	r2, #1
 8001854:	2104      	movs	r1, #4
 8001856:	4826      	ldr	r0, [pc, #152]	@ (80018f0 <main+0x510>)
 8001858:	f002 f99a 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <main+0x514>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2200      	movs	r2, #0
 8001862:	635a      	str	r2, [r3, #52]	@ 0x34
 8001864:	e140      	b.n	8001ae8 <main+0x708>

	   }
		//top-left
	  else if(lx < -70 && ly > 70)
 8001866:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <main+0x4f8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 800186e:	da49      	bge.n	8001904 <main+0x524>
 8001870:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <main+0x500>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b46      	cmp	r3, #70	@ 0x46
 8001876:	dd45      	ble.n	8001904 <main+0x524>
		{

			dutycycle=map(rx,-128,Buff2,400,0);
 8001878:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <main+0x520>)
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <main+0x51c>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001888:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800188c:	f7ff fd8a 	bl	80013a4 <map>
 8001890:	4603      	mov	r3, r0
 8001892:	80fb      	strh	r3, [r7, #6]

			//motor 1
			HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2101      	movs	r1, #1
 8001898:	4815      	ldr	r0, [pc, #84]	@ (80018f0 <main+0x510>)
 800189a:	f002 f979 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <main+0x514>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	88fa      	ldrh	r2, [r7, #6]
 80018a4:	639a      	str	r2, [r3, #56]	@ 0x38

		   //motor 2
		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, SET);
 80018a6:	2201      	movs	r2, #1
 80018a8:	2102      	movs	r1, #2
 80018aa:	4811      	ldr	r0, [pc, #68]	@ (80018f0 <main+0x510>)
 80018ac:	f002 f970 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <main+0x518>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	635a      	str	r2, [r3, #52]	@ 0x34

		   //motor 3
		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	2104      	movs	r1, #4
 80018bc:	480c      	ldr	r0, [pc, #48]	@ (80018f0 <main+0x510>)
 80018be:	f002 f967 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, dutycycle);
 80018c2:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <main+0x514>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	88fa      	ldrh	r2, [r7, #6]
 80018c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ca:	e10d      	b.n	8001ae8 <main+0x708>
 80018cc:	f3af 8000 	nop.w
 80018d0:	b851eb85 	.word	0xb851eb85
 80018d4:	3feb851e 	.word	0x3feb851e
 80018d8:	20000550 	.word	0x20000550
 80018dc:	20000004 	.word	0x20000004
 80018e0:	20000554 	.word	0x20000554
 80018e4:	2000000c 	.word	0x2000000c
 80018e8:	20000010 	.word	0x20000010
 80018ec:	20000000 	.word	0x20000000
 80018f0:	40020800 	.word	0x40020800
 80018f4:	200002fc 	.word	0x200002fc
 80018f8:	200002b4 	.word	0x200002b4
 80018fc:	20000008 	.word	0x20000008
 8001900:	20000558 	.word	0x20000558

	   }
	  //bottom-right
		else if(lx > 70 && ly < -70)
 8001904:	4b51      	ldr	r3, [pc, #324]	@ (8001a4c <main+0x66c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b46      	cmp	r3, #70	@ 0x46
 800190a:	dd2e      	ble.n	800196a <main+0x58a>
 800190c:	4b50      	ldr	r3, [pc, #320]	@ (8001a50 <main+0x670>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 8001914:	da29      	bge.n	800196a <main+0x58a>
		{

			dutycycle=map(rx,-128,Buff2,400,0);
 8001916:	4b4f      	ldr	r3, [pc, #316]	@ (8001a54 <main+0x674>)
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	4b4f      	ldr	r3, [pc, #316]	@ (8001a58 <main+0x678>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001926:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800192a:	f7ff fd3b 	bl	80013a4 <map>
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]

			//motor 1
			HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, SET);
 8001932:	2201      	movs	r2, #1
 8001934:	2101      	movs	r1, #1
 8001936:	4849      	ldr	r0, [pc, #292]	@ (8001a5c <main+0x67c>)
 8001938:	f002 f92a 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 800193c:	4b48      	ldr	r3, [pc, #288]	@ (8001a60 <main+0x680>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	88fa      	ldrh	r2, [r7, #6]
 8001942:	639a      	str	r2, [r3, #56]	@ 0x38

		   //motor 2
		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2102      	movs	r1, #2
 8001948:	4844      	ldr	r0, [pc, #272]	@ (8001a5c <main+0x67c>)
 800194a:	f002 f921 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 800194e:	4b45      	ldr	r3, [pc, #276]	@ (8001a64 <main+0x684>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	635a      	str	r2, [r3, #52]	@ 0x34

		   //motor 3
		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	2104      	movs	r1, #4
 800195a:	4840      	ldr	r0, [pc, #256]	@ (8001a5c <main+0x67c>)
 800195c:	f002 f918 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, dutycycle);
 8001960:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <main+0x680>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	88fa      	ldrh	r2, [r7, #6]
 8001966:	635a      	str	r2, [r3, #52]	@ 0x34
 8001968:	e0be      	b.n	8001ae8 <main+0x708>

	   }
	  //bottom-left
		else if(lx < -70 && ly < -70)
 800196a:	4b38      	ldr	r3, [pc, #224]	@ (8001a4c <main+0x66c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 8001972:	da2e      	bge.n	80019d2 <main+0x5f2>
 8001974:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <main+0x670>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 800197c:	da29      	bge.n	80019d2 <main+0x5f2>
		{

			dutycycle=map(rx,-128,Buff2,400,0);
 800197e:	4b35      	ldr	r3, [pc, #212]	@ (8001a54 <main+0x674>)
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	4b35      	ldr	r3, [pc, #212]	@ (8001a58 <main+0x678>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2300      	movs	r3, #0
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800198e:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001992:	f7ff fd07 	bl	80013a4 <map>
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]

			//motor 1
			HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2101      	movs	r1, #1
 800199e:	482f      	ldr	r0, [pc, #188]	@ (8001a5c <main+0x67c>)
 80019a0:	f002 f8f6 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 80019a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a60 <main+0x680>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	88fa      	ldrh	r2, [r7, #6]
 80019aa:	639a      	str	r2, [r3, #56]	@ 0x38

		   //motor 2
		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	2102      	movs	r1, #2
 80019b0:	482a      	ldr	r0, [pc, #168]	@ (8001a5c <main+0x67c>)
 80019b2:	f002 f8ed 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, dutycycle);
 80019b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a64 <main+0x684>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	88fa      	ldrh	r2, [r7, #6]
 80019bc:	635a      	str	r2, [r3, #52]	@ 0x34

		   //motor 3
		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	2104      	movs	r1, #4
 80019c2:	4826      	ldr	r0, [pc, #152]	@ (8001a5c <main+0x67c>)
 80019c4:	f002 f8e4 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 80019c8:	4b25      	ldr	r3, [pc, #148]	@ (8001a60 <main+0x680>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2200      	movs	r2, #0
 80019ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80019d0:	e08a      	b.n	8001ae8 <main+0x708>

	   }

		//ANTICLOCKWISE
		else if(rx<=Buff2 && (ry<=BuffP && ry>=BuffN) )
 80019d2:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <main+0x674>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b20      	ldr	r3, [pc, #128]	@ (8001a58 <main+0x678>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	dc4a      	bgt.n	8001a74 <main+0x694>
 80019de:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <main+0x688>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b22      	ldr	r3, [pc, #136]	@ (8001a6c <main+0x68c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dc44      	bgt.n	8001a74 <main+0x694>
 80019ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <main+0x688>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <main+0x690>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	db3e      	blt.n	8001a74 <main+0x694>
		{

			dutycycle=map(rx,-128,Buff2,400,0);
 80019f6:	4b17      	ldr	r3, [pc, #92]	@ (8001a54 <main+0x674>)
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <main+0x678>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	2300      	movs	r3, #0
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001a06:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001a0a:	f7ff fccb 	bl	80013a4 <map>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]

			//motor 1
			HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2101      	movs	r1, #1
 8001a16:	4811      	ldr	r0, [pc, #68]	@ (8001a5c <main+0x67c>)
 8001a18:	f002 f8ba 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <main+0x680>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	88fa      	ldrh	r2, [r7, #6]
 8001a22:	639a      	str	r2, [r3, #56]	@ 0x38

		   //motor 2
		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2102      	movs	r1, #2
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <main+0x67c>)
 8001a2a:	f002 f8b1 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, dutycycle);
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <main+0x684>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	88fa      	ldrh	r2, [r7, #6]
 8001a34:	635a      	str	r2, [r3, #52]	@ 0x34

		   //motor 3
		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2104      	movs	r1, #4
 8001a3a:	4808      	ldr	r0, [pc, #32]	@ (8001a5c <main+0x67c>)
 8001a3c:	f002 f8a8 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, dutycycle);
 8001a40:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <main+0x680>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	88fa      	ldrh	r2, [r7, #6]
 8001a46:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a48:	e04e      	b.n	8001ae8 <main+0x708>
 8001a4a:	bf00      	nop
 8001a4c:	20000550 	.word	0x20000550
 8001a50:	20000554 	.word	0x20000554
 8001a54:	20000558 	.word	0x20000558
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	200002fc 	.word	0x200002fc
 8001a64:	200002b4 	.word	0x200002b4
 8001a68:	2000055c 	.word	0x2000055c
 8001a6c:	2000000c 	.word	0x2000000c
 8001a70:	20000010 	.word	0x20000010

	   }
	  //CLOCKWISE
		else if(rx>=Buff1 && (ry<=BuffP && ry>=BuffN) )
 8001a74:	4b53      	ldr	r3, [pc, #332]	@ (8001bc4 <main+0x7e4>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b53      	ldr	r3, [pc, #332]	@ (8001bc8 <main+0x7e8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	db33      	blt.n	8001ae8 <main+0x708>
 8001a80:	4b52      	ldr	r3, [pc, #328]	@ (8001bcc <main+0x7ec>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b52      	ldr	r3, [pc, #328]	@ (8001bd0 <main+0x7f0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dc2d      	bgt.n	8001ae8 <main+0x708>
 8001a8c:	4b4f      	ldr	r3, [pc, #316]	@ (8001bcc <main+0x7ec>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b50      	ldr	r3, [pc, #320]	@ (8001bd4 <main+0x7f4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	db27      	blt.n	8001ae8 <main+0x708>
		{

			dutycycle=map(rx,Buff1,127,0,400);
 8001a98:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc4 <main+0x7e4>)
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc8 <main+0x7e8>)
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	227f      	movs	r2, #127	@ 0x7f
 8001aaa:	f7ff fc7b 	bl	80013a4 <map>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
			//motor 1
			HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4848      	ldr	r0, [pc, #288]	@ (8001bd8 <main+0x7f8>)
 8001ab8:	f002 f86a 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 8001abc:	4b47      	ldr	r3, [pc, #284]	@ (8001bdc <main+0x7fc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	639a      	str	r2, [r3, #56]	@ 0x38

		   //motor 2
		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	4843      	ldr	r0, [pc, #268]	@ (8001bd8 <main+0x7f8>)
 8001aca:	f002 f861 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, dutycycle);
 8001ace:	4b44      	ldr	r3, [pc, #272]	@ (8001be0 <main+0x800>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	88fa      	ldrh	r2, [r7, #6]
 8001ad4:	635a      	str	r2, [r3, #52]	@ 0x34

		   //motor 3
		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, SET);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	2104      	movs	r1, #4
 8001ada:	483f      	ldr	r0, [pc, #252]	@ (8001bd8 <main+0x7f8>)
 8001adc:	f002 f858 	bl	8003b90 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, dutycycle);
 8001ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bdc <main+0x7fc>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	635a      	str	r2, [r3, #52]	@ 0x34


	   }

	  if (BNO055_GetAllData(&hi2c1, &imu_data) == HAL_OK) {
 8001ae8:	493e      	ldr	r1, [pc, #248]	@ (8001be4 <main+0x804>)
 8001aea:	483f      	ldr	r0, [pc, #252]	@ (8001be8 <main+0x808>)
 8001aec:	f7ff fc12 	bl	8001314 <BNO055_GetAllData>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d15f      	bne.n	8001bb6 <main+0x7d6>
//	  	  	  		   Print accelerometer data (m/s^2)
		  printf("Accel: X=%.2f, Y=%.2f, Z=%.2f m/s^2\n",
				 imu_data.accel_x, imu_data.accel_y, imu_data.accel_z);
 8001af6:	4b3b      	ldr	r3, [pc, #236]	@ (8001be4 <main+0x804>)
 8001af8:	681b      	ldr	r3, [r3, #0]
		  printf("Accel: X=%.2f, Y=%.2f, Z=%.2f m/s^2\n",
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd44 	bl	8000588 <__aeabi_f2d>
 8001b00:	4680      	mov	r8, r0
 8001b02:	4689      	mov	r9, r1
				 imu_data.accel_x, imu_data.accel_y, imu_data.accel_z);
 8001b04:	4b37      	ldr	r3, [pc, #220]	@ (8001be4 <main+0x804>)
 8001b06:	685b      	ldr	r3, [r3, #4]
		  printf("Accel: X=%.2f, Y=%.2f, Z=%.2f m/s^2\n",
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd3d 	bl	8000588 <__aeabi_f2d>
 8001b0e:	4604      	mov	r4, r0
 8001b10:	460d      	mov	r5, r1
				 imu_data.accel_x, imu_data.accel_y, imu_data.accel_z);
 8001b12:	4b34      	ldr	r3, [pc, #208]	@ (8001be4 <main+0x804>)
 8001b14:	689b      	ldr	r3, [r3, #8]
		  printf("Accel: X=%.2f, Y=%.2f, Z=%.2f m/s^2\n",
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd36 	bl	8000588 <__aeabi_f2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b24:	e9cd 4500 	strd	r4, r5, [sp]
 8001b28:	4642      	mov	r2, r8
 8001b2a:	464b      	mov	r3, r9
 8001b2c:	482f      	ldr	r0, [pc, #188]	@ (8001bec <main+0x80c>)
 8001b2e:	f005 ffb5 	bl	8007a9c <iprintf>

//	  	  	  		   Print gyroscope data (degrees/s)
		  printf("Gyro: X=%.2f, Y=%.2f, Z=%.2f deg/s\n",
				 imu_data.gyro_x, imu_data.gyro_y, imu_data.gyro_z);
 8001b32:	4b2c      	ldr	r3, [pc, #176]	@ (8001be4 <main+0x804>)
 8001b34:	68db      	ldr	r3, [r3, #12]
		  printf("Gyro: X=%.2f, Y=%.2f, Z=%.2f deg/s\n",
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd26 	bl	8000588 <__aeabi_f2d>
 8001b3c:	4680      	mov	r8, r0
 8001b3e:	4689      	mov	r9, r1
				 imu_data.gyro_x, imu_data.gyro_y, imu_data.gyro_z);
 8001b40:	4b28      	ldr	r3, [pc, #160]	@ (8001be4 <main+0x804>)
 8001b42:	691b      	ldr	r3, [r3, #16]
		  printf("Gyro: X=%.2f, Y=%.2f, Z=%.2f deg/s\n",
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fd1f 	bl	8000588 <__aeabi_f2d>
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	460d      	mov	r5, r1
				 imu_data.gyro_x, imu_data.gyro_y, imu_data.gyro_z);
 8001b4e:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <main+0x804>)
 8001b50:	695b      	ldr	r3, [r3, #20]
		  printf("Gyro: X=%.2f, Y=%.2f, Z=%.2f deg/s\n",
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fd18 	bl	8000588 <__aeabi_f2d>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b60:	e9cd 4500 	strd	r4, r5, [sp]
 8001b64:	4642      	mov	r2, r8
 8001b66:	464b      	mov	r3, r9
 8001b68:	4821      	ldr	r0, [pc, #132]	@ (8001bf0 <main+0x810>)
 8001b6a:	f005 ff97 	bl	8007a9c <iprintf>
		  printf("\n\n");
 8001b6e:	4821      	ldr	r0, [pc, #132]	@ (8001bf4 <main+0x814>)
 8001b70:	f005 fffc 	bl	8007b6c <puts>
//	  	  	  		   Print orientation data
		  printf("Euler: Yaw=%.2f, Roll=%.2f, Pitch=%.2f deg\n",
				 imu_data.euler_h, imu_data.euler_r, imu_data.euler_p);
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <main+0x804>)
 8001b76:	699b      	ldr	r3, [r3, #24]
		  printf("Euler: Yaw=%.2f, Roll=%.2f, Pitch=%.2f deg\n",
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fd05 	bl	8000588 <__aeabi_f2d>
 8001b7e:	4680      	mov	r8, r0
 8001b80:	4689      	mov	r9, r1
				 imu_data.euler_h, imu_data.euler_r, imu_data.euler_p);
 8001b82:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <main+0x804>)
 8001b84:	69db      	ldr	r3, [r3, #28]
		  printf("Euler: Yaw=%.2f, Roll=%.2f, Pitch=%.2f deg\n",
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fcfe 	bl	8000588 <__aeabi_f2d>
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	460d      	mov	r5, r1
				 imu_data.euler_h, imu_data.euler_r, imu_data.euler_p);
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <main+0x804>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
		  printf("Euler: Yaw=%.2f, Roll=%.2f, Pitch=%.2f deg\n",
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fcf7 	bl	8000588 <__aeabi_f2d>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ba2:	e9cd 4500 	strd	r4, r5, [sp]
 8001ba6:	4642      	mov	r2, r8
 8001ba8:	464b      	mov	r3, r9
 8001baa:	4813      	ldr	r0, [pc, #76]	@ (8001bf8 <main+0x818>)
 8001bac:	f005 ff76 	bl	8007a9c <iprintf>
		  printf("\n\n");
 8001bb0:	4810      	ldr	r0, [pc, #64]	@ (8001bf4 <main+0x814>)
 8001bb2:	f005 ffdb 	bl	8007b6c <puts>
	  }

	  HAL_Delay(100); // Read at 10Hz
 8001bb6:	2064      	movs	r0, #100	@ 0x64
 8001bb8:	f001 f8de 	bl	8002d78 <HAL_Delay>
	  HAL_Delay(10);
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	f001 f8db 	bl	8002d78 <HAL_Delay>
  {
 8001bc2:	e43d      	b.n	8001440 <main+0x60>
 8001bc4:	20000558 	.word	0x20000558
 8001bc8:	20000004 	.word	0x20000004
 8001bcc:	2000055c 	.word	0x2000055c
 8001bd0:	2000000c 	.word	0x2000000c
 8001bd4:	20000010 	.word	0x20000010
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	200002fc 	.word	0x200002fc
 8001be0:	200002b4 	.word	0x200002b4
 8001be4:	2000050c 	.word	0x2000050c
 8001be8:	20000218 	.word	0x20000218
 8001bec:	0800b410 	.word	0x0800b410
 8001bf0:	0800b438 	.word	0x0800b438
 8001bf4:	0800b45c 	.word	0x0800b45c
 8001bf8:	0800b460 	.word	0x0800b460

08001bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b094      	sub	sp, #80	@ 0x50
 8001c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	2234      	movs	r2, #52	@ 0x34
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f006 f8ae 	bl	8007d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c10:	f107 0308 	add.w	r3, r7, #8
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd8 <SystemClock_Config+0xdc>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	4a2b      	ldr	r2, [pc, #172]	@ (8001cd8 <SystemClock_Config+0xdc>)
 8001c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c30:	4b29      	ldr	r3, [pc, #164]	@ (8001cd8 <SystemClock_Config+0xdc>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	4b26      	ldr	r3, [pc, #152]	@ (8001cdc <SystemClock_Config+0xe0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a25      	ldr	r2, [pc, #148]	@ (8001cdc <SystemClock_Config+0xe0>)
 8001c46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <SystemClock_Config+0xe0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c60:	2310      	movs	r3, #16
 8001c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c64:	2302      	movs	r3, #2
 8001c66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c70:	23b4      	movs	r3, #180	@ 0xb4
 8001c72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c74:	2302      	movs	r3, #2
 8001c76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fb31 	bl	80052ec <HAL_RCC_OscConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c90:	f000 fb88 	bl	80023a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c94:	f002 ff90 	bl	8004bb8 <HAL_PWREx_EnableOverDrive>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c9e:	f000 fb81 	bl	80023a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca2:	230f      	movs	r3, #15
 8001ca4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cb8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	2105      	movs	r1, #5
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 ffc9 	bl	8004c58 <HAL_RCC_ClockConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ccc:	f000 fb6a 	bl	80023a4 <Error_Handler>
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3750      	adds	r7, #80	@ 0x50
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000

08001ce0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001cee:	4b14      	ldr	r3, [pc, #80]	@ (8001d40 <MX_DAC_Init+0x60>)
 8001cf0:	4a14      	ldr	r2, [pc, #80]	@ (8001d44 <MX_DAC_Init+0x64>)
 8001cf2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001cf4:	4812      	ldr	r0, [pc, #72]	@ (8001d40 <MX_DAC_Init+0x60>)
 8001cf6:	f001 f974 	bl	8002fe2 <HAL_DAC_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001d00:	f000 fb50 	bl	80023a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	4619      	mov	r1, r3
 8001d12:	480b      	ldr	r0, [pc, #44]	@ (8001d40 <MX_DAC_Init+0x60>)
 8001d14:	f001 f9de 	bl	80030d4 <HAL_DAC_ConfigChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001d1e:	f000 fb41 	bl	80023a4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001d22:	463b      	mov	r3, r7
 8001d24:	2210      	movs	r2, #16
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <MX_DAC_Init+0x60>)
 8001d2a:	f001 f9d3 	bl	80030d4 <HAL_DAC_ConfigChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001d34:	f000 fb36 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000204 	.word	0x20000204
 8001d44:	40007400 	.word	0x40007400

08001d48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d4e:	4a13      	ldr	r2, [pc, #76]	@ (8001d9c <MX_I2C1_Init+0x54>)
 8001d50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d52:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d54:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <MX_I2C1_Init+0x58>)
 8001d56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d84:	4804      	ldr	r0, [pc, #16]	@ (8001d98 <MX_I2C1_Init+0x50>)
 8001d86:	f001 ff1d 	bl	8003bc4 <HAL_I2C_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d90:	f000 fb08 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000218 	.word	0x20000218
 8001d9c:	40005400 	.word	0x40005400
 8001da0:	00061a80 	.word	0x00061a80

08001da4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	@ 0x30
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	2224      	movs	r2, #36	@ 0x24
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f005 ffda 	bl	8007d6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dc0:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <MX_TIM1_Init+0xa8>)
 8001dc2:	4a23      	ldr	r2, [pc, #140]	@ (8001e50 <MX_TIM1_Init+0xac>)
 8001dc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dc6:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <MX_TIM1_Init+0xa8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <MX_TIM1_Init+0xa8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <MX_TIM1_Init+0xa8>)
 8001dd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <MX_TIM1_Init+0xa8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <MX_TIM1_Init+0xa8>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de6:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <MX_TIM1_Init+0xa8>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dec:	2303      	movs	r3, #3
 8001dee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001df4:	2301      	movs	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e04:	2301      	movs	r3, #1
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4619      	mov	r1, r3
 8001e16:	480d      	ldr	r0, [pc, #52]	@ (8001e4c <MX_TIM1_Init+0xa8>)
 8001e18:	f003 fda4 	bl	8005964 <HAL_TIM_Encoder_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001e22:	f000 fabf 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4806      	ldr	r0, [pc, #24]	@ (8001e4c <MX_TIM1_Init+0xa8>)
 8001e34:	f004 f95a 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001e3e:	f000 fab1 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	3730      	adds	r7, #48	@ 0x30
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000026c 	.word	0x2000026c
 8001e50:	40010000 	.word	0x40010000

08001e54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	@ 0x30
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f005 ff82 	bl	8007d6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e70:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e78:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e86:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e92:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001eac:	2300      	movs	r3, #0
 8001eae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ebc:	f107 030c 	add.w	r3, r7, #12
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	480d      	ldr	r0, [pc, #52]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001ec4:	f003 fd4e 	bl	8005964 <HAL_TIM_Encoder_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001ece:	f000 fa69 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4806      	ldr	r0, [pc, #24]	@ (8001ef8 <MX_TIM2_Init+0xa4>)
 8001ee0:	f004 f904 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001eea:	f000 fa5b 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eee:	bf00      	nop
 8001ef0:	3730      	adds	r7, #48	@ 0x30
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200002b4 	.word	0x200002b4

08001efc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08c      	sub	sp, #48	@ 0x30
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	2224      	movs	r2, #36	@ 0x24
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f005 ff2e 	bl	8007d6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f18:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <MX_TIM3_Init+0xa0>)
 8001f1a:	4a21      	ldr	r2, [pc, #132]	@ (8001fa0 <MX_TIM3_Init+0xa4>)
 8001f1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <MX_TIM3_Init+0xa0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <MX_TIM3_Init+0xa0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <MX_TIM3_Init+0xa0>)
 8001f2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f32:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <MX_TIM3_Init+0xa0>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f38:	4b18      	ldr	r3, [pc, #96]	@ (8001f9c <MX_TIM3_Init+0xa0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f46:	2301      	movs	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f56:	2301      	movs	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001f62:	f107 030c 	add.w	r3, r7, #12
 8001f66:	4619      	mov	r1, r3
 8001f68:	480c      	ldr	r0, [pc, #48]	@ (8001f9c <MX_TIM3_Init+0xa0>)
 8001f6a:	f003 fcfb 	bl	8005964 <HAL_TIM_Encoder_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f74:	f000 fa16 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	4619      	mov	r1, r3
 8001f84:	4805      	ldr	r0, [pc, #20]	@ (8001f9c <MX_TIM3_Init+0xa0>)
 8001f86:	f004 f8b1 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f90:	f000 fa08 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	3730      	adds	r7, #48	@ 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200002fc 	.word	0x200002fc
 8001fa0:	40000400 	.word	0x40000400

08001fa4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001faa:	f107 0320 	add.w	r3, r7, #32
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
 8001fc0:	611a      	str	r2, [r3, #16]
 8001fc2:	615a      	str	r2, [r3, #20]
 8001fc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800207c <MX_TIM5_Init+0xd8>)
 8001fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002080 <MX_TIM5_Init+0xdc>)
 8001fca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 180-1;
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800207c <MX_TIM5_Init+0xd8>)
 8001fce:	22b3      	movs	r2, #179	@ 0xb3
 8001fd0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800207c <MX_TIM5_Init+0xd8>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001fd8:	4b28      	ldr	r3, [pc, #160]	@ (800207c <MX_TIM5_Init+0xd8>)
 8001fda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fde:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe0:	4b26      	ldr	r3, [pc, #152]	@ (800207c <MX_TIM5_Init+0xd8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe6:	4b25      	ldr	r3, [pc, #148]	@ (800207c <MX_TIM5_Init+0xd8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001fec:	4823      	ldr	r0, [pc, #140]	@ (800207c <MX_TIM5_Init+0xd8>)
 8001fee:	f003 fc6a 	bl	80058c6 <HAL_TIM_PWM_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001ff8:	f000 f9d4 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002004:	f107 0320 	add.w	r3, r7, #32
 8002008:	4619      	mov	r1, r3
 800200a:	481c      	ldr	r0, [pc, #112]	@ (800207c <MX_TIM5_Init+0xd8>)
 800200c:	f004 f86e 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002016:	f000 f9c5 	bl	80023a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201a:	2360      	movs	r3, #96	@ 0x60
 800201c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2200      	movs	r2, #0
 800202e:	4619      	mov	r1, r3
 8002030:	4812      	ldr	r0, [pc, #72]	@ (800207c <MX_TIM5_Init+0xd8>)
 8002032:	f003 fd3d 	bl	8005ab0 <HAL_TIM_PWM_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800203c:	f000 f9b2 	bl	80023a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	2204      	movs	r2, #4
 8002044:	4619      	mov	r1, r3
 8002046:	480d      	ldr	r0, [pc, #52]	@ (800207c <MX_TIM5_Init+0xd8>)
 8002048:	f003 fd32 	bl	8005ab0 <HAL_TIM_PWM_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002052:	f000 f9a7 	bl	80023a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2208      	movs	r2, #8
 800205a:	4619      	mov	r1, r3
 800205c:	4807      	ldr	r0, [pc, #28]	@ (800207c <MX_TIM5_Init+0xd8>)
 800205e:	f003 fd27 	bl	8005ab0 <HAL_TIM_PWM_ConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8002068:	f000 f99c 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800206c:	4803      	ldr	r0, [pc, #12]	@ (800207c <MX_TIM5_Init+0xd8>)
 800206e:	f000 fbd1 	bl	8002814 <HAL_TIM_MspPostInit>

}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	@ 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000344 	.word	0x20000344
 8002080:	40000c00 	.word	0x40000c00

08002084 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	@ 0x30
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	2224      	movs	r2, #36	@ 0x24
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f005 fe6a 	bl	8007d6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020a0:	4b22      	ldr	r3, [pc, #136]	@ (800212c <MX_TIM8_Init+0xa8>)
 80020a2:	4a23      	ldr	r2, [pc, #140]	@ (8002130 <MX_TIM8_Init+0xac>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80020a6:	4b21      	ldr	r3, [pc, #132]	@ (800212c <MX_TIM8_Init+0xa8>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b1f      	ldr	r3, [pc, #124]	@ (800212c <MX_TIM8_Init+0xa8>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80020b2:	4b1e      	ldr	r3, [pc, #120]	@ (800212c <MX_TIM8_Init+0xa8>)
 80020b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020b8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ba:	4b1c      	ldr	r3, [pc, #112]	@ (800212c <MX_TIM8_Init+0xa8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020c0:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <MX_TIM8_Init+0xa8>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c6:	4b19      	ldr	r3, [pc, #100]	@ (800212c <MX_TIM8_Init+0xa8>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020cc:	2303      	movs	r3, #3
 80020ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020d0:	2300      	movs	r3, #0
 80020d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020d4:	2301      	movs	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020e4:	2301      	movs	r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80020f0:	f107 030c 	add.w	r3, r7, #12
 80020f4:	4619      	mov	r1, r3
 80020f6:	480d      	ldr	r0, [pc, #52]	@ (800212c <MX_TIM8_Init+0xa8>)
 80020f8:	f003 fc34 	bl	8005964 <HAL_TIM_Encoder_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002102:	f000 f94f 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4806      	ldr	r0, [pc, #24]	@ (800212c <MX_TIM8_Init+0xa8>)
 8002114:	f003 ffea 	bl	80060ec <HAL_TIMEx_MasterConfigSynchronization>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800211e:	f000 f941 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	3730      	adds	r7, #48	@ 0x30
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000038c 	.word	0x2000038c
 8002130:	40010400 	.word	0x40010400

08002134 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
 8002148:	615a      	str	r2, [r3, #20]
 800214a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800214c:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <MX_TIM11_Init+0x94>)
 800214e:	4a1f      	ldr	r2, [pc, #124]	@ (80021cc <MX_TIM11_Init+0x98>)
 8002150:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 180-1;
 8002152:	4b1d      	ldr	r3, [pc, #116]	@ (80021c8 <MX_TIM11_Init+0x94>)
 8002154:	22b3      	movs	r2, #179	@ 0xb3
 8002156:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002158:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <MX_TIM11_Init+0x94>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800215e:	4b1a      	ldr	r3, [pc, #104]	@ (80021c8 <MX_TIM11_Init+0x94>)
 8002160:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002164:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <MX_TIM11_Init+0x94>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216c:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <MX_TIM11_Init+0x94>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002172:	4815      	ldr	r0, [pc, #84]	@ (80021c8 <MX_TIM11_Init+0x94>)
 8002174:	f003 fb58 	bl	8005828 <HAL_TIM_Base_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800217e:	f000 f911 	bl	80023a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002182:	4811      	ldr	r0, [pc, #68]	@ (80021c8 <MX_TIM11_Init+0x94>)
 8002184:	f003 fb9f 	bl	80058c6 <HAL_TIM_PWM_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800218e:	f000 f909 	bl	80023a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002192:	2360      	movs	r3, #96	@ 0x60
 8002194:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	2200      	movs	r2, #0
 80021a6:	4619      	mov	r1, r3
 80021a8:	4807      	ldr	r0, [pc, #28]	@ (80021c8 <MX_TIM11_Init+0x94>)
 80021aa:	f003 fc81 	bl	8005ab0 <HAL_TIM_PWM_ConfigChannel>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80021b4:	f000 f8f6 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80021b8:	4803      	ldr	r0, [pc, #12]	@ (80021c8 <MX_TIM11_Init+0x94>)
 80021ba:	f000 fb2b 	bl	8002814 <HAL_TIM_MspPostInit>

}
 80021be:	bf00      	nop
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200003d4 	.word	0x200003d4
 80021cc:	40014800 	.word	0x40014800

080021d0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
 80021e4:	615a      	str	r2, [r3, #20]
 80021e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80021e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002264 <MX_TIM13_Init+0x94>)
 80021ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002268 <MX_TIM13_Init+0x98>)
 80021ec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 180-1;
 80021ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <MX_TIM13_Init+0x94>)
 80021f0:	22b3      	movs	r2, #179	@ 0xb3
 80021f2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <MX_TIM13_Init+0x94>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80021fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <MX_TIM13_Init+0x94>)
 80021fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002200:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <MX_TIM13_Init+0x94>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <MX_TIM13_Init+0x94>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800220e:	4815      	ldr	r0, [pc, #84]	@ (8002264 <MX_TIM13_Init+0x94>)
 8002210:	f003 fb0a 	bl	8005828 <HAL_TIM_Base_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800221a:	f000 f8c3 	bl	80023a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800221e:	4811      	ldr	r0, [pc, #68]	@ (8002264 <MX_TIM13_Init+0x94>)
 8002220:	f003 fb51 	bl	80058c6 <HAL_TIM_PWM_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800222a:	f000 f8bb 	bl	80023a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222e:	2360      	movs	r3, #96	@ 0x60
 8002230:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	2200      	movs	r2, #0
 8002242:	4619      	mov	r1, r3
 8002244:	4807      	ldr	r0, [pc, #28]	@ (8002264 <MX_TIM13_Init+0x94>)
 8002246:	f003 fc33 	bl	8005ab0 <HAL_TIM_PWM_ConfigChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002250:	f000 f8a8 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002254:	4803      	ldr	r0, [pc, #12]	@ (8002264 <MX_TIM13_Init+0x94>)
 8002256:	f000 fadd 	bl	8002814 <HAL_TIM_MspPostInit>

}
 800225a:	bf00      	nop
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000041c 	.word	0x2000041c
 8002268:	40001c00 	.word	0x40001c00

0800226c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002270:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <MX_UART4_Init+0x4c>)
 8002272:	4a12      	ldr	r2, [pc, #72]	@ (80022bc <MX_UART4_Init+0x50>)
 8002274:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <MX_UART4_Init+0x4c>)
 8002278:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800227c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b0e      	ldr	r3, [pc, #56]	@ (80022b8 <MX_UART4_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <MX_UART4_Init+0x4c>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <MX_UART4_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <MX_UART4_Init+0x4c>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <MX_UART4_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <MX_UART4_Init+0x4c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80022a2:	4805      	ldr	r0, [pc, #20]	@ (80022b8 <MX_UART4_Init+0x4c>)
 80022a4:	f003 ff9e 	bl	80061e4 <HAL_UART_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80022ae:	f000 f879 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000464 	.word	0x20000464
 80022bc:	40004c00 	.word	0x40004c00

080022c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <MX_DMA_Init+0x3c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	4a0b      	ldr	r2, [pc, #44]	@ (80022fc <MX_DMA_Init+0x3c>)
 80022d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d6:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <MX_DMA_Init+0x3c>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	200d      	movs	r0, #13
 80022e8:	f000 fe45 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80022ec:	200d      	movs	r0, #13
 80022ee:	f000 fe5e 	bl	8002fae <HAL_NVIC_EnableIRQ>

}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800

08002300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <MX_GPIO_Init+0x9c>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a1f      	ldr	r2, [pc, #124]	@ (800239c <MX_GPIO_Init+0x9c>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <MX_GPIO_Init+0x9c>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	4b19      	ldr	r3, [pc, #100]	@ (800239c <MX_GPIO_Init+0x9c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a18      	ldr	r2, [pc, #96]	@ (800239c <MX_GPIO_Init+0x9c>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b16      	ldr	r3, [pc, #88]	@ (800239c <MX_GPIO_Init+0x9c>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	4b12      	ldr	r3, [pc, #72]	@ (800239c <MX_GPIO_Init+0x9c>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	4a11      	ldr	r2, [pc, #68]	@ (800239c <MX_GPIO_Init+0x9c>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	6313      	str	r3, [r2, #48]	@ 0x30
 800235e:	4b0f      	ldr	r3, [pc, #60]	@ (800239c <MX_GPIO_Init+0x9c>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, motor_1_Pin|motor_2_Pin|motor_3_Pin|pnue_1_Pin
 800236a:	2200      	movs	r2, #0
 800236c:	f240 3107 	movw	r1, #775	@ 0x307
 8002370:	480b      	ldr	r0, [pc, #44]	@ (80023a0 <MX_GPIO_Init+0xa0>)
 8002372:	f001 fc0d 	bl	8003b90 <HAL_GPIO_WritePin>
                          |pnue_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : motor_1_Pin motor_2_Pin motor_3_Pin pnue_1_Pin
                           pnue_2_Pin */
  GPIO_InitStruct.Pin = motor_1_Pin|motor_2_Pin|motor_3_Pin|pnue_1_Pin
 8002376:	f240 3307 	movw	r3, #775	@ 0x307
 800237a:	60fb      	str	r3, [r7, #12]
                          |pnue_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237c:	2301      	movs	r3, #1
 800237e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4619      	mov	r1, r3
 800238e:	4804      	ldr	r0, [pc, #16]	@ (80023a0 <MX_GPIO_Init+0xa0>)
 8002390:	f001 fa6a 	bl	8003868 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002394:	bf00      	nop
 8002396:	3720      	adds	r7, #32
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020800 	.word	0x40020800

080023a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a8:	b672      	cpsid	i
}
 80023aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <Error_Handler+0x8>

080023b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	4b10      	ldr	r3, [pc, #64]	@ (80023fc <HAL_MspInit+0x4c>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	4a0f      	ldr	r2, [pc, #60]	@ (80023fc <HAL_MspInit+0x4c>)
 80023c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023c6:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <HAL_MspInit+0x4c>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <HAL_MspInit+0x4c>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	4a08      	ldr	r2, [pc, #32]	@ (80023fc <HAL_MspInit+0x4c>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_MspInit+0x4c>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023ee:	2007      	movs	r0, #7
 80023f0:	f000 fdb6 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40023800 	.word	0x40023800

08002400 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	@ 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a17      	ldr	r2, [pc, #92]	@ (800247c <HAL_DAC_MspInit+0x7c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d127      	bne.n	8002472 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <HAL_DAC_MspInit+0x80>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	4a15      	ldr	r2, [pc, #84]	@ (8002480 <HAL_DAC_MspInit+0x80>)
 800242c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002430:	6413      	str	r3, [r2, #64]	@ 0x40
 8002432:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <HAL_DAC_MspInit+0x80>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <HAL_DAC_MspInit+0x80>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	4a0e      	ldr	r2, [pc, #56]	@ (8002480 <HAL_DAC_MspInit+0x80>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	@ 0x30
 800244e:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <HAL_DAC_MspInit+0x80>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = dac_dribbling_Pin|dac_turret_Pin;
 800245a:	2330      	movs	r3, #48	@ 0x30
 800245c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800245e:	2303      	movs	r3, #3
 8002460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4619      	mov	r1, r3
 800246c:	4805      	ldr	r0, [pc, #20]	@ (8002484 <HAL_DAC_MspInit+0x84>)
 800246e:	f001 f9fb 	bl	8003868 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	@ 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40007400 	.word	0x40007400
 8002480:	40023800 	.word	0x40023800
 8002484:	40020000 	.word	0x40020000

08002488 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	@ 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a19      	ldr	r2, [pc, #100]	@ (800250c <HAL_I2C_MspInit+0x84>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d12b      	bne.n	8002502 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <HAL_I2C_MspInit+0x88>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	4a17      	ldr	r2, [pc, #92]	@ (8002510 <HAL_I2C_MspInit+0x88>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_I2C_MspInit+0x88>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024c6:	23c0      	movs	r3, #192	@ 0xc0
 80024c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ca:	2312      	movs	r3, #18
 80024cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024d6:	2304      	movs	r3, #4
 80024d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	480c      	ldr	r0, [pc, #48]	@ (8002514 <HAL_I2C_MspInit+0x8c>)
 80024e2:	f001 f9c1 	bl	8003868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_I2C_MspInit+0x88>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	4a08      	ldr	r2, [pc, #32]	@ (8002510 <HAL_I2C_MspInit+0x88>)
 80024f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f6:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_I2C_MspInit+0x88>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002502:	bf00      	nop
 8002504:	3728      	adds	r7, #40	@ 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40005400 	.word	0x40005400
 8002510:	40023800 	.word	0x40023800
 8002514:	40020400 	.word	0x40020400

08002518 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b092      	sub	sp, #72	@ 0x48
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a83      	ldr	r2, [pc, #524]	@ (8002744 <HAL_TIM_Encoder_MspInit+0x22c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d12d      	bne.n	8002596 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	633b      	str	r3, [r7, #48]	@ 0x30
 800253e:	4b82      	ldr	r3, [pc, #520]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	4a81      	ldr	r2, [pc, #516]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6453      	str	r3, [r2, #68]	@ 0x44
 800254a:	4b7f      	ldr	r3, [pc, #508]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	633b      	str	r3, [r7, #48]	@ 0x30
 8002554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800255a:	4b7b      	ldr	r3, [pc, #492]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a7a      	ldr	r2, [pc, #488]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b78      	ldr	r3, [pc, #480]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002572:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002576:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002580:	2300      	movs	r3, #0
 8002582:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002584:	2301      	movs	r3, #1
 8002586:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002588:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800258c:	4619      	mov	r1, r3
 800258e:	486f      	ldr	r0, [pc, #444]	@ (800274c <HAL_TIM_Encoder_MspInit+0x234>)
 8002590:	f001 f96a 	bl	8003868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002594:	e0d1      	b.n	800273a <HAL_TIM_Encoder_MspInit+0x222>
  else if(htim_encoder->Instance==TIM2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800259e:	d14b      	bne.n	8002638 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025a4:	4b68      	ldr	r3, [pc, #416]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	4a67      	ldr	r2, [pc, #412]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b0:	4b65      	ldr	r3, [pc, #404]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025bc:	2300      	movs	r3, #0
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c0:	4b61      	ldr	r3, [pc, #388]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c4:	4a60      	ldr	r2, [pc, #384]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80025cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d8:	2300      	movs	r3, #0
 80025da:	623b      	str	r3, [r7, #32]
 80025dc:	4b5a      	ldr	r3, [pc, #360]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e0:	4a59      	ldr	r2, [pc, #356]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e8:	4b57      	ldr	r3, [pc, #348]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	623b      	str	r3, [r7, #32]
 80025f2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025f8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002606:	2301      	movs	r3, #1
 8002608:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800260e:	4619      	mov	r1, r3
 8002610:	484e      	ldr	r0, [pc, #312]	@ (800274c <HAL_TIM_Encoder_MspInit+0x234>)
 8002612:	f001 f929 	bl	8003868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002616:	2308      	movs	r3, #8
 8002618:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002626:	2301      	movs	r3, #1
 8002628:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800262e:	4619      	mov	r1, r3
 8002630:	4847      	ldr	r0, [pc, #284]	@ (8002750 <HAL_TIM_Encoder_MspInit+0x238>)
 8002632:	f001 f919 	bl	8003868 <HAL_GPIO_Init>
}
 8002636:	e080      	b.n	800273a <HAL_TIM_Encoder_MspInit+0x222>
  else if(htim_encoder->Instance==TIM3)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a45      	ldr	r2, [pc, #276]	@ (8002754 <HAL_TIM_Encoder_MspInit+0x23c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d14a      	bne.n	80026d8 <HAL_TIM_Encoder_MspInit+0x1c0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	4b40      	ldr	r3, [pc, #256]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	4a3f      	ldr	r2, [pc, #252]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	6413      	str	r3, [r2, #64]	@ 0x40
 8002652:	4b3d      	ldr	r3, [pc, #244]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	4b39      	ldr	r3, [pc, #228]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	4a38      	ldr	r2, [pc, #224]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6313      	str	r3, [r2, #48]	@ 0x30
 800266e:	4b36      	ldr	r3, [pc, #216]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	4a31      	ldr	r2, [pc, #196]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	6313      	str	r3, [r2, #48]	@ 0x30
 800268a:	4b2f      	ldr	r3, [pc, #188]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002696:	2380      	movs	r3, #128	@ 0x80
 8002698:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026a6:	2302      	movs	r3, #2
 80026a8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026ae:	4619      	mov	r1, r3
 80026b0:	4826      	ldr	r0, [pc, #152]	@ (800274c <HAL_TIM_Encoder_MspInit+0x234>)
 80026b2:	f001 f8d9 	bl	8003868 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026b6:	2310      	movs	r3, #16
 80026b8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026c6:	2302      	movs	r3, #2
 80026c8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026ce:	4619      	mov	r1, r3
 80026d0:	481f      	ldr	r0, [pc, #124]	@ (8002750 <HAL_TIM_Encoder_MspInit+0x238>)
 80026d2:	f001 f8c9 	bl	8003868 <HAL_GPIO_Init>
}
 80026d6:	e030      	b.n	800273a <HAL_TIM_Encoder_MspInit+0x222>
  else if(htim_encoder->Instance==TIM8)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002758 <HAL_TIM_Encoder_MspInit+0x240>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d12b      	bne.n	800273a <HAL_TIM_Encoder_MspInit+0x222>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	4b18      	ldr	r3, [pc, #96]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	4a10      	ldr	r2, [pc, #64]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6313      	str	r3, [r2, #48]	@ 0x30
 800270e:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_TIM_Encoder_MspInit+0x230>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800271a:	23c0      	movs	r3, #192	@ 0xc0
 800271c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800272a:	2303      	movs	r3, #3
 800272c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002732:	4619      	mov	r1, r3
 8002734:	4809      	ldr	r0, [pc, #36]	@ (800275c <HAL_TIM_Encoder_MspInit+0x244>)
 8002736:	f001 f897 	bl	8003868 <HAL_GPIO_Init>
}
 800273a:	bf00      	nop
 800273c:	3748      	adds	r7, #72	@ 0x48
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40010000 	.word	0x40010000
 8002748:	40023800 	.word	0x40023800
 800274c:	40020000 	.word	0x40020000
 8002750:	40020400 	.word	0x40020400
 8002754:	40000400 	.word	0x40000400
 8002758:	40010400 	.word	0x40010400
 800275c:	40020800 	.word	0x40020800

08002760 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0b      	ldr	r2, [pc, #44]	@ (800279c <HAL_TIM_PWM_MspInit+0x3c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d10d      	bne.n	800278e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_TIM_PWM_MspInit+0x40>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <HAL_TIM_PWM_MspInit+0x40>)
 800277c:	f043 0308 	orr.w	r3, r3, #8
 8002780:	6413      	str	r3, [r2, #64]	@ 0x40
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <HAL_TIM_PWM_MspInit+0x40>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40000c00 	.word	0x40000c00
 80027a0:	40023800 	.word	0x40023800

080027a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a15      	ldr	r2, [pc, #84]	@ (8002808 <HAL_TIM_Base_MspInit+0x64>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10e      	bne.n	80027d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b14      	ldr	r3, [pc, #80]	@ (800280c <HAL_TIM_Base_MspInit+0x68>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	4a13      	ldr	r2, [pc, #76]	@ (800280c <HAL_TIM_Base_MspInit+0x68>)
 80027c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027c6:	4b11      	ldr	r3, [pc, #68]	@ (800280c <HAL_TIM_Base_MspInit+0x68>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80027d2:	e012      	b.n	80027fa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM13)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002810 <HAL_TIM_Base_MspInit+0x6c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10d      	bne.n	80027fa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <HAL_TIM_Base_MspInit+0x68>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4a09      	ldr	r2, [pc, #36]	@ (800280c <HAL_TIM_Base_MspInit+0x68>)
 80027e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ee:	4b07      	ldr	r3, [pc, #28]	@ (800280c <HAL_TIM_Base_MspInit+0x68>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	68bb      	ldr	r3, [r7, #8]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40014800 	.word	0x40014800
 800280c:	40023800 	.word	0x40023800
 8002810:	40001c00 	.word	0x40001c00

08002814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	@ 0x28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a36      	ldr	r2, [pc, #216]	@ (800290c <HAL_TIM_MspPostInit+0xf8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d11e      	bne.n	8002874 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	4b35      	ldr	r3, [pc, #212]	@ (8002910 <HAL_TIM_MspPostInit+0xfc>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a34      	ldr	r2, [pc, #208]	@ (8002910 <HAL_TIM_MspPostInit+0xfc>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b32      	ldr	r3, [pc, #200]	@ (8002910 <HAL_TIM_MspPostInit+0xfc>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_1_PWM_Pin|MOTOR_2_PWM_Pin|MOTOTR_3_PWM_Pin;
 8002852:	2307      	movs	r3, #7
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002862:	2302      	movs	r3, #2
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4829      	ldr	r0, [pc, #164]	@ (8002914 <HAL_TIM_MspPostInit+0x100>)
 800286e:	f000 fffb 	bl	8003868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002872:	e047      	b.n	8002904 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM11)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a27      	ldr	r2, [pc, #156]	@ (8002918 <HAL_TIM_MspPostInit+0x104>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d11f      	bne.n	80028be <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b23      	ldr	r3, [pc, #140]	@ (8002910 <HAL_TIM_MspPostInit+0xfc>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	4a22      	ldr	r2, [pc, #136]	@ (8002910 <HAL_TIM_MspPostInit+0xfc>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6313      	str	r3, [r2, #48]	@ 0x30
 800288e:	4b20      	ldr	r3, [pc, #128]	@ (8002910 <HAL_TIM_MspPostInit+0xfc>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800289a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800289e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80028ac:	2303      	movs	r3, #3
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	4819      	ldr	r0, [pc, #100]	@ (800291c <HAL_TIM_MspPostInit+0x108>)
 80028b8:	f000 ffd6 	bl	8003868 <HAL_GPIO_Init>
}
 80028bc:	e022      	b.n	8002904 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM13)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a17      	ldr	r2, [pc, #92]	@ (8002920 <HAL_TIM_MspPostInit+0x10c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d11d      	bne.n	8002904 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	4b10      	ldr	r3, [pc, #64]	@ (8002910 <HAL_TIM_MspPostInit+0xfc>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002910 <HAL_TIM_MspPostInit+0xfc>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002910 <HAL_TIM_MspPostInit+0xfc>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028e4:	2340      	movs	r3, #64	@ 0x40
 80028e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80028f4:	2309      	movs	r3, #9
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4619      	mov	r1, r3
 80028fe:	4805      	ldr	r0, [pc, #20]	@ (8002914 <HAL_TIM_MspPostInit+0x100>)
 8002900:	f000 ffb2 	bl	8003868 <HAL_GPIO_Init>
}
 8002904:	bf00      	nop
 8002906:	3728      	adds	r7, #40	@ 0x28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40000c00 	.word	0x40000c00
 8002910:	40023800 	.word	0x40023800
 8002914:	40020000 	.word	0x40020000
 8002918:	40014800 	.word	0x40014800
 800291c:	40020400 	.word	0x40020400
 8002920:	40001c00 	.word	0x40001c00

08002924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	@ 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a31      	ldr	r2, [pc, #196]	@ (8002a08 <HAL_UART_MspInit+0xe4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d15b      	bne.n	80029fe <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	4b30      	ldr	r3, [pc, #192]	@ (8002a0c <HAL_UART_MspInit+0xe8>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	4a2f      	ldr	r2, [pc, #188]	@ (8002a0c <HAL_UART_MspInit+0xe8>)
 8002950:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002954:	6413      	str	r3, [r2, #64]	@ 0x40
 8002956:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <HAL_UART_MspInit+0xe8>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	4b29      	ldr	r3, [pc, #164]	@ (8002a0c <HAL_UART_MspInit+0xe8>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	4a28      	ldr	r2, [pc, #160]	@ (8002a0c <HAL_UART_MspInit+0xe8>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	6313      	str	r3, [r2, #48]	@ 0x30
 8002972:	4b26      	ldr	r3, [pc, #152]	@ (8002a0c <HAL_UART_MspInit+0xe8>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800297e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298c:	2303      	movs	r3, #3
 800298e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002990:	2308      	movs	r3, #8
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	4619      	mov	r1, r3
 800299a:	481d      	ldr	r0, [pc, #116]	@ (8002a10 <HAL_UART_MspInit+0xec>)
 800299c:	f000 ff64 	bl	8003868 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80029a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a18 <HAL_UART_MspInit+0xf4>)
 80029a4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80029a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029a8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029ac:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ae:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b4:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029ba:	4b16      	ldr	r3, [pc, #88]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029c0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029c2:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029c8:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80029ce:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029d4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029d8:	2200      	movs	r2, #0
 80029da:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029de:	2200      	movs	r2, #0
 80029e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80029e2:	480c      	ldr	r0, [pc, #48]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029e4:	f000 fbd0 	bl	8003188 <HAL_DMA_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80029ee:	f7ff fcd9 	bl	80023a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a07      	ldr	r2, [pc, #28]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029f8:	4a06      	ldr	r2, [pc, #24]	@ (8002a14 <HAL_UART_MspInit+0xf0>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80029fe:	bf00      	nop
 8002a00:	3728      	adds	r7, #40	@ 0x28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40004c00 	.word	0x40004c00
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020800 	.word	0x40020800
 8002a14:	200004ac 	.word	0x200004ac
 8002a18:	40026040 	.word	0x40026040

08002a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <NMI_Handler+0x4>

08002a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <HardFault_Handler+0x4>

08002a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a30:	bf00      	nop
 8002a32:	e7fd      	b.n	8002a30 <MemManage_Handler+0x4>

08002a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <BusFault_Handler+0x4>

08002a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <UsageFault_Handler+0x4>

08002a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a72:	f000 f961 	bl	8002d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002a80:	4802      	ldr	r0, [pc, #8]	@ (8002a8c <DMA1_Stream2_IRQHandler+0x10>)
 8002a82:	f000 fc87 	bl	8003394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200004ac 	.word	0x200004ac

08002a90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return 1;
 8002a94:	2301      	movs	r3, #1
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <_kill>:

int _kill(int pid, int sig)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aaa:	f005 f9b1 	bl	8007e10 <__errno>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2216      	movs	r2, #22
 8002ab2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_exit>:

void _exit (int status)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff ffe7 	bl	8002aa0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ad2:	bf00      	nop
 8002ad4:	e7fd      	b.n	8002ad2 <_exit+0x12>

08002ad6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e00a      	b.n	8002afe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ae8:	f3af 8000 	nop.w
 8002aec:	4601      	mov	r1, r0
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	60ba      	str	r2, [r7, #8]
 8002af4:	b2ca      	uxtb	r2, r1
 8002af6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3301      	adds	r3, #1
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	dbf0      	blt.n	8002ae8 <_read+0x12>
  }

  return len;
 8002b06:	687b      	ldr	r3, [r7, #4]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e009      	b.n	8002b36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	60ba      	str	r2, [r7, #8]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3301      	adds	r3, #1
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	dbf1      	blt.n	8002b22 <_write+0x12>
  }
  return len;
 8002b3e:	687b      	ldr	r3, [r7, #4]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <_close>:

int _close(int file)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b70:	605a      	str	r2, [r3, #4]
  return 0;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_isatty>:

int _isatty(int file)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b88:	2301      	movs	r3, #1
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb8:	4a14      	ldr	r2, [pc, #80]	@ (8002c0c <_sbrk+0x5c>)
 8002bba:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <_sbrk+0x60>)
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc4:	4b13      	ldr	r3, [pc, #76]	@ (8002c14 <_sbrk+0x64>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <_sbrk+0x64>)
 8002bce:	4a12      	ldr	r2, [pc, #72]	@ (8002c18 <_sbrk+0x68>)
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bd2:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <_sbrk+0x64>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d207      	bcs.n	8002bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be0:	f005 f916 	bl	8007e10 <__errno>
 8002be4:	4603      	mov	r3, r0
 8002be6:	220c      	movs	r2, #12
 8002be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	e009      	b.n	8002c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf0:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <_sbrk+0x64>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bf6:	4b07      	ldr	r3, [pc, #28]	@ (8002c14 <_sbrk+0x64>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	4a05      	ldr	r2, [pc, #20]	@ (8002c14 <_sbrk+0x64>)
 8002c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20020000 	.word	0x20020000
 8002c10:	00000400 	.word	0x00000400
 8002c14:	20000568 	.word	0x20000568
 8002c18:	200006c0 	.word	0x200006c0

08002c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c20:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <SystemInit+0x20>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c26:	4a05      	ldr	r2, [pc, #20]	@ (8002c3c <SystemInit+0x20>)
 8002c28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c44:	f7ff ffea 	bl	8002c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c48:	480c      	ldr	r0, [pc, #48]	@ (8002c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c4a:	490d      	ldr	r1, [pc, #52]	@ (8002c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c50:	e002      	b.n	8002c58 <LoopCopyDataInit>

08002c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c56:	3304      	adds	r3, #4

08002c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c5c:	d3f9      	bcc.n	8002c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c60:	4c0a      	ldr	r4, [pc, #40]	@ (8002c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c64:	e001      	b.n	8002c6a <LoopFillZerobss>

08002c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c68:	3204      	adds	r2, #4

08002c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c6c:	d3fb      	bcc.n	8002c66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c6e:	f005 f8d5 	bl	8007e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c72:	f7fe fbb5 	bl	80013e0 <main>
  bx  lr    
 8002c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c80:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002c84:	0800b8e8 	.word	0x0800b8e8
  ldr r2, =_sbss
 8002c88:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002c8c:	200006bc 	.word	0x200006bc

08002c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c90:	e7fe      	b.n	8002c90 <ADC_IRQHandler>
	...

08002c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c98:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd4 <HAL_Init+0x40>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd4 <HAL_Init+0x40>)
 8002c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <HAL_Init+0x40>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd4 <HAL_Init+0x40>)
 8002caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb0:	4b08      	ldr	r3, [pc, #32]	@ (8002cd4 <HAL_Init+0x40>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a07      	ldr	r2, [pc, #28]	@ (8002cd4 <HAL_Init+0x40>)
 8002cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cbc:	2003      	movs	r0, #3
 8002cbe:	f000 f94f 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f000 f808 	bl	8002cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc8:	f7ff fb72 	bl	80023b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023c00 	.word	0x40023c00

08002cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ce0:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <HAL_InitTick+0x54>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <HAL_InitTick+0x58>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f967 	bl	8002fca <HAL_SYSTICK_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00e      	b.n	8002d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b0f      	cmp	r3, #15
 8002d0a:	d80a      	bhi.n	8002d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	f000 f92f 	bl	8002f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d18:	4a06      	ldr	r2, [pc, #24]	@ (8002d34 <HAL_InitTick+0x5c>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000014 	.word	0x20000014
 8002d30:	2000001c 	.word	0x2000001c
 8002d34:	20000018 	.word	0x20000018

08002d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <HAL_IncTick+0x20>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <HAL_IncTick+0x24>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	4a04      	ldr	r2, [pc, #16]	@ (8002d5c <HAL_IncTick+0x24>)
 8002d4a:	6013      	str	r3, [r2, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	2000001c 	.word	0x2000001c
 8002d5c:	2000056c 	.word	0x2000056c

08002d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return uwTick;
 8002d64:	4b03      	ldr	r3, [pc, #12]	@ (8002d74 <HAL_GetTick+0x14>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	2000056c 	.word	0x2000056c

08002d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d80:	f7ff ffee 	bl	8002d60 <HAL_GetTick>
 8002d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d005      	beq.n	8002d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d92:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <HAL_Delay+0x44>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d9e:	bf00      	nop
 8002da0:	f7ff ffde 	bl	8002d60 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d8f7      	bhi.n	8002da0 <HAL_Delay+0x28>
  {
  }
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	2000001c 	.word	0x2000001c

08002dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e0c:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <__NVIC_GetPriorityGrouping+0x18>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f003 0307 	and.w	r3, r3, #7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	db0b      	blt.n	8002e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4907      	ldr	r1, [pc, #28]	@ (8002e5c <__NVIC_EnableIRQ+0x38>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2001      	movs	r0, #1
 8002e46:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db0a      	blt.n	8002e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	490c      	ldr	r1, [pc, #48]	@ (8002eac <__NVIC_SetPriority+0x4c>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	440b      	add	r3, r1
 8002e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e88:	e00a      	b.n	8002ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4908      	ldr	r1, [pc, #32]	@ (8002eb0 <__NVIC_SetPriority+0x50>)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	3b04      	subs	r3, #4
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	761a      	strb	r2, [r3, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	@ 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f1c3 0307 	rsb	r3, r3, #7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf28      	it	cs
 8002ed2:	2304      	movcs	r3, #4
 8002ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d902      	bls.n	8002ee4 <NVIC_EncodePriority+0x30>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3b03      	subs	r3, #3
 8002ee2:	e000      	b.n	8002ee6 <NVIC_EncodePriority+0x32>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002efc:	f04f 31ff 	mov.w	r1, #4294967295
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	43d9      	mvns	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	4313      	orrs	r3, r2
         );
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	@ 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f2c:	d301      	bcc.n	8002f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00f      	b.n	8002f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f32:	4a0a      	ldr	r2, [pc, #40]	@ (8002f5c <SysTick_Config+0x40>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	f7ff ff8e 	bl	8002e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f44:	4b05      	ldr	r3, [pc, #20]	@ (8002f5c <SysTick_Config+0x40>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4a:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <SysTick_Config+0x40>)
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	e000e010 	.word	0xe000e010

08002f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff29 	bl	8002dc0 <__NVIC_SetPriorityGrouping>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f88:	f7ff ff3e 	bl	8002e08 <__NVIC_GetPriorityGrouping>
 8002f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff8e 	bl	8002eb4 <NVIC_EncodePriority>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff5d 	bl	8002e60 <__NVIC_SetPriority>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff31 	bl	8002e24 <__NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ffa2 	bl	8002f1c <SysTick_Config>
 8002fd8:	4603      	mov	r3, r0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e014      	b.n	800301e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	791b      	ldrb	r3, [r3, #4]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d105      	bne.n	800300a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff f9fb 	bl	8002400 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2202      	movs	r2, #2
 800300e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e046      	b.n	80030c8 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	795b      	ldrb	r3, [r3, #5]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_DAC_Start+0x20>
 8003042:	2302      	movs	r3, #2
 8003044:	e040      	b.n	80030c8 <HAL_DAC_Start+0xa2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2201      	movs	r2, #1
 8003060:	409a      	lsls	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10f      	bne.n	8003090 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800307a:	2b3c      	cmp	r3, #60	@ 0x3c
 800307c:	d11d      	bne.n	80030ba <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	e014      	b.n	80030ba <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	213c      	movs	r1, #60	@ 0x3c
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d107      	bne.n	80030ba <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0202 	orr.w	r2, r2, #2
 80030b8:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	@ 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_DAC_ConfigChannel+0x1c>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e042      	b.n	800317a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	795b      	ldrb	r3, [r3, #5]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_DAC_ConfigChannel+0x2c>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e03c      	b.n	800317a <HAL_DAC_ConfigChannel+0xa6>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2202      	movs	r2, #2
 800310a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6819      	ldr	r1, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	22c0      	movs	r2, #192	@ 0xc0
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43da      	mvns	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	400a      	ands	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003178:	7ffb      	ldrb	r3, [r7, #31]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	@ 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003194:	f7ff fde4 	bl	8002d60 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e099      	b.n	80032d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c4:	e00f      	b.n	80031e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031c6:	f7ff fdcb 	bl	8002d60 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	d908      	bls.n	80031e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2203      	movs	r2, #3
 80031de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e078      	b.n	80032d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e8      	bne.n	80031c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4b38      	ldr	r3, [pc, #224]	@ (80032e0 <HAL_DMA_Init+0x158>)
 8003200:	4013      	ands	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003212:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800322a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	2b04      	cmp	r3, #4
 800323e:	d107      	bne.n	8003250 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	4313      	orrs	r3, r2
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f023 0307 	bic.w	r3, r3, #7
 8003266:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	2b04      	cmp	r3, #4
 8003278:	d117      	bne.n	80032aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00e      	beq.n	80032aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fa6f 	bl	8003770 <DMA_CheckFifoParam>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2240      	movs	r2, #64	@ 0x40
 800329c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80032a6:	2301      	movs	r3, #1
 80032a8:	e016      	b.n	80032d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fa26 	bl	8003704 <DMA_CalcBaseAndBitshift>
 80032b8:	4603      	mov	r3, r0
 80032ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c0:	223f      	movs	r2, #63	@ 0x3f
 80032c2:	409a      	lsls	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	f010803f 	.word	0xf010803f

080032e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_DMA_Start_IT+0x26>
 8003306:	2302      	movs	r3, #2
 8003308:	e040      	b.n	800338c <HAL_DMA_Start_IT+0xa8>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d12f      	bne.n	800337e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f9b8 	bl	80036a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800333c:	223f      	movs	r2, #63	@ 0x3f
 800333e:	409a      	lsls	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0216 	orr.w	r2, r2, #22
 8003352:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0208 	orr.w	r2, r2, #8
 800336a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e005      	b.n	800338a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003386:	2302      	movs	r3, #2
 8003388:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800338a:	7dfb      	ldrb	r3, [r7, #23]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033a0:	4b8e      	ldr	r3, [pc, #568]	@ (80035dc <HAL_DMA_IRQHandler+0x248>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a8e      	ldr	r2, [pc, #568]	@ (80035e0 <HAL_DMA_IRQHandler+0x24c>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	0a9b      	lsrs	r3, r3, #10
 80033ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	2208      	movs	r2, #8
 80033c0:	409a      	lsls	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01a      	beq.n	8003400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0204 	bic.w	r2, r2, #4
 80033e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ec:	2208      	movs	r2, #8
 80033ee:	409a      	lsls	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003404:	2201      	movs	r2, #1
 8003406:	409a      	lsls	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d012      	beq.n	8003436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003422:	2201      	movs	r2, #1
 8003424:	409a      	lsls	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342e:	f043 0202 	orr.w	r2, r3, #2
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343a:	2204      	movs	r2, #4
 800343c:	409a      	lsls	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d012      	beq.n	800346c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	2204      	movs	r2, #4
 800345a:	409a      	lsls	r2, r3
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003464:	f043 0204 	orr.w	r2, r3, #4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003470:	2210      	movs	r2, #16
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d043      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d03c      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348e:	2210      	movs	r2, #16
 8003490:	409a      	lsls	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d018      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d108      	bne.n	80034c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d024      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	4798      	blx	r3
 80034c2:	e01f      	b.n	8003504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01b      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
 80034d4:	e016      	b.n	8003504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d107      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0208 	bic.w	r2, r2, #8
 80034f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003508:	2220      	movs	r2, #32
 800350a:	409a      	lsls	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 808f 	beq.w	8003634 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8087 	beq.w	8003634 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352a:	2220      	movs	r2, #32
 800352c:	409a      	lsls	r2, r3
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b05      	cmp	r3, #5
 800353c:	d136      	bne.n	80035ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0216 	bic.w	r2, r2, #22
 800354c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800355c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_DMA_IRQHandler+0x1da>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0208 	bic.w	r2, r2, #8
 800357c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003582:	223f      	movs	r2, #63	@ 0x3f
 8003584:	409a      	lsls	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d07e      	beq.n	80036a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	4798      	blx	r3
        }
        return;
 80035aa:	e079      	b.n	80036a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d01d      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10d      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d031      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
 80035d8:	e02c      	b.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
 80035da:	bf00      	nop
 80035dc:	20000014 	.word	0x20000014
 80035e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
 80035f4:	e01e      	b.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10f      	bne.n	8003624 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0210 	bic.w	r2, r2, #16
 8003612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003638:	2b00      	cmp	r3, #0
 800363a:	d032      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d022      	beq.n	800368e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2205      	movs	r2, #5
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3301      	adds	r3, #1
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	429a      	cmp	r2, r3
 800366a:	d307      	bcc.n	800367c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f2      	bne.n	8003660 <HAL_DMA_IRQHandler+0x2cc>
 800367a:	e000      	b.n	800367e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800367c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
 800369e:	e000      	b.n	80036a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036a0:	bf00      	nop
    }
  }
}
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b40      	cmp	r3, #64	@ 0x40
 80036d4:	d108      	bne.n	80036e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036e6:	e007      	b.n	80036f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	3b10      	subs	r3, #16
 8003714:	4a14      	ldr	r2, [pc, #80]	@ (8003768 <DMA_CalcBaseAndBitshift+0x64>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800371e:	4a13      	ldr	r2, [pc, #76]	@ (800376c <DMA_CalcBaseAndBitshift+0x68>)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d909      	bls.n	8003746 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	1d1a      	adds	r2, r3, #4
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	659a      	str	r2, [r3, #88]	@ 0x58
 8003744:	e007      	b.n	8003756 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	aaaaaaab 	.word	0xaaaaaaab
 800376c:	0800b4a4 	.word	0x0800b4a4

08003770 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003780:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d11f      	bne.n	80037ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d856      	bhi.n	800383e <DMA_CheckFifoParam+0xce>
 8003790:	a201      	add	r2, pc, #4	@ (adr r2, 8003798 <DMA_CheckFifoParam+0x28>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037bb 	.word	0x080037bb
 80037a0:	080037a9 	.word	0x080037a9
 80037a4:	0800383f 	.word	0x0800383f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d046      	beq.n	8003842 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b8:	e043      	b.n	8003842 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037c2:	d140      	bne.n	8003846 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c8:	e03d      	b.n	8003846 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d2:	d121      	bne.n	8003818 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d837      	bhi.n	800384a <DMA_CheckFifoParam+0xda>
 80037da:	a201      	add	r2, pc, #4	@ (adr r2, 80037e0 <DMA_CheckFifoParam+0x70>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	080037f7 	.word	0x080037f7
 80037e8:	080037f1 	.word	0x080037f1
 80037ec:	08003809 	.word	0x08003809
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
      break;
 80037f4:	e030      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d025      	beq.n	800384e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003806:	e022      	b.n	800384e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003810:	d11f      	bne.n	8003852 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003816:	e01c      	b.n	8003852 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d903      	bls.n	8003826 <DMA_CheckFifoParam+0xb6>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d003      	beq.n	800382c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003824:	e018      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
      break;
 800382a:	e015      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      break;
 800383c:	e00b      	b.n	8003856 <DMA_CheckFifoParam+0xe6>
      break;
 800383e:	bf00      	nop
 8003840:	e00a      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 8003842:	bf00      	nop
 8003844:	e008      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 8003846:	bf00      	nop
 8003848:	e006      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 800384a:	bf00      	nop
 800384c:	e004      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 800384e:	bf00      	nop
 8003850:	e002      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;   
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <DMA_CheckFifoParam+0xe8>
      break;
 8003856:	bf00      	nop
    }
  } 
  
  return status; 
 8003858:	7bfb      	ldrb	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop

08003868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003868:	b480      	push	{r7}
 800386a:	b089      	sub	sp, #36	@ 0x24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	e165      	b.n	8003b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003884:	2201      	movs	r2, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	429a      	cmp	r2, r3
 800389e:	f040 8154 	bne.w	8003b4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d005      	beq.n	80038ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d130      	bne.n	800391c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	2203      	movs	r2, #3
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f0:	2201      	movs	r2, #1
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 0201 	and.w	r2, r3, #1
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b03      	cmp	r3, #3
 8003926:	d017      	beq.n	8003958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d123      	bne.n	80039ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	08da      	lsrs	r2, r3, #3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3208      	adds	r2, #8
 800396c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	08da      	lsrs	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3208      	adds	r2, #8
 80039a6:	69b9      	ldr	r1, [r7, #24]
 80039a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	2203      	movs	r2, #3
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 0203 	and.w	r2, r3, #3
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80ae 	beq.w	8003b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b68 <HAL_GPIO_Init+0x300>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b68 <HAL_GPIO_Init+0x300>)
 80039f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039fe:	4b5a      	ldr	r3, [pc, #360]	@ (8003b68 <HAL_GPIO_Init+0x300>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a0a:	4a58      	ldr	r2, [pc, #352]	@ (8003b6c <HAL_GPIO_Init+0x304>)
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	3302      	adds	r3, #2
 8003a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	220f      	movs	r2, #15
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43db      	mvns	r3, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a4f      	ldr	r2, [pc, #316]	@ (8003b70 <HAL_GPIO_Init+0x308>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d025      	beq.n	8003a82 <HAL_GPIO_Init+0x21a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4e      	ldr	r2, [pc, #312]	@ (8003b74 <HAL_GPIO_Init+0x30c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01f      	beq.n	8003a7e <HAL_GPIO_Init+0x216>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4d      	ldr	r2, [pc, #308]	@ (8003b78 <HAL_GPIO_Init+0x310>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d019      	beq.n	8003a7a <HAL_GPIO_Init+0x212>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a4c      	ldr	r2, [pc, #304]	@ (8003b7c <HAL_GPIO_Init+0x314>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_GPIO_Init+0x20e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4b      	ldr	r2, [pc, #300]	@ (8003b80 <HAL_GPIO_Init+0x318>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00d      	beq.n	8003a72 <HAL_GPIO_Init+0x20a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4a      	ldr	r2, [pc, #296]	@ (8003b84 <HAL_GPIO_Init+0x31c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <HAL_GPIO_Init+0x206>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a49      	ldr	r2, [pc, #292]	@ (8003b88 <HAL_GPIO_Init+0x320>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <HAL_GPIO_Init+0x202>
 8003a66:	2306      	movs	r3, #6
 8003a68:	e00c      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a6a:	2307      	movs	r3, #7
 8003a6c:	e00a      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a6e:	2305      	movs	r3, #5
 8003a70:	e008      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a72:	2304      	movs	r3, #4
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a76:	2303      	movs	r3, #3
 8003a78:	e004      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_GPIO_Init+0x21c>
 8003a82:	2300      	movs	r3, #0
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	f002 0203 	and.w	r2, r2, #3
 8003a8a:	0092      	lsls	r2, r2, #2
 8003a8c:	4093      	lsls	r3, r2
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a94:	4935      	ldr	r1, [pc, #212]	@ (8003b6c <HAL_GPIO_Init+0x304>)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	3302      	adds	r3, #2
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac6:	4a31      	ldr	r2, [pc, #196]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003acc:	4b2f      	ldr	r3, [pc, #188]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af0:	4a26      	ldr	r2, [pc, #152]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003af6:	4b25      	ldr	r3, [pc, #148]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b20:	4b1a      	ldr	r3, [pc, #104]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b44:	4a11      	ldr	r2, [pc, #68]	@ (8003b8c <HAL_GPIO_Init+0x324>)
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b0f      	cmp	r3, #15
 8003b54:	f67f ae96 	bls.w	8003884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3724      	adds	r7, #36	@ 0x24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40013800 	.word	0x40013800
 8003b70:	40020000 	.word	0x40020000
 8003b74:	40020400 	.word	0x40020400
 8003b78:	40020800 	.word	0x40020800
 8003b7c:	40020c00 	.word	0x40020c00
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40021400 	.word	0x40021400
 8003b88:	40021800 	.word	0x40021800
 8003b8c:	40013c00 	.word	0x40013c00

08003b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba0:	787b      	ldrb	r3, [r7, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bac:	e003      	b.n	8003bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bae:	887b      	ldrh	r3, [r7, #2]
 8003bb0:	041a      	lsls	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	619a      	str	r2, [r3, #24]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e12b      	b.n	8003e2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fe fc4c 	bl	8002488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2224      	movs	r2, #36	@ 0x24
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c28:	f001 f908 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 8003c2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4a81      	ldr	r2, [pc, #516]	@ (8003e38 <HAL_I2C_Init+0x274>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d807      	bhi.n	8003c48 <HAL_I2C_Init+0x84>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a80      	ldr	r2, [pc, #512]	@ (8003e3c <HAL_I2C_Init+0x278>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	bf94      	ite	ls
 8003c40:	2301      	movls	r3, #1
 8003c42:	2300      	movhi	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e006      	b.n	8003c56 <HAL_I2C_Init+0x92>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e40 <HAL_I2C_Init+0x27c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	bf94      	ite	ls
 8003c50:	2301      	movls	r3, #1
 8003c52:	2300      	movhi	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e0e7      	b.n	8003e2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4a78      	ldr	r2, [pc, #480]	@ (8003e44 <HAL_I2C_Init+0x280>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	0c9b      	lsrs	r3, r3, #18
 8003c68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4a6a      	ldr	r2, [pc, #424]	@ (8003e38 <HAL_I2C_Init+0x274>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d802      	bhi.n	8003c98 <HAL_I2C_Init+0xd4>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	3301      	adds	r3, #1
 8003c96:	e009      	b.n	8003cac <HAL_I2C_Init+0xe8>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	4a69      	ldr	r2, [pc, #420]	@ (8003e48 <HAL_I2C_Init+0x284>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	099b      	lsrs	r3, r3, #6
 8003caa:	3301      	adds	r3, #1
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	495c      	ldr	r1, [pc, #368]	@ (8003e38 <HAL_I2C_Init+0x274>)
 8003cc8:	428b      	cmp	r3, r1
 8003cca:	d819      	bhi.n	8003d00 <HAL_I2C_Init+0x13c>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1e59      	subs	r1, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cda:	1c59      	adds	r1, r3, #1
 8003cdc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ce0:	400b      	ands	r3, r1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_I2C_Init+0x138>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1e59      	subs	r1, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfa:	e051      	b.n	8003da0 <HAL_I2C_Init+0x1dc>
 8003cfc:	2304      	movs	r3, #4
 8003cfe:	e04f      	b.n	8003da0 <HAL_I2C_Init+0x1dc>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d111      	bne.n	8003d2c <HAL_I2C_Init+0x168>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	1e58      	subs	r0, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	440b      	add	r3, r1
 8003d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e012      	b.n	8003d52 <HAL_I2C_Init+0x18e>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1e58      	subs	r0, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	0099      	lsls	r1, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d42:	3301      	adds	r3, #1
 8003d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf0c      	ite	eq
 8003d4c:	2301      	moveq	r3, #1
 8003d4e:	2300      	movne	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_I2C_Init+0x196>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e022      	b.n	8003da0 <HAL_I2C_Init+0x1dc>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10e      	bne.n	8003d80 <HAL_I2C_Init+0x1bc>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1e58      	subs	r0, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6859      	ldr	r1, [r3, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	440b      	add	r3, r1
 8003d70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d74:	3301      	adds	r3, #1
 8003d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d7e:	e00f      	b.n	8003da0 <HAL_I2C_Init+0x1dc>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1e58      	subs	r0, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6859      	ldr	r1, [r3, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	0099      	lsls	r1, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d96:	3301      	adds	r3, #1
 8003d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	6809      	ldr	r1, [r1, #0]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69da      	ldr	r2, [r3, #28]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003dce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6911      	ldr	r1, [r2, #16]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	68d2      	ldr	r2, [r2, #12]
 8003dda:	4311      	orrs	r1, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	000186a0 	.word	0x000186a0
 8003e3c:	001e847f 	.word	0x001e847f
 8003e40:	003d08ff 	.word	0x003d08ff
 8003e44:	431bde83 	.word	0x431bde83
 8003e48:	10624dd3 	.word	0x10624dd3

08003e4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	461a      	mov	r2, r3
 8003e58:	460b      	mov	r3, r1
 8003e5a:	817b      	strh	r3, [r7, #10]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e60:	f7fe ff7e 	bl	8002d60 <HAL_GetTick>
 8003e64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	f040 80e0 	bne.w	8004034 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	2319      	movs	r3, #25
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	4970      	ldr	r1, [pc, #448]	@ (8004040 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 fc64 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e0d3      	b.n	8004036 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_I2C_Master_Transmit+0x50>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e0cc      	b.n	8004036 <HAL_I2C_Master_Transmit+0x1ea>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d007      	beq.n	8003ec2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0201 	orr.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ed0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2221      	movs	r2, #33	@ 0x21
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2210      	movs	r2, #16
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	893a      	ldrh	r2, [r7, #8]
 8003ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4a50      	ldr	r2, [pc, #320]	@ (8004044 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f04:	8979      	ldrh	r1, [r7, #10]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 face 	bl	80044ac <I2C_MasterRequestWrite>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e08d      	b.n	8004036 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f30:	e066      	b.n	8004000 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	6a39      	ldr	r1, [r7, #32]
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 fd22 	bl	8004980 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d107      	bne.n	8003f5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e06b      	b.n	8004036 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	781a      	ldrb	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d11b      	bne.n	8003fd4 <HAL_I2C_Master_Transmit+0x188>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d017      	beq.n	8003fd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	781a      	ldrb	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	6a39      	ldr	r1, [r7, #32]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fd19 	bl	8004a10 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d107      	bne.n	8003ffc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e01a      	b.n	8004036 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	d194      	bne.n	8003f32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	e000      	b.n	8004036 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004034:	2302      	movs	r3, #2
  }
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	00100002 	.word	0x00100002
 8004044:	ffff0000 	.word	0xffff0000

08004048 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08c      	sub	sp, #48	@ 0x30
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	461a      	mov	r2, r3
 8004054:	460b      	mov	r3, r1
 8004056:	817b      	strh	r3, [r7, #10]
 8004058:	4613      	mov	r3, r2
 800405a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800405c:	f7fe fe80 	bl	8002d60 <HAL_GetTick>
 8004060:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b20      	cmp	r3, #32
 800406c:	f040 8217 	bne.w	800449e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2319      	movs	r3, #25
 8004076:	2201      	movs	r2, #1
 8004078:	497c      	ldr	r1, [pc, #496]	@ (800426c <HAL_I2C_Master_Receive+0x224>)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fb66 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004086:	2302      	movs	r3, #2
 8004088:	e20a      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_I2C_Master_Receive+0x50>
 8004094:	2302      	movs	r3, #2
 8004096:	e203      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d007      	beq.n	80040be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2222      	movs	r2, #34	@ 0x22
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2210      	movs	r2, #16
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	893a      	ldrh	r2, [r7, #8]
 80040ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4a5c      	ldr	r2, [pc, #368]	@ (8004270 <HAL_I2C_Master_Receive+0x228>)
 80040fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004100:	8979      	ldrh	r1, [r7, #10]
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fa52 	bl	80045b0 <I2C_MasterRequestRead>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e1c4      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	d113      	bne.n	8004146 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411e:	2300      	movs	r3, #0
 8004120:	623b      	str	r3, [r7, #32]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	623b      	str	r3, [r7, #32]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	623b      	str	r3, [r7, #32]
 8004132:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e198      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414a:	2b01      	cmp	r3, #1
 800414c:	d11b      	bne.n	8004186 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800415c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	61fb      	str	r3, [r7, #28]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	61fb      	str	r3, [r7, #28]
 8004172:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e178      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418a:	2b02      	cmp	r3, #2
 800418c:	d11b      	bne.n	80041c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ae:	2300      	movs	r3, #0
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	61bb      	str	r3, [r7, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	e158      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041ec:	e144      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	f200 80f1 	bhi.w	80043da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d123      	bne.n	8004248 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004202:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fc4b 	bl	8004aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e145      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004246:	e117      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424c:	2b02      	cmp	r3, #2
 800424e:	d14e      	bne.n	80042ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	2200      	movs	r2, #0
 8004258:	4906      	ldr	r1, [pc, #24]	@ (8004274 <HAL_I2C_Master_Receive+0x22c>)
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fa76 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e11a      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
 800426a:	bf00      	nop
 800426c:	00100002 	.word	0x00100002
 8004270:	ffff0000 	.word	0xffff0000
 8004274:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042ec:	e0c4      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f4:	2200      	movs	r2, #0
 80042f6:	496c      	ldr	r1, [pc, #432]	@ (80044a8 <HAL_I2C_Master_Receive+0x460>)
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 fa27 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0cb      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004316:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004350:	2200      	movs	r2, #0
 8004352:	4955      	ldr	r1, [pc, #340]	@ (80044a8 <HAL_I2C_Master_Receive+0x460>)
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f9f9 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e09d      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043d8:	e04e      	b.n	8004478 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fb5e 	bl	8004aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e058      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b04      	cmp	r3, #4
 800442c:	d124      	bne.n	8004478 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004432:	2b03      	cmp	r3, #3
 8004434:	d107      	bne.n	8004446 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004444:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447c:	2b00      	cmp	r3, #0
 800447e:	f47f aeb6 	bne.w	80041ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800449e:	2302      	movs	r3, #2
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3728      	adds	r7, #40	@ 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	00010004 	.word	0x00010004

080044ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	460b      	mov	r3, r1
 80044ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d006      	beq.n	80044d6 <I2C_MasterRequestWrite+0x2a>
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d003      	beq.n	80044d6 <I2C_MasterRequestWrite+0x2a>
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044d4:	d108      	bne.n	80044e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e00b      	b.n	8004500 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	2b12      	cmp	r3, #18
 80044ee:	d107      	bne.n	8004500 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f91d 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004526:	d103      	bne.n	8004530 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800452e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e035      	b.n	80045a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800453c:	d108      	bne.n	8004550 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800453e:	897b      	ldrh	r3, [r7, #10]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800454c:	611a      	str	r2, [r3, #16]
 800454e:	e01b      	b.n	8004588 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004550:	897b      	ldrh	r3, [r7, #10]
 8004552:	11db      	asrs	r3, r3, #7
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f003 0306 	and.w	r3, r3, #6
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f063 030f 	orn	r3, r3, #15
 8004560:	b2da      	uxtb	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	490e      	ldr	r1, [pc, #56]	@ (80045a8 <I2C_MasterRequestWrite+0xfc>)
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f966 	bl	8004840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e010      	b.n	80045a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800457e:	897b      	ldrh	r3, [r7, #10]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	4907      	ldr	r1, [pc, #28]	@ (80045ac <I2C_MasterRequestWrite+0x100>)
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f956 	bl	8004840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	00010008 	.word	0x00010008
 80045ac:	00010002 	.word	0x00010002

080045b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	460b      	mov	r3, r1
 80045be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d006      	beq.n	80045ea <I2C_MasterRequestRead+0x3a>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d003      	beq.n	80045ea <I2C_MasterRequestRead+0x3a>
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045e8:	d108      	bne.n	80045fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e00b      	b.n	8004614 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004600:	2b11      	cmp	r3, #17
 8004602:	d107      	bne.n	8004614 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004612:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f893 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00d      	beq.n	8004648 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800463a:	d103      	bne.n	8004644 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004642:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e079      	b.n	800473c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004650:	d108      	bne.n	8004664 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004652:	897b      	ldrh	r3, [r7, #10]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	b2da      	uxtb	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	611a      	str	r2, [r3, #16]
 8004662:	e05f      	b.n	8004724 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004664:	897b      	ldrh	r3, [r7, #10]
 8004666:	11db      	asrs	r3, r3, #7
 8004668:	b2db      	uxtb	r3, r3
 800466a:	f003 0306 	and.w	r3, r3, #6
 800466e:	b2db      	uxtb	r3, r3
 8004670:	f063 030f 	orn	r3, r3, #15
 8004674:	b2da      	uxtb	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4930      	ldr	r1, [pc, #192]	@ (8004744 <I2C_MasterRequestRead+0x194>)
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f8dc 	bl	8004840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e054      	b.n	800473c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004692:	897b      	ldrh	r3, [r7, #10]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	4929      	ldr	r1, [pc, #164]	@ (8004748 <I2C_MasterRequestRead+0x198>)
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 f8cc 	bl	8004840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e044      	b.n	800473c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b2:	2300      	movs	r3, #0
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f831 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00d      	beq.n	800470c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046fe:	d103      	bne.n	8004708 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004706:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e017      	b.n	800473c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800470c:	897b      	ldrh	r3, [r7, #10]
 800470e:	11db      	asrs	r3, r3, #7
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f003 0306 	and.w	r3, r3, #6
 8004716:	b2db      	uxtb	r3, r3
 8004718:	f063 030e 	orn	r3, r3, #14
 800471c:	b2da      	uxtb	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4907      	ldr	r1, [pc, #28]	@ (8004748 <I2C_MasterRequestRead+0x198>)
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f888 	bl	8004840 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	00010008 	.word	0x00010008
 8004748:	00010002 	.word	0x00010002

0800474c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	4613      	mov	r3, r2
 800475a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800475c:	e048      	b.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d044      	beq.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004766:	f7fe fafb 	bl	8002d60 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d302      	bcc.n	800477c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d139      	bne.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	0c1b      	lsrs	r3, r3, #16
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b01      	cmp	r3, #1
 8004784:	d10d      	bne.n	80047a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	43da      	mvns	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	e00c      	b.n	80047bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	43da      	mvns	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4013      	ands	r3, r2
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d116      	bne.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e023      	b.n	8004838 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	0c1b      	lsrs	r3, r3, #16
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d10d      	bne.n	8004816 <I2C_WaitOnFlagUntilTimeout+0xca>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	43da      	mvns	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4013      	ands	r3, r2
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	e00c      	b.n	8004830 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	43da      	mvns	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	429a      	cmp	r2, r3
 8004834:	d093      	beq.n	800475e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800484e:	e071      	b.n	8004934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800485e:	d123      	bne.n	80048a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800486e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004878:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004894:	f043 0204 	orr.w	r2, r3, #4
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e067      	b.n	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ae:	d041      	beq.n	8004934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b0:	f7fe fa56 	bl	8002d60 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d302      	bcc.n	80048c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d136      	bne.n	8004934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10c      	bne.n	80048ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	43da      	mvns	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4013      	ands	r3, r2
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bf14      	ite	ne
 80048e2:	2301      	movne	r3, #1
 80048e4:	2300      	moveq	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	e00b      	b.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	43da      	mvns	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4013      	ands	r3, r2
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d016      	beq.n	8004934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e021      	b.n	8004978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	0c1b      	lsrs	r3, r3, #16
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b01      	cmp	r3, #1
 800493c:	d10c      	bne.n	8004958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	43da      	mvns	r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	4013      	ands	r3, r2
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	bf14      	ite	ne
 8004950:	2301      	movne	r3, #1
 8004952:	2300      	moveq	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	e00b      	b.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	43da      	mvns	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4013      	ands	r3, r2
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf14      	ite	ne
 800496a:	2301      	movne	r3, #1
 800496c:	2300      	moveq	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	f47f af6d 	bne.w	8004850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800498c:	e034      	b.n	80049f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f8e3 	bl	8004b5a <I2C_IsAcknowledgeFailed>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e034      	b.n	8004a08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d028      	beq.n	80049f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a6:	f7fe f9db 	bl	8002d60 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d302      	bcc.n	80049bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d11d      	bne.n	80049f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c6:	2b80      	cmp	r3, #128	@ 0x80
 80049c8:	d016      	beq.n	80049f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	f043 0220 	orr.w	r2, r3, #32
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e007      	b.n	8004a08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a02:	2b80      	cmp	r3, #128	@ 0x80
 8004a04:	d1c3      	bne.n	800498e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a1c:	e034      	b.n	8004a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f89b 	bl	8004b5a <I2C_IsAcknowledgeFailed>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e034      	b.n	8004a98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a34:	d028      	beq.n	8004a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fe f993 	bl	8002d60 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d11d      	bne.n	8004a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d016      	beq.n	8004a88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	f043 0220 	orr.w	r2, r3, #32
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e007      	b.n	8004a98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d1c3      	bne.n	8004a1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004aac:	e049      	b.n	8004b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d119      	bne.n	8004af0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0210 	mvn.w	r2, #16
 8004ac4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e030      	b.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af0:	f7fe f936 	bl	8002d60 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d302      	bcc.n	8004b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d11d      	bne.n	8004b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b10:	2b40      	cmp	r3, #64	@ 0x40
 8004b12:	d016      	beq.n	8004b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e007      	b.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4c:	2b40      	cmp	r3, #64	@ 0x40
 8004b4e:	d1ae      	bne.n	8004aae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b70:	d11b      	bne.n	8004baa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	f043 0204 	orr.w	r2, r3, #4
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	4b20      	ldr	r3, [pc, #128]	@ (8004c48 <HAL_PWREx_EnableOverDrive+0x90>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bca:	4a1f      	ldr	r2, [pc, #124]	@ (8004c48 <HAL_PWREx_EnableOverDrive+0x90>)
 8004bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c48 <HAL_PWREx_EnableOverDrive+0x90>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bde:	4b1b      	ldr	r3, [pc, #108]	@ (8004c4c <HAL_PWREx_EnableOverDrive+0x94>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004be4:	f7fe f8bc 	bl	8002d60 <HAL_GetTick>
 8004be8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bea:	e009      	b.n	8004c00 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bec:	f7fe f8b8 	bl	8002d60 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bfa:	d901      	bls.n	8004c00 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e01f      	b.n	8004c40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c00:	4b13      	ldr	r3, [pc, #76]	@ (8004c50 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c0c:	d1ee      	bne.n	8004bec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c0e:	4b11      	ldr	r3, [pc, #68]	@ (8004c54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c14:	f7fe f8a4 	bl	8002d60 <HAL_GetTick>
 8004c18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c1a:	e009      	b.n	8004c30 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c1c:	f7fe f8a0 	bl	8002d60 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c2a:	d901      	bls.n	8004c30 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e007      	b.n	8004c40 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c30:	4b07      	ldr	r3, [pc, #28]	@ (8004c50 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c3c:	d1ee      	bne.n	8004c1c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	420e0040 	.word	0x420e0040
 8004c50:	40007000 	.word	0x40007000
 8004c54:	420e0044 	.word	0x420e0044

08004c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0cc      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c6c:	4b68      	ldr	r3, [pc, #416]	@ (8004e10 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d90c      	bls.n	8004c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7a:	4b65      	ldr	r3, [pc, #404]	@ (8004e10 <HAL_RCC_ClockConfig+0x1b8>)
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c82:	4b63      	ldr	r3, [pc, #396]	@ (8004e10 <HAL_RCC_ClockConfig+0x1b8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0b8      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d020      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cac:	4b59      	ldr	r3, [pc, #356]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4a58      	ldr	r2, [pc, #352]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cc4:	4b53      	ldr	r3, [pc, #332]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	4a52      	ldr	r2, [pc, #328]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd0:	4b50      	ldr	r3, [pc, #320]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	494d      	ldr	r1, [pc, #308]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d044      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d107      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	4b47      	ldr	r3, [pc, #284]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d119      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e07f      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d003      	beq.n	8004d16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d16:	4b3f      	ldr	r3, [pc, #252]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d109      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e06f      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d26:	4b3b      	ldr	r3, [pc, #236]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e067      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d36:	4b37      	ldr	r3, [pc, #220]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f023 0203 	bic.w	r2, r3, #3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4934      	ldr	r1, [pc, #208]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d48:	f7fe f80a 	bl	8002d60 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4e:	e00a      	b.n	8004d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d50:	f7fe f806 	bl	8002d60 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e04f      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	4b2b      	ldr	r3, [pc, #172]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 020c 	and.w	r2, r3, #12
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d1eb      	bne.n	8004d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d78:	4b25      	ldr	r3, [pc, #148]	@ (8004e10 <HAL_RCC_ClockConfig+0x1b8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d20c      	bcs.n	8004da0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d86:	4b22      	ldr	r3, [pc, #136]	@ (8004e10 <HAL_RCC_ClockConfig+0x1b8>)
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d8e:	4b20      	ldr	r3, [pc, #128]	@ (8004e10 <HAL_RCC_ClockConfig+0x1b8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d001      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e032      	b.n	8004e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dac:	4b19      	ldr	r3, [pc, #100]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4916      	ldr	r1, [pc, #88]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dca:	4b12      	ldr	r3, [pc, #72]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	490e      	ldr	r1, [pc, #56]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dde:	f000 f855 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8004de2:	4602      	mov	r2, r0
 8004de4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	490a      	ldr	r1, [pc, #40]	@ (8004e18 <HAL_RCC_ClockConfig+0x1c0>)
 8004df0:	5ccb      	ldrb	r3, [r1, r3]
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	4a09      	ldr	r2, [pc, #36]	@ (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004dfa:	4b09      	ldr	r3, [pc, #36]	@ (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fd ff6a 	bl	8002cd8 <HAL_InitTick>

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40023c00 	.word	0x40023c00
 8004e14:	40023800 	.word	0x40023800
 8004e18:	0800b48c 	.word	0x0800b48c
 8004e1c:	20000014 	.word	0x20000014
 8004e20:	20000018 	.word	0x20000018

08004e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e28:	4b03      	ldr	r3, [pc, #12]	@ (8004e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	20000014 	.word	0x20000014

08004e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e40:	f7ff fff0 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004e44:	4602      	mov	r2, r0
 8004e46:	4b05      	ldr	r3, [pc, #20]	@ (8004e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	0a9b      	lsrs	r3, r3, #10
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	4903      	ldr	r1, [pc, #12]	@ (8004e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e52:	5ccb      	ldrb	r3, [r1, r3]
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	0800b49c 	.word	0x0800b49c

08004e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e68:	f7ff ffdc 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	0b5b      	lsrs	r3, r3, #13
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	4903      	ldr	r1, [pc, #12]	@ (8004e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e7a:	5ccb      	ldrb	r3, [r1, r3]
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40023800 	.word	0x40023800
 8004e88:	0800b49c 	.word	0x0800b49c

08004e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b0ae      	sub	sp, #184	@ 0xb8
 8004e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb2:	4bcb      	ldr	r3, [pc, #812]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b0c      	cmp	r3, #12
 8004ebc:	f200 8206 	bhi.w	80052cc <HAL_RCC_GetSysClockFreq+0x440>
 8004ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec6:	bf00      	nop
 8004ec8:	08004efd 	.word	0x08004efd
 8004ecc:	080052cd 	.word	0x080052cd
 8004ed0:	080052cd 	.word	0x080052cd
 8004ed4:	080052cd 	.word	0x080052cd
 8004ed8:	08004f05 	.word	0x08004f05
 8004edc:	080052cd 	.word	0x080052cd
 8004ee0:	080052cd 	.word	0x080052cd
 8004ee4:	080052cd 	.word	0x080052cd
 8004ee8:	08004f0d 	.word	0x08004f0d
 8004eec:	080052cd 	.word	0x080052cd
 8004ef0:	080052cd 	.word	0x080052cd
 8004ef4:	080052cd 	.word	0x080052cd
 8004ef8:	080050fd 	.word	0x080050fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004efc:	4bb9      	ldr	r3, [pc, #740]	@ (80051e4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004efe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f02:	e1e7      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f04:	4bb8      	ldr	r3, [pc, #736]	@ (80051e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004f06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004f0a:	e1e3      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f0c:	4bb4      	ldr	r3, [pc, #720]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f18:	4bb1      	ldr	r3, [pc, #708]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d071      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f24:	4bae      	ldr	r3, [pc, #696]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	099b      	lsrs	r3, r3, #6
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f30:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	462b      	mov	r3, r5
 8004f4e:	f04f 0000 	mov.w	r0, #0
 8004f52:	f04f 0100 	mov.w	r1, #0
 8004f56:	0159      	lsls	r1, r3, #5
 8004f58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f5c:	0150      	lsls	r0, r2, #5
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4621      	mov	r1, r4
 8004f64:	1a51      	subs	r1, r2, r1
 8004f66:	6439      	str	r1, [r7, #64]	@ 0x40
 8004f68:	4629      	mov	r1, r5
 8004f6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	018b      	lsls	r3, r1, #6
 8004f80:	4641      	mov	r1, r8
 8004f82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f86:	4641      	mov	r1, r8
 8004f88:	018a      	lsls	r2, r1, #6
 8004f8a:	4641      	mov	r1, r8
 8004f8c:	1a51      	subs	r1, r2, r1
 8004f8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f90:	4649      	mov	r1, r9
 8004f92:	eb63 0301 	sbc.w	r3, r3, r1
 8004f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	00cb      	lsls	r3, r1, #3
 8004fa8:	4641      	mov	r1, r8
 8004faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fae:	4641      	mov	r1, r8
 8004fb0:	00ca      	lsls	r2, r1, #3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4622      	mov	r2, r4
 8004fba:	189b      	adds	r3, r3, r2
 8004fbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fbe:	462b      	mov	r3, r5
 8004fc0:	460a      	mov	r2, r1
 8004fc2:	eb42 0303 	adc.w	r3, r2, r3
 8004fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	024b      	lsls	r3, r1, #9
 8004fd8:	4621      	mov	r1, r4
 8004fda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fde:	4621      	mov	r1, r4
 8004fe0:	024a      	lsls	r2, r1, #9
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ff0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ff4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004ff8:	f7fb fe66 	bl	8000cc8 <__aeabi_uldivmod>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4613      	mov	r3, r2
 8005002:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005006:	e067      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005008:	4b75      	ldr	r3, [pc, #468]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	099b      	lsrs	r3, r3, #6
 800500e:	2200      	movs	r2, #0
 8005010:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005014:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005018:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800501c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005020:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005022:	2300      	movs	r3, #0
 8005024:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005026:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800502a:	4622      	mov	r2, r4
 800502c:	462b      	mov	r3, r5
 800502e:	f04f 0000 	mov.w	r0, #0
 8005032:	f04f 0100 	mov.w	r1, #0
 8005036:	0159      	lsls	r1, r3, #5
 8005038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800503c:	0150      	lsls	r0, r2, #5
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4621      	mov	r1, r4
 8005044:	1a51      	subs	r1, r2, r1
 8005046:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005048:	4629      	mov	r1, r5
 800504a:	eb63 0301 	sbc.w	r3, r3, r1
 800504e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800505c:	4649      	mov	r1, r9
 800505e:	018b      	lsls	r3, r1, #6
 8005060:	4641      	mov	r1, r8
 8005062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005066:	4641      	mov	r1, r8
 8005068:	018a      	lsls	r2, r1, #6
 800506a:	4641      	mov	r1, r8
 800506c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005070:	4649      	mov	r1, r9
 8005072:	eb63 0b01 	sbc.w	fp, r3, r1
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005082:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005086:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800508a:	4692      	mov	sl, r2
 800508c:	469b      	mov	fp, r3
 800508e:	4623      	mov	r3, r4
 8005090:	eb1a 0303 	adds.w	r3, sl, r3
 8005094:	623b      	str	r3, [r7, #32]
 8005096:	462b      	mov	r3, r5
 8005098:	eb4b 0303 	adc.w	r3, fp, r3
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80050aa:	4629      	mov	r1, r5
 80050ac:	028b      	lsls	r3, r1, #10
 80050ae:	4621      	mov	r1, r4
 80050b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050b4:	4621      	mov	r1, r4
 80050b6:	028a      	lsls	r2, r1, #10
 80050b8:	4610      	mov	r0, r2
 80050ba:	4619      	mov	r1, r3
 80050bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050c0:	2200      	movs	r2, #0
 80050c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80050c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80050c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80050ca:	f7fb fdfd 	bl	8000cc8 <__aeabi_uldivmod>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4613      	mov	r3, r2
 80050d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050d8:	4b41      	ldr	r3, [pc, #260]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	0c1b      	lsrs	r3, r3, #16
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	3301      	adds	r3, #1
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80050ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80050fa:	e0eb      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050fc:	4b38      	ldr	r3, [pc, #224]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005108:	4b35      	ldr	r3, [pc, #212]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d06b      	beq.n	80051ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005114:	4b32      	ldr	r3, [pc, #200]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	099b      	lsrs	r3, r3, #6
 800511a:	2200      	movs	r2, #0
 800511c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800511e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005120:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005126:	663b      	str	r3, [r7, #96]	@ 0x60
 8005128:	2300      	movs	r3, #0
 800512a:	667b      	str	r3, [r7, #100]	@ 0x64
 800512c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005130:	4622      	mov	r2, r4
 8005132:	462b      	mov	r3, r5
 8005134:	f04f 0000 	mov.w	r0, #0
 8005138:	f04f 0100 	mov.w	r1, #0
 800513c:	0159      	lsls	r1, r3, #5
 800513e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005142:	0150      	lsls	r0, r2, #5
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4621      	mov	r1, r4
 800514a:	1a51      	subs	r1, r2, r1
 800514c:	61b9      	str	r1, [r7, #24]
 800514e:	4629      	mov	r1, r5
 8005150:	eb63 0301 	sbc.w	r3, r3, r1
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005162:	4659      	mov	r1, fp
 8005164:	018b      	lsls	r3, r1, #6
 8005166:	4651      	mov	r1, sl
 8005168:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800516c:	4651      	mov	r1, sl
 800516e:	018a      	lsls	r2, r1, #6
 8005170:	4651      	mov	r1, sl
 8005172:	ebb2 0801 	subs.w	r8, r2, r1
 8005176:	4659      	mov	r1, fp
 8005178:	eb63 0901 	sbc.w	r9, r3, r1
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005188:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800518c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005190:	4690      	mov	r8, r2
 8005192:	4699      	mov	r9, r3
 8005194:	4623      	mov	r3, r4
 8005196:	eb18 0303 	adds.w	r3, r8, r3
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	462b      	mov	r3, r5
 800519e:	eb49 0303 	adc.w	r3, r9, r3
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80051b0:	4629      	mov	r1, r5
 80051b2:	024b      	lsls	r3, r1, #9
 80051b4:	4621      	mov	r1, r4
 80051b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051ba:	4621      	mov	r1, r4
 80051bc:	024a      	lsls	r2, r1, #9
 80051be:	4610      	mov	r0, r2
 80051c0:	4619      	mov	r1, r3
 80051c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051c6:	2200      	movs	r2, #0
 80051c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051ca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80051cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051d0:	f7fb fd7a 	bl	8000cc8 <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4613      	mov	r3, r2
 80051da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051de:	e065      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x420>
 80051e0:	40023800 	.word	0x40023800
 80051e4:	00f42400 	.word	0x00f42400
 80051e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ec:	4b3d      	ldr	r3, [pc, #244]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	099b      	lsrs	r3, r3, #6
 80051f2:	2200      	movs	r2, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	4611      	mov	r1, r2
 80051f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80051fe:	2300      	movs	r3, #0
 8005200:	657b      	str	r3, [r7, #84]	@ 0x54
 8005202:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005206:	4642      	mov	r2, r8
 8005208:	464b      	mov	r3, r9
 800520a:	f04f 0000 	mov.w	r0, #0
 800520e:	f04f 0100 	mov.w	r1, #0
 8005212:	0159      	lsls	r1, r3, #5
 8005214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005218:	0150      	lsls	r0, r2, #5
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4641      	mov	r1, r8
 8005220:	1a51      	subs	r1, r2, r1
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	4649      	mov	r1, r9
 8005226:	eb63 0301 	sbc.w	r3, r3, r1
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005238:	4659      	mov	r1, fp
 800523a:	018b      	lsls	r3, r1, #6
 800523c:	4651      	mov	r1, sl
 800523e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005242:	4651      	mov	r1, sl
 8005244:	018a      	lsls	r2, r1, #6
 8005246:	4651      	mov	r1, sl
 8005248:	1a54      	subs	r4, r2, r1
 800524a:	4659      	mov	r1, fp
 800524c:	eb63 0501 	sbc.w	r5, r3, r1
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	00eb      	lsls	r3, r5, #3
 800525a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800525e:	00e2      	lsls	r2, r4, #3
 8005260:	4614      	mov	r4, r2
 8005262:	461d      	mov	r5, r3
 8005264:	4643      	mov	r3, r8
 8005266:	18e3      	adds	r3, r4, r3
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	464b      	mov	r3, r9
 800526c:	eb45 0303 	adc.w	r3, r5, r3
 8005270:	607b      	str	r3, [r7, #4]
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800527e:	4629      	mov	r1, r5
 8005280:	028b      	lsls	r3, r1, #10
 8005282:	4621      	mov	r1, r4
 8005284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005288:	4621      	mov	r1, r4
 800528a:	028a      	lsls	r2, r1, #10
 800528c:	4610      	mov	r0, r2
 800528e:	4619      	mov	r1, r3
 8005290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005294:	2200      	movs	r2, #0
 8005296:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005298:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800529a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800529e:	f7fb fd13 	bl	8000cc8 <__aeabi_uldivmod>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4613      	mov	r3, r2
 80052a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80052ac:	4b0d      	ldr	r3, [pc, #52]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	0f1b      	lsrs	r3, r3, #28
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80052ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80052c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80052ca:	e003      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052cc:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80052ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80052d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	37b8      	adds	r7, #184	@ 0xb8
 80052dc:	46bd      	mov	sp, r7
 80052de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800
 80052e8:	00f42400 	.word	0x00f42400

080052ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e28d      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8083 	beq.w	8005412 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800530c:	4b94      	ldr	r3, [pc, #592]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f003 030c 	and.w	r3, r3, #12
 8005314:	2b04      	cmp	r3, #4
 8005316:	d019      	beq.n	800534c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005318:	4b91      	ldr	r3, [pc, #580]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005320:	2b08      	cmp	r3, #8
 8005322:	d106      	bne.n	8005332 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005324:	4b8e      	ldr	r3, [pc, #568]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800532c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005330:	d00c      	beq.n	800534c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005332:	4b8b      	ldr	r3, [pc, #556]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800533a:	2b0c      	cmp	r3, #12
 800533c:	d112      	bne.n	8005364 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800533e:	4b88      	ldr	r3, [pc, #544]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005346:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800534a:	d10b      	bne.n	8005364 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800534c:	4b84      	ldr	r3, [pc, #528]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d05b      	beq.n	8005410 <HAL_RCC_OscConfig+0x124>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d157      	bne.n	8005410 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e25a      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800536c:	d106      	bne.n	800537c <HAL_RCC_OscConfig+0x90>
 800536e:	4b7c      	ldr	r3, [pc, #496]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a7b      	ldr	r2, [pc, #492]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	e01d      	b.n	80053b8 <HAL_RCC_OscConfig+0xcc>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005384:	d10c      	bne.n	80053a0 <HAL_RCC_OscConfig+0xb4>
 8005386:	4b76      	ldr	r3, [pc, #472]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a75      	ldr	r2, [pc, #468]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 800538c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	4b73      	ldr	r3, [pc, #460]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a72      	ldr	r2, [pc, #456]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e00b      	b.n	80053b8 <HAL_RCC_OscConfig+0xcc>
 80053a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a6e      	ldr	r2, [pc, #440]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 80053a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	4b6c      	ldr	r3, [pc, #432]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 80053b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d013      	beq.n	80053e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c0:	f7fd fcce 	bl	8002d60 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053c8:	f7fd fcca 	bl	8002d60 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b64      	cmp	r3, #100	@ 0x64
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e21f      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053da:	4b61      	ldr	r3, [pc, #388]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0xdc>
 80053e6:	e014      	b.n	8005412 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e8:	f7fd fcba 	bl	8002d60 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053f0:	f7fd fcb6 	bl	8002d60 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b64      	cmp	r3, #100	@ 0x64
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e20b      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005402:	4b57      	ldr	r3, [pc, #348]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x104>
 800540e:	e000      	b.n	8005412 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d06f      	beq.n	80054fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800541e:	4b50      	ldr	r3, [pc, #320]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 030c 	and.w	r3, r3, #12
 8005426:	2b00      	cmp	r3, #0
 8005428:	d017      	beq.n	800545a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800542a:	4b4d      	ldr	r3, [pc, #308]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005432:	2b08      	cmp	r3, #8
 8005434:	d105      	bne.n	8005442 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005436:	4b4a      	ldr	r3, [pc, #296]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005442:	4b47      	ldr	r3, [pc, #284]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800544a:	2b0c      	cmp	r3, #12
 800544c:	d11c      	bne.n	8005488 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800544e:	4b44      	ldr	r3, [pc, #272]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d116      	bne.n	8005488 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545a:	4b41      	ldr	r3, [pc, #260]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_RCC_OscConfig+0x186>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d001      	beq.n	8005472 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e1d3      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005472:	4b3b      	ldr	r3, [pc, #236]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4937      	ldr	r1, [pc, #220]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005482:	4313      	orrs	r3, r2
 8005484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005486:	e03a      	b.n	80054fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005490:	4b34      	ldr	r3, [pc, #208]	@ (8005564 <HAL_RCC_OscConfig+0x278>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005496:	f7fd fc63 	bl	8002d60 <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800549e:	f7fd fc5f 	bl	8002d60 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e1b4      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0f0      	beq.n	800549e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054bc:	4b28      	ldr	r3, [pc, #160]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	4925      	ldr	r1, [pc, #148]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	600b      	str	r3, [r1, #0]
 80054d0:	e015      	b.n	80054fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054d2:	4b24      	ldr	r3, [pc, #144]	@ (8005564 <HAL_RCC_OscConfig+0x278>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d8:	f7fd fc42 	bl	8002d60 <HAL_GetTick>
 80054dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054de:	e008      	b.n	80054f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054e0:	f7fd fc3e 	bl	8002d60 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e193      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1f0      	bne.n	80054e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d036      	beq.n	8005578 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005512:	4b15      	ldr	r3, [pc, #84]	@ (8005568 <HAL_RCC_OscConfig+0x27c>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fd fc22 	bl	8002d60 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005520:	f7fd fc1e 	bl	8002d60 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e173      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005532:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <HAL_RCC_OscConfig+0x274>)
 8005534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0x234>
 800553e:	e01b      	b.n	8005578 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005540:	4b09      	ldr	r3, [pc, #36]	@ (8005568 <HAL_RCC_OscConfig+0x27c>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005546:	f7fd fc0b 	bl	8002d60 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800554c:	e00e      	b.n	800556c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800554e:	f7fd fc07 	bl	8002d60 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d907      	bls.n	800556c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e15c      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
 8005560:	40023800 	.word	0x40023800
 8005564:	42470000 	.word	0x42470000
 8005568:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800556c:	4b8a      	ldr	r3, [pc, #552]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 800556e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1ea      	bne.n	800554e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8097 	beq.w	80056b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005586:	2300      	movs	r3, #0
 8005588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800558a:	4b83      	ldr	r3, [pc, #524]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10f      	bne.n	80055b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	4b7f      	ldr	r3, [pc, #508]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	4a7e      	ldr	r2, [pc, #504]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 80055a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80055a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b2:	2301      	movs	r3, #1
 80055b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b6:	4b79      	ldr	r3, [pc, #484]	@ (800579c <HAL_RCC_OscConfig+0x4b0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d118      	bne.n	80055f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055c2:	4b76      	ldr	r3, [pc, #472]	@ (800579c <HAL_RCC_OscConfig+0x4b0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a75      	ldr	r2, [pc, #468]	@ (800579c <HAL_RCC_OscConfig+0x4b0>)
 80055c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ce:	f7fd fbc7 	bl	8002d60 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d6:	f7fd fbc3 	bl	8002d60 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e118      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e8:	4b6c      	ldr	r3, [pc, #432]	@ (800579c <HAL_RCC_OscConfig+0x4b0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0f0      	beq.n	80055d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d106      	bne.n	800560a <HAL_RCC_OscConfig+0x31e>
 80055fc:	4b66      	ldr	r3, [pc, #408]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 80055fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005600:	4a65      	ldr	r2, [pc, #404]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	6713      	str	r3, [r2, #112]	@ 0x70
 8005608:	e01c      	b.n	8005644 <HAL_RCC_OscConfig+0x358>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2b05      	cmp	r3, #5
 8005610:	d10c      	bne.n	800562c <HAL_RCC_OscConfig+0x340>
 8005612:	4b61      	ldr	r3, [pc, #388]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 8005614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005616:	4a60      	ldr	r2, [pc, #384]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 8005618:	f043 0304 	orr.w	r3, r3, #4
 800561c:	6713      	str	r3, [r2, #112]	@ 0x70
 800561e:	4b5e      	ldr	r3, [pc, #376]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 8005620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005622:	4a5d      	ldr	r2, [pc, #372]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	6713      	str	r3, [r2, #112]	@ 0x70
 800562a:	e00b      	b.n	8005644 <HAL_RCC_OscConfig+0x358>
 800562c:	4b5a      	ldr	r3, [pc, #360]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005630:	4a59      	ldr	r2, [pc, #356]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	6713      	str	r3, [r2, #112]	@ 0x70
 8005638:	4b57      	ldr	r3, [pc, #348]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 800563a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563c:	4a56      	ldr	r2, [pc, #344]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 800563e:	f023 0304 	bic.w	r3, r3, #4
 8005642:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d015      	beq.n	8005678 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564c:	f7fd fb88 	bl	8002d60 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005652:	e00a      	b.n	800566a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005654:	f7fd fb84 	bl	8002d60 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e0d7      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566a:	4b4b      	ldr	r3, [pc, #300]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0ee      	beq.n	8005654 <HAL_RCC_OscConfig+0x368>
 8005676:	e014      	b.n	80056a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005678:	f7fd fb72 	bl	8002d60 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800567e:	e00a      	b.n	8005696 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005680:	f7fd fb6e 	bl	8002d60 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800568e:	4293      	cmp	r3, r2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e0c1      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005696:	4b40      	ldr	r3, [pc, #256]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1ee      	bne.n	8005680 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d105      	bne.n	80056b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 80056aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 80056ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 80ad 	beq.w	8005818 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056be:	4b36      	ldr	r3, [pc, #216]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	2b08      	cmp	r3, #8
 80056c8:	d060      	beq.n	800578c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d145      	bne.n	800575e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d2:	4b33      	ldr	r3, [pc, #204]	@ (80057a0 <HAL_RCC_OscConfig+0x4b4>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fd fb42 	bl	8002d60 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e0:	f7fd fb3e 	bl	8002d60 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e093      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	4b29      	ldr	r3, [pc, #164]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69da      	ldr	r2, [r3, #28]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	019b      	lsls	r3, r3, #6
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	3b01      	subs	r3, #1
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005720:	061b      	lsls	r3, r3, #24
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005728:	071b      	lsls	r3, r3, #28
 800572a:	491b      	ldr	r1, [pc, #108]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 800572c:	4313      	orrs	r3, r2
 800572e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005730:	4b1b      	ldr	r3, [pc, #108]	@ (80057a0 <HAL_RCC_OscConfig+0x4b4>)
 8005732:	2201      	movs	r2, #1
 8005734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005736:	f7fd fb13 	bl	8002d60 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800573e:	f7fd fb0f 	bl	8002d60 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e064      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005750:	4b11      	ldr	r3, [pc, #68]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_OscConfig+0x452>
 800575c:	e05c      	b.n	8005818 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800575e:	4b10      	ldr	r3, [pc, #64]	@ (80057a0 <HAL_RCC_OscConfig+0x4b4>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fd fafc 	bl	8002d60 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800576c:	f7fd faf8 	bl	8002d60 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e04d      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577e:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <HAL_RCC_OscConfig+0x4ac>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0x480>
 800578a:	e045      	b.n	8005818 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d107      	bne.n	80057a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e040      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
 8005798:	40023800 	.word	0x40023800
 800579c:	40007000 	.word	0x40007000
 80057a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005824 <HAL_RCC_OscConfig+0x538>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d030      	beq.n	8005814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d129      	bne.n	8005814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d122      	bne.n	8005814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80057d4:	4013      	ands	r3, r2
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057dc:	4293      	cmp	r3, r2
 80057de:	d119      	bne.n	8005814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	3b01      	subs	r3, #1
 80057ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d10f      	bne.n	8005814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005800:	429a      	cmp	r2, r3
 8005802:	d107      	bne.n	8005814 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005810:	429a      	cmp	r2, r3
 8005812:	d001      	beq.n	8005818 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40023800 	.word	0x40023800

08005828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e041      	b.n	80058be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fc ffa8 	bl	80027a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f000 f9e4 	bl	8005c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e041      	b.n	800595c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7fc ff37 	bl	8002760 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3304      	adds	r3, #4
 8005902:	4619      	mov	r1, r3
 8005904:	4610      	mov	r0, r2
 8005906:	f000 f995 	bl	8005c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e097      	b.n	8005aa8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7fc fdc3 	bl	8002518 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2202      	movs	r2, #2
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059a8:	f023 0307 	bic.w	r3, r3, #7
 80059ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3304      	adds	r3, #4
 80059b6:	4619      	mov	r1, r3
 80059b8:	4610      	mov	r0, r2
 80059ba:	f000 f93b 	bl	8005c34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e6:	f023 0303 	bic.w	r3, r3, #3
 80059ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	4313      	orrs	r3, r2
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005a04:	f023 030c 	bic.w	r3, r3, #12
 8005a08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	4313      	orrs	r3, r2
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	011a      	lsls	r2, r3, #4
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	031b      	lsls	r3, r3, #12
 8005a34:	4313      	orrs	r3, r2
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005a42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005a4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	4313      	orrs	r3, r2
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005abc:	2300      	movs	r3, #0
 8005abe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d101      	bne.n	8005ace <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aca:	2302      	movs	r3, #2
 8005acc:	e0ae      	b.n	8005c2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b0c      	cmp	r3, #12
 8005ada:	f200 809f 	bhi.w	8005c1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ade:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005b19 	.word	0x08005b19
 8005ae8:	08005c1d 	.word	0x08005c1d
 8005aec:	08005c1d 	.word	0x08005c1d
 8005af0:	08005c1d 	.word	0x08005c1d
 8005af4:	08005b59 	.word	0x08005b59
 8005af8:	08005c1d 	.word	0x08005c1d
 8005afc:	08005c1d 	.word	0x08005c1d
 8005b00:	08005c1d 	.word	0x08005c1d
 8005b04:	08005b9b 	.word	0x08005b9b
 8005b08:	08005c1d 	.word	0x08005c1d
 8005b0c:	08005c1d 	.word	0x08005c1d
 8005b10:	08005c1d 	.word	0x08005c1d
 8005b14:	08005bdb 	.word	0x08005bdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68b9      	ldr	r1, [r7, #8]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 f934 	bl	8005d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0208 	orr.w	r2, r2, #8
 8005b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0204 	bic.w	r2, r2, #4
 8005b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6999      	ldr	r1, [r3, #24]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	691a      	ldr	r2, [r3, #16]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	619a      	str	r2, [r3, #24]
      break;
 8005b56:	e064      	b.n	8005c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68b9      	ldr	r1, [r7, #8]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f984 	bl	8005e6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699a      	ldr	r2, [r3, #24]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6999      	ldr	r1, [r3, #24]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	021a      	lsls	r2, r3, #8
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	619a      	str	r2, [r3, #24]
      break;
 8005b98:	e043      	b.n	8005c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 f9d9 	bl	8005f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0208 	orr.w	r2, r2, #8
 8005bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69da      	ldr	r2, [r3, #28]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0204 	bic.w	r2, r2, #4
 8005bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69d9      	ldr	r1, [r3, #28]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	61da      	str	r2, [r3, #28]
      break;
 8005bd8:	e023      	b.n	8005c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68b9      	ldr	r1, [r7, #8]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fa2d 	bl	8006040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69da      	ldr	r2, [r3, #28]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69da      	ldr	r2, [r3, #28]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69d9      	ldr	r1, [r3, #28]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	021a      	lsls	r2, r3, #8
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	61da      	str	r2, [r3, #28]
      break;
 8005c1a:	e002      	b.n	8005c22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a46      	ldr	r2, [pc, #280]	@ (8005d60 <TIM_Base_SetConfig+0x12c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d013      	beq.n	8005c74 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c52:	d00f      	beq.n	8005c74 <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a43      	ldr	r2, [pc, #268]	@ (8005d64 <TIM_Base_SetConfig+0x130>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00b      	beq.n	8005c74 <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a42      	ldr	r2, [pc, #264]	@ (8005d68 <TIM_Base_SetConfig+0x134>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d007      	beq.n	8005c74 <TIM_Base_SetConfig+0x40>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a41      	ldr	r2, [pc, #260]	@ (8005d6c <TIM_Base_SetConfig+0x138>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_Base_SetConfig+0x40>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a40      	ldr	r2, [pc, #256]	@ (8005d70 <TIM_Base_SetConfig+0x13c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d108      	bne.n	8005c86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a35      	ldr	r2, [pc, #212]	@ (8005d60 <TIM_Base_SetConfig+0x12c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d02b      	beq.n	8005ce6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c94:	d027      	beq.n	8005ce6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a32      	ldr	r2, [pc, #200]	@ (8005d64 <TIM_Base_SetConfig+0x130>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d023      	beq.n	8005ce6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a31      	ldr	r2, [pc, #196]	@ (8005d68 <TIM_Base_SetConfig+0x134>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d01f      	beq.n	8005ce6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a30      	ldr	r2, [pc, #192]	@ (8005d6c <TIM_Base_SetConfig+0x138>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d01b      	beq.n	8005ce6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2f      	ldr	r2, [pc, #188]	@ (8005d70 <TIM_Base_SetConfig+0x13c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d017      	beq.n	8005ce6 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2e      	ldr	r2, [pc, #184]	@ (8005d74 <TIM_Base_SetConfig+0x140>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d013      	beq.n	8005ce6 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005d78 <TIM_Base_SetConfig+0x144>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00f      	beq.n	8005ce6 <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8005d7c <TIM_Base_SetConfig+0x148>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00b      	beq.n	8005ce6 <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8005d80 <TIM_Base_SetConfig+0x14c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d007      	beq.n	8005ce6 <TIM_Base_SetConfig+0xb2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8005d84 <TIM_Base_SetConfig+0x150>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d003      	beq.n	8005ce6 <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a29      	ldr	r2, [pc, #164]	@ (8005d88 <TIM_Base_SetConfig+0x154>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d108      	bne.n	8005cf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a10      	ldr	r2, [pc, #64]	@ (8005d60 <TIM_Base_SetConfig+0x12c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_Base_SetConfig+0xf8>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a12      	ldr	r2, [pc, #72]	@ (8005d70 <TIM_Base_SetConfig+0x13c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d103      	bne.n	8005d34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d105      	bne.n	8005d52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f023 0201 	bic.w	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	611a      	str	r2, [r3, #16]
  }
}
 8005d52:	bf00      	nop
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40010400 	.word	0x40010400
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40014400 	.word	0x40014400
 8005d7c:	40014800 	.word	0x40014800
 8005d80:	40001800 	.word	0x40001800
 8005d84:	40001c00 	.word	0x40001c00
 8005d88:	40002000 	.word	0x40002000

08005d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	f023 0201 	bic.w	r2, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f023 0302 	bic.w	r3, r3, #2
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a20      	ldr	r2, [pc, #128]	@ (8005e64 <TIM_OC1_SetConfig+0xd8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_OC1_SetConfig+0x64>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a1f      	ldr	r2, [pc, #124]	@ (8005e68 <TIM_OC1_SetConfig+0xdc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10c      	bne.n	8005e0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f023 0308 	bic.w	r3, r3, #8
 8005df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f023 0304 	bic.w	r3, r3, #4
 8005e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a15      	ldr	r2, [pc, #84]	@ (8005e64 <TIM_OC1_SetConfig+0xd8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d003      	beq.n	8005e1a <TIM_OC1_SetConfig+0x8e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a14      	ldr	r2, [pc, #80]	@ (8005e68 <TIM_OC1_SetConfig+0xdc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d111      	bne.n	8005e3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	621a      	str	r2, [r3, #32]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40010400 	.word	0x40010400

08005e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	f023 0210 	bic.w	r2, r3, #16
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f023 0320 	bic.w	r3, r3, #32
 8005eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a22      	ldr	r2, [pc, #136]	@ (8005f50 <TIM_OC2_SetConfig+0xe4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_OC2_SetConfig+0x68>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a21      	ldr	r2, [pc, #132]	@ (8005f54 <TIM_OC2_SetConfig+0xe8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d10d      	bne.n	8005ef0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a17      	ldr	r2, [pc, #92]	@ (8005f50 <TIM_OC2_SetConfig+0xe4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC2_SetConfig+0x94>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a16      	ldr	r2, [pc, #88]	@ (8005f54 <TIM_OC2_SetConfig+0xe8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d113      	bne.n	8005f28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40010000 	.word	0x40010000
 8005f54:	40010400 	.word	0x40010400

08005f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0303 	bic.w	r3, r3, #3
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a21      	ldr	r2, [pc, #132]	@ (8006038 <TIM_OC3_SetConfig+0xe0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d003      	beq.n	8005fbe <TIM_OC3_SetConfig+0x66>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a20      	ldr	r2, [pc, #128]	@ (800603c <TIM_OC3_SetConfig+0xe4>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d10d      	bne.n	8005fda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a16      	ldr	r2, [pc, #88]	@ (8006038 <TIM_OC3_SetConfig+0xe0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_OC3_SetConfig+0x92>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a15      	ldr	r2, [pc, #84]	@ (800603c <TIM_OC3_SetConfig+0xe4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d113      	bne.n	8006012 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	011b      	lsls	r3, r3, #4
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	621a      	str	r2, [r3, #32]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	40010000 	.word	0x40010000
 800603c:	40010400 	.word	0x40010400

08006040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800608a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a12      	ldr	r2, [pc, #72]	@ (80060e4 <TIM_OC4_SetConfig+0xa4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_OC4_SetConfig+0x68>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a11      	ldr	r2, [pc, #68]	@ (80060e8 <TIM_OC4_SetConfig+0xa8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d109      	bne.n	80060bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	019b      	lsls	r3, r3, #6
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40010400 	.word	0x40010400

080060ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006100:	2302      	movs	r3, #2
 8006102:	e05a      	b.n	80061ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a21      	ldr	r2, [pc, #132]	@ (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d022      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006150:	d01d      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1d      	ldr	r2, [pc, #116]	@ (80061cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d018      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a1b      	ldr	r2, [pc, #108]	@ (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d013      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1a      	ldr	r2, [pc, #104]	@ (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00e      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a18      	ldr	r2, [pc, #96]	@ (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a17      	ldr	r2, [pc, #92]	@ (80061dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d004      	beq.n	800618e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a15      	ldr	r2, [pc, #84]	@ (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d10c      	bne.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	4313      	orrs	r3, r2
 800619e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40010000 	.word	0x40010000
 80061cc:	40000400 	.word	0x40000400
 80061d0:	40000800 	.word	0x40000800
 80061d4:	40000c00 	.word	0x40000c00
 80061d8:	40010400 	.word	0x40010400
 80061dc:	40014000 	.word	0x40014000
 80061e0:	40001800 	.word	0x40001800

080061e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e042      	b.n	800627c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fc fb8a 	bl	8002924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2224      	movs	r2, #36	@ 0x24
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fa95 	bl	8006758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	691a      	ldr	r2, [r3, #16]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800623c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695a      	ldr	r2, [r3, #20]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800624c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800625c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2220      	movs	r2, #32
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b20      	cmp	r3, #32
 800629c:	d112      	bne.n	80062c4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <HAL_UART_Receive_DMA+0x26>
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e00b      	b.n	80062c6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	461a      	mov	r2, r3
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 f926 	bl	800650c <UART_Start_Receive_DMA>
 80062c0:	4603      	mov	r3, r0
 80062c2:	e000      	b.n	80062c6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80062c4:	2302      	movs	r3, #2
  }
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b083      	sub	sp, #12
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b09c      	sub	sp, #112	@ 0x70
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006326:	2b00      	cmp	r3, #0
 8006328:	d172      	bne.n	8006410 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800632a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800632c:	2200      	movs	r2, #0
 800632e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	330c      	adds	r3, #12
 8006336:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800633a:	e853 3f00 	ldrex	r3, [r3]
 800633e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006342:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006346:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	330c      	adds	r3, #12
 800634e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006350:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006352:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006356:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006358:	e841 2300 	strex	r3, r2, [r1]
 800635c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800635e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e5      	bne.n	8006330 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3314      	adds	r3, #20
 800636a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636e:	e853 3f00 	ldrex	r3, [r3]
 8006372:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006376:	f023 0301 	bic.w	r3, r3, #1
 800637a:	667b      	str	r3, [r7, #100]	@ 0x64
 800637c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3314      	adds	r3, #20
 8006382:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006384:	647a      	str	r2, [r7, #68]	@ 0x44
 8006386:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006388:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800638a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800638c:	e841 2300 	strex	r3, r2, [r1]
 8006390:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e5      	bne.n	8006364 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3314      	adds	r3, #20
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	623b      	str	r3, [r7, #32]
   return(result);
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80063b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3314      	adds	r3, #20
 80063b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80063b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80063ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e5      	bne.n	8006398 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d119      	bne.n	8006410 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	330c      	adds	r3, #12
 80063e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0310 	bic.w	r3, r3, #16
 80063f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063fc:	61fa      	str	r2, [r7, #28]
 80063fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	69b9      	ldr	r1, [r7, #24]
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	617b      	str	r3, [r7, #20]
   return(result);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e5      	bne.n	80063dc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006412:	2200      	movs	r2, #0
 8006414:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641a:	2b01      	cmp	r3, #1
 800641c:	d106      	bne.n	800642c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800641e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006420:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006422:	4619      	mov	r1, r3
 8006424:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006426:	f7ff ff66 	bl	80062f6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800642a:	e002      	b.n	8006432 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800642c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800642e:	f7fa ffa7 	bl	8001380 <HAL_UART_RxCpltCallback>
}
 8006432:	bf00      	nop
 8006434:	3770      	adds	r7, #112	@ 0x70
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006446:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2201      	movs	r2, #1
 800644c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006452:	2b01      	cmp	r3, #1
 8006454:	d108      	bne.n	8006468 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800645a:	085b      	lsrs	r3, r3, #1
 800645c:	b29b      	uxth	r3, r3
 800645e:	4619      	mov	r1, r3
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7ff ff48 	bl	80062f6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006466:	e002      	b.n	800646e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff ff30 	bl	80062ce <HAL_UART_RxHalfCpltCallback>
}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006486:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006492:	2b80      	cmp	r3, #128	@ 0x80
 8006494:	bf0c      	ite	eq
 8006496:	2301      	moveq	r3, #1
 8006498:	2300      	movne	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b21      	cmp	r3, #33	@ 0x21
 80064a8:	d108      	bne.n	80064bc <UART_DMAError+0x46>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80064b6:	68b8      	ldr	r0, [r7, #8]
 80064b8:	f000 f8c2 	bl	8006640 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c6:	2b40      	cmp	r3, #64	@ 0x40
 80064c8:	bf0c      	ite	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	2300      	movne	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b22      	cmp	r3, #34	@ 0x22
 80064dc:	d108      	bne.n	80064f0 <UART_DMAError+0x7a>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2200      	movs	r2, #0
 80064e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80064ea:	68b8      	ldr	r0, [r7, #8]
 80064ec:	f000 f8d0 	bl	8006690 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f4:	f043 0210 	orr.w	r2, r3, #16
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064fc:	68b8      	ldr	r0, [r7, #8]
 80064fe:	f7ff fef0 	bl	80062e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006502:	bf00      	nop
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b098      	sub	sp, #96	@ 0x60
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	4613      	mov	r3, r2
 8006518:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	88fa      	ldrh	r2, [r7, #6]
 8006524:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2222      	movs	r2, #34	@ 0x22
 8006530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006538:	4a3e      	ldr	r2, [pc, #248]	@ (8006634 <UART_Start_Receive_DMA+0x128>)
 800653a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006540:	4a3d      	ldr	r2, [pc, #244]	@ (8006638 <UART_Start_Receive_DMA+0x12c>)
 8006542:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006548:	4a3c      	ldr	r2, [pc, #240]	@ (800663c <UART_Start_Receive_DMA+0x130>)
 800654a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006550:	2200      	movs	r2, #0
 8006552:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006554:	f107 0308 	add.w	r3, r7, #8
 8006558:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3304      	adds	r3, #4
 8006564:	4619      	mov	r1, r3
 8006566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	88fb      	ldrh	r3, [r7, #6]
 800656c:	f7fc feba 	bl	80032e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006570:	2300      	movs	r3, #0
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d019      	beq.n	80065c2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	330c      	adds	r3, #12
 8006594:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800659e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	330c      	adds	r3, #12
 80065ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80065b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80065b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80065bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e5      	bne.n	800658e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3314      	adds	r3, #20
 80065c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d4:	f043 0301 	orr.w	r3, r3, #1
 80065d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3314      	adds	r3, #20
 80065e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065e2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80065e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80065e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e5      	bne.n	80065c2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3314      	adds	r3, #20
 80065fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	617b      	str	r3, [r7, #20]
   return(result);
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800660c:	653b      	str	r3, [r7, #80]	@ 0x50
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3314      	adds	r3, #20
 8006614:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006616:	627a      	str	r2, [r7, #36]	@ 0x24
 8006618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6a39      	ldr	r1, [r7, #32]
 800661c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	61fb      	str	r3, [r7, #28]
   return(result);
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e5      	bne.n	80065f6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3760      	adds	r7, #96	@ 0x60
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	0800630f 	.word	0x0800630f
 8006638:	0800643b 	.word	0x0800643b
 800663c:	08006477 	.word	0x08006477

08006640 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006640:	b480      	push	{r7}
 8006642:	b089      	sub	sp, #36	@ 0x24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	330c      	adds	r3, #12
 800664e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	60bb      	str	r3, [r7, #8]
   return(result);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	330c      	adds	r3, #12
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	61ba      	str	r2, [r7, #24]
 800666a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6979      	ldr	r1, [r7, #20]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	613b      	str	r3, [r7, #16]
   return(result);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e5      	bne.n	8006648 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006684:	bf00      	nop
 8006686:	3724      	adds	r7, #36	@ 0x24
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b095      	sub	sp, #84	@ 0x54
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	330c      	adds	r3, #12
 800669e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	330c      	adds	r3, #12
 80066b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80066ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e5      	bne.n	8006698 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3314      	adds	r3, #20
 80066d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	61fb      	str	r3, [r7, #28]
   return(result);
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	f023 0301 	bic.w	r3, r3, #1
 80066e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3314      	adds	r3, #20
 80066ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e5      	bne.n	80066cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006704:	2b01      	cmp	r3, #1
 8006706:	d119      	bne.n	800673c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	330c      	adds	r3, #12
 800670e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	60bb      	str	r3, [r7, #8]
   return(result);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f023 0310 	bic.w	r3, r3, #16
 800671e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	330c      	adds	r3, #12
 8006726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006728:	61ba      	str	r2, [r7, #24]
 800672a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6979      	ldr	r1, [r7, #20]
 800672e:	69ba      	ldr	r2, [r7, #24]
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	613b      	str	r3, [r7, #16]
   return(result);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e5      	bne.n	8006708 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800674a:	bf00      	nop
 800674c:	3754      	adds	r7, #84	@ 0x54
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
	...

08006758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800675c:	b0c0      	sub	sp, #256	@ 0x100
 800675e:	af00      	add	r7, sp, #0
 8006760:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006774:	68d9      	ldr	r1, [r3, #12]
 8006776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	ea40 0301 	orr.w	r3, r0, r1
 8006780:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	431a      	orrs	r2, r3
 8006790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	431a      	orrs	r2, r3
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80067b0:	f021 010c 	bic.w	r1, r1, #12
 80067b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067be:	430b      	orrs	r3, r1
 80067c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80067ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d2:	6999      	ldr	r1, [r3, #24]
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	ea40 0301 	orr.w	r3, r0, r1
 80067de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4b8f      	ldr	r3, [pc, #572]	@ (8006a24 <UART_SetConfig+0x2cc>)
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d005      	beq.n	80067f8 <UART_SetConfig+0xa0>
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b8d      	ldr	r3, [pc, #564]	@ (8006a28 <UART_SetConfig+0x2d0>)
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d104      	bne.n	8006802 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067f8:	f7fe fb34 	bl	8004e64 <HAL_RCC_GetPCLK2Freq>
 80067fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006800:	e003      	b.n	800680a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006802:	f7fe fb1b 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 8006806:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006814:	f040 810c 	bne.w	8006a30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800681c:	2200      	movs	r2, #0
 800681e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006822:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006826:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800682a:	4622      	mov	r2, r4
 800682c:	462b      	mov	r3, r5
 800682e:	1891      	adds	r1, r2, r2
 8006830:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006832:	415b      	adcs	r3, r3
 8006834:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006836:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800683a:	4621      	mov	r1, r4
 800683c:	eb12 0801 	adds.w	r8, r2, r1
 8006840:	4629      	mov	r1, r5
 8006842:	eb43 0901 	adc.w	r9, r3, r1
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	f04f 0300 	mov.w	r3, #0
 800684e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800685a:	4690      	mov	r8, r2
 800685c:	4699      	mov	r9, r3
 800685e:	4623      	mov	r3, r4
 8006860:	eb18 0303 	adds.w	r3, r8, r3
 8006864:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006868:	462b      	mov	r3, r5
 800686a:	eb49 0303 	adc.w	r3, r9, r3
 800686e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800687e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006882:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006886:	460b      	mov	r3, r1
 8006888:	18db      	adds	r3, r3, r3
 800688a:	653b      	str	r3, [r7, #80]	@ 0x50
 800688c:	4613      	mov	r3, r2
 800688e:	eb42 0303 	adc.w	r3, r2, r3
 8006892:	657b      	str	r3, [r7, #84]	@ 0x54
 8006894:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006898:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800689c:	f7fa fa14 	bl	8000cc8 <__aeabi_uldivmod>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4b61      	ldr	r3, [pc, #388]	@ (8006a2c <UART_SetConfig+0x2d4>)
 80068a6:	fba3 2302 	umull	r2, r3, r3, r2
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	011c      	lsls	r4, r3, #4
 80068ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80068bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	1891      	adds	r1, r2, r2
 80068c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80068c8:	415b      	adcs	r3, r3
 80068ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80068d0:	4641      	mov	r1, r8
 80068d2:	eb12 0a01 	adds.w	sl, r2, r1
 80068d6:	4649      	mov	r1, r9
 80068d8:	eb43 0b01 	adc.w	fp, r3, r1
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068f0:	4692      	mov	sl, r2
 80068f2:	469b      	mov	fp, r3
 80068f4:	4643      	mov	r3, r8
 80068f6:	eb1a 0303 	adds.w	r3, sl, r3
 80068fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068fe:	464b      	mov	r3, r9
 8006900:	eb4b 0303 	adc.w	r3, fp, r3
 8006904:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006914:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006918:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800691c:	460b      	mov	r3, r1
 800691e:	18db      	adds	r3, r3, r3
 8006920:	643b      	str	r3, [r7, #64]	@ 0x40
 8006922:	4613      	mov	r3, r2
 8006924:	eb42 0303 	adc.w	r3, r2, r3
 8006928:	647b      	str	r3, [r7, #68]	@ 0x44
 800692a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800692e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006932:	f7fa f9c9 	bl	8000cc8 <__aeabi_uldivmod>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4611      	mov	r1, r2
 800693c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a2c <UART_SetConfig+0x2d4>)
 800693e:	fba3 2301 	umull	r2, r3, r3, r1
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	2264      	movs	r2, #100	@ 0x64
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	1acb      	subs	r3, r1, r3
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006952:	4b36      	ldr	r3, [pc, #216]	@ (8006a2c <UART_SetConfig+0x2d4>)
 8006954:	fba3 2302 	umull	r2, r3, r3, r2
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006960:	441c      	add	r4, r3
 8006962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006966:	2200      	movs	r2, #0
 8006968:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800696c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006970:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006974:	4642      	mov	r2, r8
 8006976:	464b      	mov	r3, r9
 8006978:	1891      	adds	r1, r2, r2
 800697a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800697c:	415b      	adcs	r3, r3
 800697e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006984:	4641      	mov	r1, r8
 8006986:	1851      	adds	r1, r2, r1
 8006988:	6339      	str	r1, [r7, #48]	@ 0x30
 800698a:	4649      	mov	r1, r9
 800698c:	414b      	adcs	r3, r1
 800698e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800699c:	4659      	mov	r1, fp
 800699e:	00cb      	lsls	r3, r1, #3
 80069a0:	4651      	mov	r1, sl
 80069a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069a6:	4651      	mov	r1, sl
 80069a8:	00ca      	lsls	r2, r1, #3
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	4603      	mov	r3, r0
 80069b0:	4642      	mov	r2, r8
 80069b2:	189b      	adds	r3, r3, r2
 80069b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069b8:	464b      	mov	r3, r9
 80069ba:	460a      	mov	r2, r1
 80069bc:	eb42 0303 	adc.w	r3, r2, r3
 80069c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80069d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80069d8:	460b      	mov	r3, r1
 80069da:	18db      	adds	r3, r3, r3
 80069dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069de:	4613      	mov	r3, r2
 80069e0:	eb42 0303 	adc.w	r3, r2, r3
 80069e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80069ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80069ee:	f7fa f96b 	bl	8000cc8 <__aeabi_uldivmod>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a2c <UART_SetConfig+0x2d4>)
 80069f8:	fba3 1302 	umull	r1, r3, r3, r2
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	2164      	movs	r1, #100	@ 0x64
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	3332      	adds	r3, #50	@ 0x32
 8006a0a:	4a08      	ldr	r2, [pc, #32]	@ (8006a2c <UART_SetConfig+0x2d4>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	f003 0207 	and.w	r2, r3, #7
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4422      	add	r2, r4
 8006a1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a20:	e106      	b.n	8006c30 <UART_SetConfig+0x4d8>
 8006a22:	bf00      	nop
 8006a24:	40011000 	.word	0x40011000
 8006a28:	40011400 	.word	0x40011400
 8006a2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a42:	4642      	mov	r2, r8
 8006a44:	464b      	mov	r3, r9
 8006a46:	1891      	adds	r1, r2, r2
 8006a48:	6239      	str	r1, [r7, #32]
 8006a4a:	415b      	adcs	r3, r3
 8006a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a52:	4641      	mov	r1, r8
 8006a54:	1854      	adds	r4, r2, r1
 8006a56:	4649      	mov	r1, r9
 8006a58:	eb43 0501 	adc.w	r5, r3, r1
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	00eb      	lsls	r3, r5, #3
 8006a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a6a:	00e2      	lsls	r2, r4, #3
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	461d      	mov	r5, r3
 8006a70:	4643      	mov	r3, r8
 8006a72:	18e3      	adds	r3, r4, r3
 8006a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a78:	464b      	mov	r3, r9
 8006a7a:	eb45 0303 	adc.w	r3, r5, r3
 8006a7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	008b      	lsls	r3, r1, #2
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	008a      	lsls	r2, r1, #2
 8006aac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ab0:	f7fa f90a 	bl	8000cc8 <__aeabi_uldivmod>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4b60      	ldr	r3, [pc, #384]	@ (8006c3c <UART_SetConfig+0x4e4>)
 8006aba:	fba3 2302 	umull	r2, r3, r3, r2
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	011c      	lsls	r4, r3, #4
 8006ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006acc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ad0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ad4:	4642      	mov	r2, r8
 8006ad6:	464b      	mov	r3, r9
 8006ad8:	1891      	adds	r1, r2, r2
 8006ada:	61b9      	str	r1, [r7, #24]
 8006adc:	415b      	adcs	r3, r3
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ae4:	4641      	mov	r1, r8
 8006ae6:	1851      	adds	r1, r2, r1
 8006ae8:	6139      	str	r1, [r7, #16]
 8006aea:	4649      	mov	r1, r9
 8006aec:	414b      	adcs	r3, r1
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	f04f 0200 	mov.w	r2, #0
 8006af4:	f04f 0300 	mov.w	r3, #0
 8006af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006afc:	4659      	mov	r1, fp
 8006afe:	00cb      	lsls	r3, r1, #3
 8006b00:	4651      	mov	r1, sl
 8006b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b06:	4651      	mov	r1, sl
 8006b08:	00ca      	lsls	r2, r1, #3
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4603      	mov	r3, r0
 8006b10:	4642      	mov	r2, r8
 8006b12:	189b      	adds	r3, r3, r2
 8006b14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b18:	464b      	mov	r3, r9
 8006b1a:	460a      	mov	r2, r1
 8006b1c:	eb42 0303 	adc.w	r3, r2, r3
 8006b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	008b      	lsls	r3, r1, #2
 8006b40:	4641      	mov	r1, r8
 8006b42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b46:	4641      	mov	r1, r8
 8006b48:	008a      	lsls	r2, r1, #2
 8006b4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006b4e:	f7fa f8bb 	bl	8000cc8 <__aeabi_uldivmod>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4611      	mov	r1, r2
 8006b58:	4b38      	ldr	r3, [pc, #224]	@ (8006c3c <UART_SetConfig+0x4e4>)
 8006b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b5e:	095b      	lsrs	r3, r3, #5
 8006b60:	2264      	movs	r2, #100	@ 0x64
 8006b62:	fb02 f303 	mul.w	r3, r2, r3
 8006b66:	1acb      	subs	r3, r1, r3
 8006b68:	011b      	lsls	r3, r3, #4
 8006b6a:	3332      	adds	r3, #50	@ 0x32
 8006b6c:	4a33      	ldr	r2, [pc, #204]	@ (8006c3c <UART_SetConfig+0x4e4>)
 8006b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b78:	441c      	add	r4, r3
 8006b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b7e:	2200      	movs	r2, #0
 8006b80:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b82:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006b88:	4642      	mov	r2, r8
 8006b8a:	464b      	mov	r3, r9
 8006b8c:	1891      	adds	r1, r2, r2
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	415b      	adcs	r3, r3
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b98:	4641      	mov	r1, r8
 8006b9a:	1851      	adds	r1, r2, r1
 8006b9c:	6039      	str	r1, [r7, #0]
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	414b      	adcs	r3, r1
 8006ba2:	607b      	str	r3, [r7, #4]
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	f04f 0300 	mov.w	r3, #0
 8006bac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bb0:	4659      	mov	r1, fp
 8006bb2:	00cb      	lsls	r3, r1, #3
 8006bb4:	4651      	mov	r1, sl
 8006bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bba:	4651      	mov	r1, sl
 8006bbc:	00ca      	lsls	r2, r1, #3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	4642      	mov	r2, r8
 8006bc6:	189b      	adds	r3, r3, r2
 8006bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bca:	464b      	mov	r3, r9
 8006bcc:	460a      	mov	r2, r1
 8006bce:	eb42 0303 	adc.w	r3, r2, r3
 8006bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bde:	667a      	str	r2, [r7, #100]	@ 0x64
 8006be0:	f04f 0200 	mov.w	r2, #0
 8006be4:	f04f 0300 	mov.w	r3, #0
 8006be8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006bec:	4649      	mov	r1, r9
 8006bee:	008b      	lsls	r3, r1, #2
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bf6:	4641      	mov	r1, r8
 8006bf8:	008a      	lsls	r2, r1, #2
 8006bfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006bfe:	f7fa f863 	bl	8000cc8 <__aeabi_uldivmod>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4b0d      	ldr	r3, [pc, #52]	@ (8006c3c <UART_SetConfig+0x4e4>)
 8006c08:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0c:	095b      	lsrs	r3, r3, #5
 8006c0e:	2164      	movs	r1, #100	@ 0x64
 8006c10:	fb01 f303 	mul.w	r3, r1, r3
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	3332      	adds	r3, #50	@ 0x32
 8006c1a:	4a08      	ldr	r2, [pc, #32]	@ (8006c3c <UART_SetConfig+0x4e4>)
 8006c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	f003 020f 	and.w	r2, r3, #15
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4422      	add	r2, r4
 8006c2e:	609a      	str	r2, [r3, #8]
}
 8006c30:	bf00      	nop
 8006c32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c36:	46bd      	mov	sp, r7
 8006c38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c3c:	51eb851f 	.word	0x51eb851f

08006c40 <__cvt>:
 8006c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	ec57 6b10 	vmov	r6, r7, d0
 8006c48:	2f00      	cmp	r7, #0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	463b      	mov	r3, r7
 8006c50:	bfbb      	ittet	lt
 8006c52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006c56:	461f      	movlt	r7, r3
 8006c58:	2300      	movge	r3, #0
 8006c5a:	232d      	movlt	r3, #45	@ 0x2d
 8006c5c:	700b      	strb	r3, [r1, #0]
 8006c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006c64:	4691      	mov	r9, r2
 8006c66:	f023 0820 	bic.w	r8, r3, #32
 8006c6a:	bfbc      	itt	lt
 8006c6c:	4632      	movlt	r2, r6
 8006c6e:	4616      	movlt	r6, r2
 8006c70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c74:	d005      	beq.n	8006c82 <__cvt+0x42>
 8006c76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006c7a:	d100      	bne.n	8006c7e <__cvt+0x3e>
 8006c7c:	3401      	adds	r4, #1
 8006c7e:	2102      	movs	r1, #2
 8006c80:	e000      	b.n	8006c84 <__cvt+0x44>
 8006c82:	2103      	movs	r1, #3
 8006c84:	ab03      	add	r3, sp, #12
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	ab02      	add	r3, sp, #8
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	ec47 6b10 	vmov	d0, r6, r7
 8006c90:	4653      	mov	r3, sl
 8006c92:	4622      	mov	r2, r4
 8006c94:	f001 f978 	bl	8007f88 <_dtoa_r>
 8006c98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	d119      	bne.n	8006cd4 <__cvt+0x94>
 8006ca0:	f019 0f01 	tst.w	r9, #1
 8006ca4:	d00e      	beq.n	8006cc4 <__cvt+0x84>
 8006ca6:	eb00 0904 	add.w	r9, r0, r4
 8006caa:	2200      	movs	r2, #0
 8006cac:	2300      	movs	r3, #0
 8006cae:	4630      	mov	r0, r6
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	f7f9 ff29 	bl	8000b08 <__aeabi_dcmpeq>
 8006cb6:	b108      	cbz	r0, 8006cbc <__cvt+0x7c>
 8006cb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006cbc:	2230      	movs	r2, #48	@ 0x30
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	454b      	cmp	r3, r9
 8006cc2:	d31e      	bcc.n	8006d02 <__cvt+0xc2>
 8006cc4:	9b03      	ldr	r3, [sp, #12]
 8006cc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cc8:	1b5b      	subs	r3, r3, r5
 8006cca:	4628      	mov	r0, r5
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	b004      	add	sp, #16
 8006cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006cd8:	eb00 0904 	add.w	r9, r0, r4
 8006cdc:	d1e5      	bne.n	8006caa <__cvt+0x6a>
 8006cde:	7803      	ldrb	r3, [r0, #0]
 8006ce0:	2b30      	cmp	r3, #48	@ 0x30
 8006ce2:	d10a      	bne.n	8006cfa <__cvt+0xba>
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 ff0c 	bl	8000b08 <__aeabi_dcmpeq>
 8006cf0:	b918      	cbnz	r0, 8006cfa <__cvt+0xba>
 8006cf2:	f1c4 0401 	rsb	r4, r4, #1
 8006cf6:	f8ca 4000 	str.w	r4, [sl]
 8006cfa:	f8da 3000 	ldr.w	r3, [sl]
 8006cfe:	4499      	add	r9, r3
 8006d00:	e7d3      	b.n	8006caa <__cvt+0x6a>
 8006d02:	1c59      	adds	r1, r3, #1
 8006d04:	9103      	str	r1, [sp, #12]
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	e7d9      	b.n	8006cbe <__cvt+0x7e>

08006d0a <__exponent>:
 8006d0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	bfba      	itte	lt
 8006d10:	4249      	neglt	r1, r1
 8006d12:	232d      	movlt	r3, #45	@ 0x2d
 8006d14:	232b      	movge	r3, #43	@ 0x2b
 8006d16:	2909      	cmp	r1, #9
 8006d18:	7002      	strb	r2, [r0, #0]
 8006d1a:	7043      	strb	r3, [r0, #1]
 8006d1c:	dd29      	ble.n	8006d72 <__exponent+0x68>
 8006d1e:	f10d 0307 	add.w	r3, sp, #7
 8006d22:	461d      	mov	r5, r3
 8006d24:	270a      	movs	r7, #10
 8006d26:	461a      	mov	r2, r3
 8006d28:	fbb1 f6f7 	udiv	r6, r1, r7
 8006d2c:	fb07 1416 	mls	r4, r7, r6, r1
 8006d30:	3430      	adds	r4, #48	@ 0x30
 8006d32:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006d36:	460c      	mov	r4, r1
 8006d38:	2c63      	cmp	r4, #99	@ 0x63
 8006d3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d3e:	4631      	mov	r1, r6
 8006d40:	dcf1      	bgt.n	8006d26 <__exponent+0x1c>
 8006d42:	3130      	adds	r1, #48	@ 0x30
 8006d44:	1e94      	subs	r4, r2, #2
 8006d46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d4a:	1c41      	adds	r1, r0, #1
 8006d4c:	4623      	mov	r3, r4
 8006d4e:	42ab      	cmp	r3, r5
 8006d50:	d30a      	bcc.n	8006d68 <__exponent+0x5e>
 8006d52:	f10d 0309 	add.w	r3, sp, #9
 8006d56:	1a9b      	subs	r3, r3, r2
 8006d58:	42ac      	cmp	r4, r5
 8006d5a:	bf88      	it	hi
 8006d5c:	2300      	movhi	r3, #0
 8006d5e:	3302      	adds	r3, #2
 8006d60:	4403      	add	r3, r0
 8006d62:	1a18      	subs	r0, r3, r0
 8006d64:	b003      	add	sp, #12
 8006d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d68:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006d6c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006d70:	e7ed      	b.n	8006d4e <__exponent+0x44>
 8006d72:	2330      	movs	r3, #48	@ 0x30
 8006d74:	3130      	adds	r1, #48	@ 0x30
 8006d76:	7083      	strb	r3, [r0, #2]
 8006d78:	70c1      	strb	r1, [r0, #3]
 8006d7a:	1d03      	adds	r3, r0, #4
 8006d7c:	e7f1      	b.n	8006d62 <__exponent+0x58>
	...

08006d80 <_printf_float>:
 8006d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	b08d      	sub	sp, #52	@ 0x34
 8006d86:	460c      	mov	r4, r1
 8006d88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006d8c:	4616      	mov	r6, r2
 8006d8e:	461f      	mov	r7, r3
 8006d90:	4605      	mov	r5, r0
 8006d92:	f000 fff3 	bl	8007d7c <_localeconv_r>
 8006d96:	6803      	ldr	r3, [r0, #0]
 8006d98:	9304      	str	r3, [sp, #16]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7f9 fa88 	bl	80002b0 <strlen>
 8006da0:	2300      	movs	r3, #0
 8006da2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006da4:	f8d8 3000 	ldr.w	r3, [r8]
 8006da8:	9005      	str	r0, [sp, #20]
 8006daa:	3307      	adds	r3, #7
 8006dac:	f023 0307 	bic.w	r3, r3, #7
 8006db0:	f103 0208 	add.w	r2, r3, #8
 8006db4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006db8:	f8d4 b000 	ldr.w	fp, [r4]
 8006dbc:	f8c8 2000 	str.w	r2, [r8]
 8006dc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dc4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006dc8:	9307      	str	r3, [sp, #28]
 8006dca:	f8cd 8018 	str.w	r8, [sp, #24]
 8006dce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006dd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dd6:	4b9c      	ldr	r3, [pc, #624]	@ (8007048 <_printf_float+0x2c8>)
 8006dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ddc:	f7f9 fec6 	bl	8000b6c <__aeabi_dcmpun>
 8006de0:	bb70      	cbnz	r0, 8006e40 <_printf_float+0xc0>
 8006de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006de6:	4b98      	ldr	r3, [pc, #608]	@ (8007048 <_printf_float+0x2c8>)
 8006de8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dec:	f7f9 fea0 	bl	8000b30 <__aeabi_dcmple>
 8006df0:	bb30      	cbnz	r0, 8006e40 <_printf_float+0xc0>
 8006df2:	2200      	movs	r2, #0
 8006df4:	2300      	movs	r3, #0
 8006df6:	4640      	mov	r0, r8
 8006df8:	4649      	mov	r1, r9
 8006dfa:	f7f9 fe8f 	bl	8000b1c <__aeabi_dcmplt>
 8006dfe:	b110      	cbz	r0, 8006e06 <_printf_float+0x86>
 8006e00:	232d      	movs	r3, #45	@ 0x2d
 8006e02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e06:	4a91      	ldr	r2, [pc, #580]	@ (800704c <_printf_float+0x2cc>)
 8006e08:	4b91      	ldr	r3, [pc, #580]	@ (8007050 <_printf_float+0x2d0>)
 8006e0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006e0e:	bf94      	ite	ls
 8006e10:	4690      	movls	r8, r2
 8006e12:	4698      	movhi	r8, r3
 8006e14:	2303      	movs	r3, #3
 8006e16:	6123      	str	r3, [r4, #16]
 8006e18:	f02b 0304 	bic.w	r3, fp, #4
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	f04f 0900 	mov.w	r9, #0
 8006e22:	9700      	str	r7, [sp, #0]
 8006e24:	4633      	mov	r3, r6
 8006e26:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006e28:	4621      	mov	r1, r4
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f000 f9d2 	bl	80071d4 <_printf_common>
 8006e30:	3001      	adds	r0, #1
 8006e32:	f040 808d 	bne.w	8006f50 <_printf_float+0x1d0>
 8006e36:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3a:	b00d      	add	sp, #52	@ 0x34
 8006e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e40:	4642      	mov	r2, r8
 8006e42:	464b      	mov	r3, r9
 8006e44:	4640      	mov	r0, r8
 8006e46:	4649      	mov	r1, r9
 8006e48:	f7f9 fe90 	bl	8000b6c <__aeabi_dcmpun>
 8006e4c:	b140      	cbz	r0, 8006e60 <_printf_float+0xe0>
 8006e4e:	464b      	mov	r3, r9
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bfbc      	itt	lt
 8006e54:	232d      	movlt	r3, #45	@ 0x2d
 8006e56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e5a:	4a7e      	ldr	r2, [pc, #504]	@ (8007054 <_printf_float+0x2d4>)
 8006e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8007058 <_printf_float+0x2d8>)
 8006e5e:	e7d4      	b.n	8006e0a <_printf_float+0x8a>
 8006e60:	6863      	ldr	r3, [r4, #4]
 8006e62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006e66:	9206      	str	r2, [sp, #24]
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	d13b      	bne.n	8006ee4 <_printf_float+0x164>
 8006e6c:	2306      	movs	r3, #6
 8006e6e:	6063      	str	r3, [r4, #4]
 8006e70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006e74:	2300      	movs	r3, #0
 8006e76:	6022      	str	r2, [r4, #0]
 8006e78:	9303      	str	r3, [sp, #12]
 8006e7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006e80:	ab09      	add	r3, sp, #36	@ 0x24
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	6861      	ldr	r1, [r4, #4]
 8006e86:	ec49 8b10 	vmov	d0, r8, r9
 8006e8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f7ff fed6 	bl	8006c40 <__cvt>
 8006e94:	9b06      	ldr	r3, [sp, #24]
 8006e96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e98:	2b47      	cmp	r3, #71	@ 0x47
 8006e9a:	4680      	mov	r8, r0
 8006e9c:	d129      	bne.n	8006ef2 <_printf_float+0x172>
 8006e9e:	1cc8      	adds	r0, r1, #3
 8006ea0:	db02      	blt.n	8006ea8 <_printf_float+0x128>
 8006ea2:	6863      	ldr	r3, [r4, #4]
 8006ea4:	4299      	cmp	r1, r3
 8006ea6:	dd41      	ble.n	8006f2c <_printf_float+0x1ac>
 8006ea8:	f1aa 0a02 	sub.w	sl, sl, #2
 8006eac:	fa5f fa8a 	uxtb.w	sl, sl
 8006eb0:	3901      	subs	r1, #1
 8006eb2:	4652      	mov	r2, sl
 8006eb4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006eb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006eba:	f7ff ff26 	bl	8006d0a <__exponent>
 8006ebe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ec0:	1813      	adds	r3, r2, r0
 8006ec2:	2a01      	cmp	r2, #1
 8006ec4:	4681      	mov	r9, r0
 8006ec6:	6123      	str	r3, [r4, #16]
 8006ec8:	dc02      	bgt.n	8006ed0 <_printf_float+0x150>
 8006eca:	6822      	ldr	r2, [r4, #0]
 8006ecc:	07d2      	lsls	r2, r2, #31
 8006ece:	d501      	bpl.n	8006ed4 <_printf_float+0x154>
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	6123      	str	r3, [r4, #16]
 8006ed4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0a2      	beq.n	8006e22 <_printf_float+0xa2>
 8006edc:	232d      	movs	r3, #45	@ 0x2d
 8006ede:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ee2:	e79e      	b.n	8006e22 <_printf_float+0xa2>
 8006ee4:	9a06      	ldr	r2, [sp, #24]
 8006ee6:	2a47      	cmp	r2, #71	@ 0x47
 8006ee8:	d1c2      	bne.n	8006e70 <_printf_float+0xf0>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1c0      	bne.n	8006e70 <_printf_float+0xf0>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e7bd      	b.n	8006e6e <_printf_float+0xee>
 8006ef2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ef6:	d9db      	bls.n	8006eb0 <_printf_float+0x130>
 8006ef8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006efc:	d118      	bne.n	8006f30 <_printf_float+0x1b0>
 8006efe:	2900      	cmp	r1, #0
 8006f00:	6863      	ldr	r3, [r4, #4]
 8006f02:	dd0b      	ble.n	8006f1c <_printf_float+0x19c>
 8006f04:	6121      	str	r1, [r4, #16]
 8006f06:	b913      	cbnz	r3, 8006f0e <_printf_float+0x18e>
 8006f08:	6822      	ldr	r2, [r4, #0]
 8006f0a:	07d0      	lsls	r0, r2, #31
 8006f0c:	d502      	bpl.n	8006f14 <_printf_float+0x194>
 8006f0e:	3301      	adds	r3, #1
 8006f10:	440b      	add	r3, r1
 8006f12:	6123      	str	r3, [r4, #16]
 8006f14:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006f16:	f04f 0900 	mov.w	r9, #0
 8006f1a:	e7db      	b.n	8006ed4 <_printf_float+0x154>
 8006f1c:	b913      	cbnz	r3, 8006f24 <_printf_float+0x1a4>
 8006f1e:	6822      	ldr	r2, [r4, #0]
 8006f20:	07d2      	lsls	r2, r2, #31
 8006f22:	d501      	bpl.n	8006f28 <_printf_float+0x1a8>
 8006f24:	3302      	adds	r3, #2
 8006f26:	e7f4      	b.n	8006f12 <_printf_float+0x192>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e7f2      	b.n	8006f12 <_printf_float+0x192>
 8006f2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f32:	4299      	cmp	r1, r3
 8006f34:	db05      	blt.n	8006f42 <_printf_float+0x1c2>
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	6121      	str	r1, [r4, #16]
 8006f3a:	07d8      	lsls	r0, r3, #31
 8006f3c:	d5ea      	bpl.n	8006f14 <_printf_float+0x194>
 8006f3e:	1c4b      	adds	r3, r1, #1
 8006f40:	e7e7      	b.n	8006f12 <_printf_float+0x192>
 8006f42:	2900      	cmp	r1, #0
 8006f44:	bfd4      	ite	le
 8006f46:	f1c1 0202 	rsble	r2, r1, #2
 8006f4a:	2201      	movgt	r2, #1
 8006f4c:	4413      	add	r3, r2
 8006f4e:	e7e0      	b.n	8006f12 <_printf_float+0x192>
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	055a      	lsls	r2, r3, #21
 8006f54:	d407      	bmi.n	8006f66 <_printf_float+0x1e6>
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	4642      	mov	r2, r8
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b8      	blx	r7
 8006f60:	3001      	adds	r0, #1
 8006f62:	d12b      	bne.n	8006fbc <_printf_float+0x23c>
 8006f64:	e767      	b.n	8006e36 <_printf_float+0xb6>
 8006f66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f6a:	f240 80dd 	bls.w	8007128 <_printf_float+0x3a8>
 8006f6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f72:	2200      	movs	r2, #0
 8006f74:	2300      	movs	r3, #0
 8006f76:	f7f9 fdc7 	bl	8000b08 <__aeabi_dcmpeq>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d033      	beq.n	8006fe6 <_printf_float+0x266>
 8006f7e:	4a37      	ldr	r2, [pc, #220]	@ (800705c <_printf_float+0x2dc>)
 8006f80:	2301      	movs	r3, #1
 8006f82:	4631      	mov	r1, r6
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b8      	blx	r7
 8006f88:	3001      	adds	r0, #1
 8006f8a:	f43f af54 	beq.w	8006e36 <_printf_float+0xb6>
 8006f8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006f92:	4543      	cmp	r3, r8
 8006f94:	db02      	blt.n	8006f9c <_printf_float+0x21c>
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	07d8      	lsls	r0, r3, #31
 8006f9a:	d50f      	bpl.n	8006fbc <_printf_float+0x23c>
 8006f9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	47b8      	blx	r7
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	f43f af45 	beq.w	8006e36 <_printf_float+0xb6>
 8006fac:	f04f 0900 	mov.w	r9, #0
 8006fb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fb4:	f104 0a1a 	add.w	sl, r4, #26
 8006fb8:	45c8      	cmp	r8, r9
 8006fba:	dc09      	bgt.n	8006fd0 <_printf_float+0x250>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	079b      	lsls	r3, r3, #30
 8006fc0:	f100 8103 	bmi.w	80071ca <_printf_float+0x44a>
 8006fc4:	68e0      	ldr	r0, [r4, #12]
 8006fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fc8:	4298      	cmp	r0, r3
 8006fca:	bfb8      	it	lt
 8006fcc:	4618      	movlt	r0, r3
 8006fce:	e734      	b.n	8006e3a <_printf_float+0xba>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4652      	mov	r2, sl
 8006fd4:	4631      	mov	r1, r6
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	47b8      	blx	r7
 8006fda:	3001      	adds	r0, #1
 8006fdc:	f43f af2b 	beq.w	8006e36 <_printf_float+0xb6>
 8006fe0:	f109 0901 	add.w	r9, r9, #1
 8006fe4:	e7e8      	b.n	8006fb8 <_printf_float+0x238>
 8006fe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	dc39      	bgt.n	8007060 <_printf_float+0x2e0>
 8006fec:	4a1b      	ldr	r2, [pc, #108]	@ (800705c <_printf_float+0x2dc>)
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b8      	blx	r7
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	f43f af1d 	beq.w	8006e36 <_printf_float+0xb6>
 8006ffc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007000:	ea59 0303 	orrs.w	r3, r9, r3
 8007004:	d102      	bne.n	800700c <_printf_float+0x28c>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	07d9      	lsls	r1, r3, #31
 800700a:	d5d7      	bpl.n	8006fbc <_printf_float+0x23c>
 800700c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007010:	4631      	mov	r1, r6
 8007012:	4628      	mov	r0, r5
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	f43f af0d 	beq.w	8006e36 <_printf_float+0xb6>
 800701c:	f04f 0a00 	mov.w	sl, #0
 8007020:	f104 0b1a 	add.w	fp, r4, #26
 8007024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007026:	425b      	negs	r3, r3
 8007028:	4553      	cmp	r3, sl
 800702a:	dc01      	bgt.n	8007030 <_printf_float+0x2b0>
 800702c:	464b      	mov	r3, r9
 800702e:	e793      	b.n	8006f58 <_printf_float+0x1d8>
 8007030:	2301      	movs	r3, #1
 8007032:	465a      	mov	r2, fp
 8007034:	4631      	mov	r1, r6
 8007036:	4628      	mov	r0, r5
 8007038:	47b8      	blx	r7
 800703a:	3001      	adds	r0, #1
 800703c:	f43f aefb 	beq.w	8006e36 <_printf_float+0xb6>
 8007040:	f10a 0a01 	add.w	sl, sl, #1
 8007044:	e7ee      	b.n	8007024 <_printf_float+0x2a4>
 8007046:	bf00      	nop
 8007048:	7fefffff 	.word	0x7fefffff
 800704c:	0800b4ac 	.word	0x0800b4ac
 8007050:	0800b4b0 	.word	0x0800b4b0
 8007054:	0800b4b4 	.word	0x0800b4b4
 8007058:	0800b4b8 	.word	0x0800b4b8
 800705c:	0800b4bc 	.word	0x0800b4bc
 8007060:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007062:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007066:	4553      	cmp	r3, sl
 8007068:	bfa8      	it	ge
 800706a:	4653      	movge	r3, sl
 800706c:	2b00      	cmp	r3, #0
 800706e:	4699      	mov	r9, r3
 8007070:	dc36      	bgt.n	80070e0 <_printf_float+0x360>
 8007072:	f04f 0b00 	mov.w	fp, #0
 8007076:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800707a:	f104 021a 	add.w	r2, r4, #26
 800707e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007080:	9306      	str	r3, [sp, #24]
 8007082:	eba3 0309 	sub.w	r3, r3, r9
 8007086:	455b      	cmp	r3, fp
 8007088:	dc31      	bgt.n	80070ee <_printf_float+0x36e>
 800708a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708c:	459a      	cmp	sl, r3
 800708e:	dc3a      	bgt.n	8007106 <_printf_float+0x386>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	07da      	lsls	r2, r3, #31
 8007094:	d437      	bmi.n	8007106 <_printf_float+0x386>
 8007096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007098:	ebaa 0903 	sub.w	r9, sl, r3
 800709c:	9b06      	ldr	r3, [sp, #24]
 800709e:	ebaa 0303 	sub.w	r3, sl, r3
 80070a2:	4599      	cmp	r9, r3
 80070a4:	bfa8      	it	ge
 80070a6:	4699      	movge	r9, r3
 80070a8:	f1b9 0f00 	cmp.w	r9, #0
 80070ac:	dc33      	bgt.n	8007116 <_printf_float+0x396>
 80070ae:	f04f 0800 	mov.w	r8, #0
 80070b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070b6:	f104 0b1a 	add.w	fp, r4, #26
 80070ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070bc:	ebaa 0303 	sub.w	r3, sl, r3
 80070c0:	eba3 0309 	sub.w	r3, r3, r9
 80070c4:	4543      	cmp	r3, r8
 80070c6:	f77f af79 	ble.w	8006fbc <_printf_float+0x23c>
 80070ca:	2301      	movs	r3, #1
 80070cc:	465a      	mov	r2, fp
 80070ce:	4631      	mov	r1, r6
 80070d0:	4628      	mov	r0, r5
 80070d2:	47b8      	blx	r7
 80070d4:	3001      	adds	r0, #1
 80070d6:	f43f aeae 	beq.w	8006e36 <_printf_float+0xb6>
 80070da:	f108 0801 	add.w	r8, r8, #1
 80070de:	e7ec      	b.n	80070ba <_printf_float+0x33a>
 80070e0:	4642      	mov	r2, r8
 80070e2:	4631      	mov	r1, r6
 80070e4:	4628      	mov	r0, r5
 80070e6:	47b8      	blx	r7
 80070e8:	3001      	adds	r0, #1
 80070ea:	d1c2      	bne.n	8007072 <_printf_float+0x2f2>
 80070ec:	e6a3      	b.n	8006e36 <_printf_float+0xb6>
 80070ee:	2301      	movs	r3, #1
 80070f0:	4631      	mov	r1, r6
 80070f2:	4628      	mov	r0, r5
 80070f4:	9206      	str	r2, [sp, #24]
 80070f6:	47b8      	blx	r7
 80070f8:	3001      	adds	r0, #1
 80070fa:	f43f ae9c 	beq.w	8006e36 <_printf_float+0xb6>
 80070fe:	9a06      	ldr	r2, [sp, #24]
 8007100:	f10b 0b01 	add.w	fp, fp, #1
 8007104:	e7bb      	b.n	800707e <_printf_float+0x2fe>
 8007106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800710a:	4631      	mov	r1, r6
 800710c:	4628      	mov	r0, r5
 800710e:	47b8      	blx	r7
 8007110:	3001      	adds	r0, #1
 8007112:	d1c0      	bne.n	8007096 <_printf_float+0x316>
 8007114:	e68f      	b.n	8006e36 <_printf_float+0xb6>
 8007116:	9a06      	ldr	r2, [sp, #24]
 8007118:	464b      	mov	r3, r9
 800711a:	4442      	add	r2, r8
 800711c:	4631      	mov	r1, r6
 800711e:	4628      	mov	r0, r5
 8007120:	47b8      	blx	r7
 8007122:	3001      	adds	r0, #1
 8007124:	d1c3      	bne.n	80070ae <_printf_float+0x32e>
 8007126:	e686      	b.n	8006e36 <_printf_float+0xb6>
 8007128:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800712c:	f1ba 0f01 	cmp.w	sl, #1
 8007130:	dc01      	bgt.n	8007136 <_printf_float+0x3b6>
 8007132:	07db      	lsls	r3, r3, #31
 8007134:	d536      	bpl.n	80071a4 <_printf_float+0x424>
 8007136:	2301      	movs	r3, #1
 8007138:	4642      	mov	r2, r8
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	47b8      	blx	r7
 8007140:	3001      	adds	r0, #1
 8007142:	f43f ae78 	beq.w	8006e36 <_printf_float+0xb6>
 8007146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800714a:	4631      	mov	r1, r6
 800714c:	4628      	mov	r0, r5
 800714e:	47b8      	blx	r7
 8007150:	3001      	adds	r0, #1
 8007152:	f43f ae70 	beq.w	8006e36 <_printf_float+0xb6>
 8007156:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800715a:	2200      	movs	r2, #0
 800715c:	2300      	movs	r3, #0
 800715e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007162:	f7f9 fcd1 	bl	8000b08 <__aeabi_dcmpeq>
 8007166:	b9c0      	cbnz	r0, 800719a <_printf_float+0x41a>
 8007168:	4653      	mov	r3, sl
 800716a:	f108 0201 	add.w	r2, r8, #1
 800716e:	4631      	mov	r1, r6
 8007170:	4628      	mov	r0, r5
 8007172:	47b8      	blx	r7
 8007174:	3001      	adds	r0, #1
 8007176:	d10c      	bne.n	8007192 <_printf_float+0x412>
 8007178:	e65d      	b.n	8006e36 <_printf_float+0xb6>
 800717a:	2301      	movs	r3, #1
 800717c:	465a      	mov	r2, fp
 800717e:	4631      	mov	r1, r6
 8007180:	4628      	mov	r0, r5
 8007182:	47b8      	blx	r7
 8007184:	3001      	adds	r0, #1
 8007186:	f43f ae56 	beq.w	8006e36 <_printf_float+0xb6>
 800718a:	f108 0801 	add.w	r8, r8, #1
 800718e:	45d0      	cmp	r8, sl
 8007190:	dbf3      	blt.n	800717a <_printf_float+0x3fa>
 8007192:	464b      	mov	r3, r9
 8007194:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007198:	e6df      	b.n	8006f5a <_printf_float+0x1da>
 800719a:	f04f 0800 	mov.w	r8, #0
 800719e:	f104 0b1a 	add.w	fp, r4, #26
 80071a2:	e7f4      	b.n	800718e <_printf_float+0x40e>
 80071a4:	2301      	movs	r3, #1
 80071a6:	4642      	mov	r2, r8
 80071a8:	e7e1      	b.n	800716e <_printf_float+0x3ee>
 80071aa:	2301      	movs	r3, #1
 80071ac:	464a      	mov	r2, r9
 80071ae:	4631      	mov	r1, r6
 80071b0:	4628      	mov	r0, r5
 80071b2:	47b8      	blx	r7
 80071b4:	3001      	adds	r0, #1
 80071b6:	f43f ae3e 	beq.w	8006e36 <_printf_float+0xb6>
 80071ba:	f108 0801 	add.w	r8, r8, #1
 80071be:	68e3      	ldr	r3, [r4, #12]
 80071c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071c2:	1a5b      	subs	r3, r3, r1
 80071c4:	4543      	cmp	r3, r8
 80071c6:	dcf0      	bgt.n	80071aa <_printf_float+0x42a>
 80071c8:	e6fc      	b.n	8006fc4 <_printf_float+0x244>
 80071ca:	f04f 0800 	mov.w	r8, #0
 80071ce:	f104 0919 	add.w	r9, r4, #25
 80071d2:	e7f4      	b.n	80071be <_printf_float+0x43e>

080071d4 <_printf_common>:
 80071d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d8:	4616      	mov	r6, r2
 80071da:	4698      	mov	r8, r3
 80071dc:	688a      	ldr	r2, [r1, #8]
 80071de:	690b      	ldr	r3, [r1, #16]
 80071e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071e4:	4293      	cmp	r3, r2
 80071e6:	bfb8      	it	lt
 80071e8:	4613      	movlt	r3, r2
 80071ea:	6033      	str	r3, [r6, #0]
 80071ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071f0:	4607      	mov	r7, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	b10a      	cbz	r2, 80071fa <_printf_common+0x26>
 80071f6:	3301      	adds	r3, #1
 80071f8:	6033      	str	r3, [r6, #0]
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	0699      	lsls	r1, r3, #26
 80071fe:	bf42      	ittt	mi
 8007200:	6833      	ldrmi	r3, [r6, #0]
 8007202:	3302      	addmi	r3, #2
 8007204:	6033      	strmi	r3, [r6, #0]
 8007206:	6825      	ldr	r5, [r4, #0]
 8007208:	f015 0506 	ands.w	r5, r5, #6
 800720c:	d106      	bne.n	800721c <_printf_common+0x48>
 800720e:	f104 0a19 	add.w	sl, r4, #25
 8007212:	68e3      	ldr	r3, [r4, #12]
 8007214:	6832      	ldr	r2, [r6, #0]
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	42ab      	cmp	r3, r5
 800721a:	dc26      	bgt.n	800726a <_printf_common+0x96>
 800721c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007220:	6822      	ldr	r2, [r4, #0]
 8007222:	3b00      	subs	r3, #0
 8007224:	bf18      	it	ne
 8007226:	2301      	movne	r3, #1
 8007228:	0692      	lsls	r2, r2, #26
 800722a:	d42b      	bmi.n	8007284 <_printf_common+0xb0>
 800722c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007230:	4641      	mov	r1, r8
 8007232:	4638      	mov	r0, r7
 8007234:	47c8      	blx	r9
 8007236:	3001      	adds	r0, #1
 8007238:	d01e      	beq.n	8007278 <_printf_common+0xa4>
 800723a:	6823      	ldr	r3, [r4, #0]
 800723c:	6922      	ldr	r2, [r4, #16]
 800723e:	f003 0306 	and.w	r3, r3, #6
 8007242:	2b04      	cmp	r3, #4
 8007244:	bf02      	ittt	eq
 8007246:	68e5      	ldreq	r5, [r4, #12]
 8007248:	6833      	ldreq	r3, [r6, #0]
 800724a:	1aed      	subeq	r5, r5, r3
 800724c:	68a3      	ldr	r3, [r4, #8]
 800724e:	bf0c      	ite	eq
 8007250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007254:	2500      	movne	r5, #0
 8007256:	4293      	cmp	r3, r2
 8007258:	bfc4      	itt	gt
 800725a:	1a9b      	subgt	r3, r3, r2
 800725c:	18ed      	addgt	r5, r5, r3
 800725e:	2600      	movs	r6, #0
 8007260:	341a      	adds	r4, #26
 8007262:	42b5      	cmp	r5, r6
 8007264:	d11a      	bne.n	800729c <_printf_common+0xc8>
 8007266:	2000      	movs	r0, #0
 8007268:	e008      	b.n	800727c <_printf_common+0xa8>
 800726a:	2301      	movs	r3, #1
 800726c:	4652      	mov	r2, sl
 800726e:	4641      	mov	r1, r8
 8007270:	4638      	mov	r0, r7
 8007272:	47c8      	blx	r9
 8007274:	3001      	adds	r0, #1
 8007276:	d103      	bne.n	8007280 <_printf_common+0xac>
 8007278:	f04f 30ff 	mov.w	r0, #4294967295
 800727c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007280:	3501      	adds	r5, #1
 8007282:	e7c6      	b.n	8007212 <_printf_common+0x3e>
 8007284:	18e1      	adds	r1, r4, r3
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	2030      	movs	r0, #48	@ 0x30
 800728a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800728e:	4422      	add	r2, r4
 8007290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007294:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007298:	3302      	adds	r3, #2
 800729a:	e7c7      	b.n	800722c <_printf_common+0x58>
 800729c:	2301      	movs	r3, #1
 800729e:	4622      	mov	r2, r4
 80072a0:	4641      	mov	r1, r8
 80072a2:	4638      	mov	r0, r7
 80072a4:	47c8      	blx	r9
 80072a6:	3001      	adds	r0, #1
 80072a8:	d0e6      	beq.n	8007278 <_printf_common+0xa4>
 80072aa:	3601      	adds	r6, #1
 80072ac:	e7d9      	b.n	8007262 <_printf_common+0x8e>
	...

080072b0 <_printf_i>:
 80072b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072b4:	7e0f      	ldrb	r7, [r1, #24]
 80072b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072b8:	2f78      	cmp	r7, #120	@ 0x78
 80072ba:	4691      	mov	r9, r2
 80072bc:	4680      	mov	r8, r0
 80072be:	460c      	mov	r4, r1
 80072c0:	469a      	mov	sl, r3
 80072c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072c6:	d807      	bhi.n	80072d8 <_printf_i+0x28>
 80072c8:	2f62      	cmp	r7, #98	@ 0x62
 80072ca:	d80a      	bhi.n	80072e2 <_printf_i+0x32>
 80072cc:	2f00      	cmp	r7, #0
 80072ce:	f000 80d2 	beq.w	8007476 <_printf_i+0x1c6>
 80072d2:	2f58      	cmp	r7, #88	@ 0x58
 80072d4:	f000 80b9 	beq.w	800744a <_printf_i+0x19a>
 80072d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072e0:	e03a      	b.n	8007358 <_printf_i+0xa8>
 80072e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072e6:	2b15      	cmp	r3, #21
 80072e8:	d8f6      	bhi.n	80072d8 <_printf_i+0x28>
 80072ea:	a101      	add	r1, pc, #4	@ (adr r1, 80072f0 <_printf_i+0x40>)
 80072ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072f0:	08007349 	.word	0x08007349
 80072f4:	0800735d 	.word	0x0800735d
 80072f8:	080072d9 	.word	0x080072d9
 80072fc:	080072d9 	.word	0x080072d9
 8007300:	080072d9 	.word	0x080072d9
 8007304:	080072d9 	.word	0x080072d9
 8007308:	0800735d 	.word	0x0800735d
 800730c:	080072d9 	.word	0x080072d9
 8007310:	080072d9 	.word	0x080072d9
 8007314:	080072d9 	.word	0x080072d9
 8007318:	080072d9 	.word	0x080072d9
 800731c:	0800745d 	.word	0x0800745d
 8007320:	08007387 	.word	0x08007387
 8007324:	08007417 	.word	0x08007417
 8007328:	080072d9 	.word	0x080072d9
 800732c:	080072d9 	.word	0x080072d9
 8007330:	0800747f 	.word	0x0800747f
 8007334:	080072d9 	.word	0x080072d9
 8007338:	08007387 	.word	0x08007387
 800733c:	080072d9 	.word	0x080072d9
 8007340:	080072d9 	.word	0x080072d9
 8007344:	0800741f 	.word	0x0800741f
 8007348:	6833      	ldr	r3, [r6, #0]
 800734a:	1d1a      	adds	r2, r3, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6032      	str	r2, [r6, #0]
 8007350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007354:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007358:	2301      	movs	r3, #1
 800735a:	e09d      	b.n	8007498 <_printf_i+0x1e8>
 800735c:	6833      	ldr	r3, [r6, #0]
 800735e:	6820      	ldr	r0, [r4, #0]
 8007360:	1d19      	adds	r1, r3, #4
 8007362:	6031      	str	r1, [r6, #0]
 8007364:	0606      	lsls	r6, r0, #24
 8007366:	d501      	bpl.n	800736c <_printf_i+0xbc>
 8007368:	681d      	ldr	r5, [r3, #0]
 800736a:	e003      	b.n	8007374 <_printf_i+0xc4>
 800736c:	0645      	lsls	r5, r0, #25
 800736e:	d5fb      	bpl.n	8007368 <_printf_i+0xb8>
 8007370:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007374:	2d00      	cmp	r5, #0
 8007376:	da03      	bge.n	8007380 <_printf_i+0xd0>
 8007378:	232d      	movs	r3, #45	@ 0x2d
 800737a:	426d      	negs	r5, r5
 800737c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007380:	4859      	ldr	r0, [pc, #356]	@ (80074e8 <_printf_i+0x238>)
 8007382:	230a      	movs	r3, #10
 8007384:	e011      	b.n	80073aa <_printf_i+0xfa>
 8007386:	6821      	ldr	r1, [r4, #0]
 8007388:	6833      	ldr	r3, [r6, #0]
 800738a:	0608      	lsls	r0, r1, #24
 800738c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007390:	d402      	bmi.n	8007398 <_printf_i+0xe8>
 8007392:	0649      	lsls	r1, r1, #25
 8007394:	bf48      	it	mi
 8007396:	b2ad      	uxthmi	r5, r5
 8007398:	2f6f      	cmp	r7, #111	@ 0x6f
 800739a:	4853      	ldr	r0, [pc, #332]	@ (80074e8 <_printf_i+0x238>)
 800739c:	6033      	str	r3, [r6, #0]
 800739e:	bf14      	ite	ne
 80073a0:	230a      	movne	r3, #10
 80073a2:	2308      	moveq	r3, #8
 80073a4:	2100      	movs	r1, #0
 80073a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073aa:	6866      	ldr	r6, [r4, #4]
 80073ac:	60a6      	str	r6, [r4, #8]
 80073ae:	2e00      	cmp	r6, #0
 80073b0:	bfa2      	ittt	ge
 80073b2:	6821      	ldrge	r1, [r4, #0]
 80073b4:	f021 0104 	bicge.w	r1, r1, #4
 80073b8:	6021      	strge	r1, [r4, #0]
 80073ba:	b90d      	cbnz	r5, 80073c0 <_printf_i+0x110>
 80073bc:	2e00      	cmp	r6, #0
 80073be:	d04b      	beq.n	8007458 <_printf_i+0x1a8>
 80073c0:	4616      	mov	r6, r2
 80073c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80073c6:	fb03 5711 	mls	r7, r3, r1, r5
 80073ca:	5dc7      	ldrb	r7, [r0, r7]
 80073cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073d0:	462f      	mov	r7, r5
 80073d2:	42bb      	cmp	r3, r7
 80073d4:	460d      	mov	r5, r1
 80073d6:	d9f4      	bls.n	80073c2 <_printf_i+0x112>
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d10b      	bne.n	80073f4 <_printf_i+0x144>
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	07df      	lsls	r7, r3, #31
 80073e0:	d508      	bpl.n	80073f4 <_printf_i+0x144>
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	6861      	ldr	r1, [r4, #4]
 80073e6:	4299      	cmp	r1, r3
 80073e8:	bfde      	ittt	le
 80073ea:	2330      	movle	r3, #48	@ 0x30
 80073ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073f4:	1b92      	subs	r2, r2, r6
 80073f6:	6122      	str	r2, [r4, #16]
 80073f8:	f8cd a000 	str.w	sl, [sp]
 80073fc:	464b      	mov	r3, r9
 80073fe:	aa03      	add	r2, sp, #12
 8007400:	4621      	mov	r1, r4
 8007402:	4640      	mov	r0, r8
 8007404:	f7ff fee6 	bl	80071d4 <_printf_common>
 8007408:	3001      	adds	r0, #1
 800740a:	d14a      	bne.n	80074a2 <_printf_i+0x1f2>
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
 8007410:	b004      	add	sp, #16
 8007412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	f043 0320 	orr.w	r3, r3, #32
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	4833      	ldr	r0, [pc, #204]	@ (80074ec <_printf_i+0x23c>)
 8007420:	2778      	movs	r7, #120	@ 0x78
 8007422:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	6831      	ldr	r1, [r6, #0]
 800742a:	061f      	lsls	r7, r3, #24
 800742c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007430:	d402      	bmi.n	8007438 <_printf_i+0x188>
 8007432:	065f      	lsls	r7, r3, #25
 8007434:	bf48      	it	mi
 8007436:	b2ad      	uxthmi	r5, r5
 8007438:	6031      	str	r1, [r6, #0]
 800743a:	07d9      	lsls	r1, r3, #31
 800743c:	bf44      	itt	mi
 800743e:	f043 0320 	orrmi.w	r3, r3, #32
 8007442:	6023      	strmi	r3, [r4, #0]
 8007444:	b11d      	cbz	r5, 800744e <_printf_i+0x19e>
 8007446:	2310      	movs	r3, #16
 8007448:	e7ac      	b.n	80073a4 <_printf_i+0xf4>
 800744a:	4827      	ldr	r0, [pc, #156]	@ (80074e8 <_printf_i+0x238>)
 800744c:	e7e9      	b.n	8007422 <_printf_i+0x172>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	f023 0320 	bic.w	r3, r3, #32
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	e7f6      	b.n	8007446 <_printf_i+0x196>
 8007458:	4616      	mov	r6, r2
 800745a:	e7bd      	b.n	80073d8 <_printf_i+0x128>
 800745c:	6833      	ldr	r3, [r6, #0]
 800745e:	6825      	ldr	r5, [r4, #0]
 8007460:	6961      	ldr	r1, [r4, #20]
 8007462:	1d18      	adds	r0, r3, #4
 8007464:	6030      	str	r0, [r6, #0]
 8007466:	062e      	lsls	r6, r5, #24
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	d501      	bpl.n	8007470 <_printf_i+0x1c0>
 800746c:	6019      	str	r1, [r3, #0]
 800746e:	e002      	b.n	8007476 <_printf_i+0x1c6>
 8007470:	0668      	lsls	r0, r5, #25
 8007472:	d5fb      	bpl.n	800746c <_printf_i+0x1bc>
 8007474:	8019      	strh	r1, [r3, #0]
 8007476:	2300      	movs	r3, #0
 8007478:	6123      	str	r3, [r4, #16]
 800747a:	4616      	mov	r6, r2
 800747c:	e7bc      	b.n	80073f8 <_printf_i+0x148>
 800747e:	6833      	ldr	r3, [r6, #0]
 8007480:	1d1a      	adds	r2, r3, #4
 8007482:	6032      	str	r2, [r6, #0]
 8007484:	681e      	ldr	r6, [r3, #0]
 8007486:	6862      	ldr	r2, [r4, #4]
 8007488:	2100      	movs	r1, #0
 800748a:	4630      	mov	r0, r6
 800748c:	f7f8 fec0 	bl	8000210 <memchr>
 8007490:	b108      	cbz	r0, 8007496 <_printf_i+0x1e6>
 8007492:	1b80      	subs	r0, r0, r6
 8007494:	6060      	str	r0, [r4, #4]
 8007496:	6863      	ldr	r3, [r4, #4]
 8007498:	6123      	str	r3, [r4, #16]
 800749a:	2300      	movs	r3, #0
 800749c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074a0:	e7aa      	b.n	80073f8 <_printf_i+0x148>
 80074a2:	6923      	ldr	r3, [r4, #16]
 80074a4:	4632      	mov	r2, r6
 80074a6:	4649      	mov	r1, r9
 80074a8:	4640      	mov	r0, r8
 80074aa:	47d0      	blx	sl
 80074ac:	3001      	adds	r0, #1
 80074ae:	d0ad      	beq.n	800740c <_printf_i+0x15c>
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	079b      	lsls	r3, r3, #30
 80074b4:	d413      	bmi.n	80074de <_printf_i+0x22e>
 80074b6:	68e0      	ldr	r0, [r4, #12]
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	4298      	cmp	r0, r3
 80074bc:	bfb8      	it	lt
 80074be:	4618      	movlt	r0, r3
 80074c0:	e7a6      	b.n	8007410 <_printf_i+0x160>
 80074c2:	2301      	movs	r3, #1
 80074c4:	4632      	mov	r2, r6
 80074c6:	4649      	mov	r1, r9
 80074c8:	4640      	mov	r0, r8
 80074ca:	47d0      	blx	sl
 80074cc:	3001      	adds	r0, #1
 80074ce:	d09d      	beq.n	800740c <_printf_i+0x15c>
 80074d0:	3501      	adds	r5, #1
 80074d2:	68e3      	ldr	r3, [r4, #12]
 80074d4:	9903      	ldr	r1, [sp, #12]
 80074d6:	1a5b      	subs	r3, r3, r1
 80074d8:	42ab      	cmp	r3, r5
 80074da:	dcf2      	bgt.n	80074c2 <_printf_i+0x212>
 80074dc:	e7eb      	b.n	80074b6 <_printf_i+0x206>
 80074de:	2500      	movs	r5, #0
 80074e0:	f104 0619 	add.w	r6, r4, #25
 80074e4:	e7f5      	b.n	80074d2 <_printf_i+0x222>
 80074e6:	bf00      	nop
 80074e8:	0800b4be 	.word	0x0800b4be
 80074ec:	0800b4cf 	.word	0x0800b4cf

080074f0 <_scanf_float>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	b087      	sub	sp, #28
 80074f6:	4617      	mov	r7, r2
 80074f8:	9303      	str	r3, [sp, #12]
 80074fa:	688b      	ldr	r3, [r1, #8]
 80074fc:	1e5a      	subs	r2, r3, #1
 80074fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007502:	bf81      	itttt	hi
 8007504:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007508:	eb03 0b05 	addhi.w	fp, r3, r5
 800750c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007510:	608b      	strhi	r3, [r1, #8]
 8007512:	680b      	ldr	r3, [r1, #0]
 8007514:	460a      	mov	r2, r1
 8007516:	f04f 0500 	mov.w	r5, #0
 800751a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800751e:	f842 3b1c 	str.w	r3, [r2], #28
 8007522:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007526:	4680      	mov	r8, r0
 8007528:	460c      	mov	r4, r1
 800752a:	bf98      	it	ls
 800752c:	f04f 0b00 	movls.w	fp, #0
 8007530:	9201      	str	r2, [sp, #4]
 8007532:	4616      	mov	r6, r2
 8007534:	46aa      	mov	sl, r5
 8007536:	46a9      	mov	r9, r5
 8007538:	9502      	str	r5, [sp, #8]
 800753a:	68a2      	ldr	r2, [r4, #8]
 800753c:	b152      	cbz	r2, 8007554 <_scanf_float+0x64>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b4e      	cmp	r3, #78	@ 0x4e
 8007544:	d864      	bhi.n	8007610 <_scanf_float+0x120>
 8007546:	2b40      	cmp	r3, #64	@ 0x40
 8007548:	d83c      	bhi.n	80075c4 <_scanf_float+0xd4>
 800754a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800754e:	b2c8      	uxtb	r0, r1
 8007550:	280e      	cmp	r0, #14
 8007552:	d93a      	bls.n	80075ca <_scanf_float+0xda>
 8007554:	f1b9 0f00 	cmp.w	r9, #0
 8007558:	d003      	beq.n	8007562 <_scanf_float+0x72>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007566:	f1ba 0f01 	cmp.w	sl, #1
 800756a:	f200 8117 	bhi.w	800779c <_scanf_float+0x2ac>
 800756e:	9b01      	ldr	r3, [sp, #4]
 8007570:	429e      	cmp	r6, r3
 8007572:	f200 8108 	bhi.w	8007786 <_scanf_float+0x296>
 8007576:	2001      	movs	r0, #1
 8007578:	b007      	add	sp, #28
 800757a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800757e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007582:	2a0d      	cmp	r2, #13
 8007584:	d8e6      	bhi.n	8007554 <_scanf_float+0x64>
 8007586:	a101      	add	r1, pc, #4	@ (adr r1, 800758c <_scanf_float+0x9c>)
 8007588:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800758c:	080076d3 	.word	0x080076d3
 8007590:	08007555 	.word	0x08007555
 8007594:	08007555 	.word	0x08007555
 8007598:	08007555 	.word	0x08007555
 800759c:	08007733 	.word	0x08007733
 80075a0:	0800770b 	.word	0x0800770b
 80075a4:	08007555 	.word	0x08007555
 80075a8:	08007555 	.word	0x08007555
 80075ac:	080076e1 	.word	0x080076e1
 80075b0:	08007555 	.word	0x08007555
 80075b4:	08007555 	.word	0x08007555
 80075b8:	08007555 	.word	0x08007555
 80075bc:	08007555 	.word	0x08007555
 80075c0:	08007699 	.word	0x08007699
 80075c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80075c8:	e7db      	b.n	8007582 <_scanf_float+0x92>
 80075ca:	290e      	cmp	r1, #14
 80075cc:	d8c2      	bhi.n	8007554 <_scanf_float+0x64>
 80075ce:	a001      	add	r0, pc, #4	@ (adr r0, 80075d4 <_scanf_float+0xe4>)
 80075d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80075d4:	08007689 	.word	0x08007689
 80075d8:	08007555 	.word	0x08007555
 80075dc:	08007689 	.word	0x08007689
 80075e0:	0800771f 	.word	0x0800771f
 80075e4:	08007555 	.word	0x08007555
 80075e8:	08007631 	.word	0x08007631
 80075ec:	0800766f 	.word	0x0800766f
 80075f0:	0800766f 	.word	0x0800766f
 80075f4:	0800766f 	.word	0x0800766f
 80075f8:	0800766f 	.word	0x0800766f
 80075fc:	0800766f 	.word	0x0800766f
 8007600:	0800766f 	.word	0x0800766f
 8007604:	0800766f 	.word	0x0800766f
 8007608:	0800766f 	.word	0x0800766f
 800760c:	0800766f 	.word	0x0800766f
 8007610:	2b6e      	cmp	r3, #110	@ 0x6e
 8007612:	d809      	bhi.n	8007628 <_scanf_float+0x138>
 8007614:	2b60      	cmp	r3, #96	@ 0x60
 8007616:	d8b2      	bhi.n	800757e <_scanf_float+0x8e>
 8007618:	2b54      	cmp	r3, #84	@ 0x54
 800761a:	d07b      	beq.n	8007714 <_scanf_float+0x224>
 800761c:	2b59      	cmp	r3, #89	@ 0x59
 800761e:	d199      	bne.n	8007554 <_scanf_float+0x64>
 8007620:	2d07      	cmp	r5, #7
 8007622:	d197      	bne.n	8007554 <_scanf_float+0x64>
 8007624:	2508      	movs	r5, #8
 8007626:	e02c      	b.n	8007682 <_scanf_float+0x192>
 8007628:	2b74      	cmp	r3, #116	@ 0x74
 800762a:	d073      	beq.n	8007714 <_scanf_float+0x224>
 800762c:	2b79      	cmp	r3, #121	@ 0x79
 800762e:	e7f6      	b.n	800761e <_scanf_float+0x12e>
 8007630:	6821      	ldr	r1, [r4, #0]
 8007632:	05c8      	lsls	r0, r1, #23
 8007634:	d51b      	bpl.n	800766e <_scanf_float+0x17e>
 8007636:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800763a:	6021      	str	r1, [r4, #0]
 800763c:	f109 0901 	add.w	r9, r9, #1
 8007640:	f1bb 0f00 	cmp.w	fp, #0
 8007644:	d003      	beq.n	800764e <_scanf_float+0x15e>
 8007646:	3201      	adds	r2, #1
 8007648:	f10b 3bff 	add.w	fp, fp, #4294967295
 800764c:	60a2      	str	r2, [r4, #8]
 800764e:	68a3      	ldr	r3, [r4, #8]
 8007650:	3b01      	subs	r3, #1
 8007652:	60a3      	str	r3, [r4, #8]
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	3301      	adds	r3, #1
 8007658:	6123      	str	r3, [r4, #16]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3b01      	subs	r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	607b      	str	r3, [r7, #4]
 8007662:	f340 8087 	ble.w	8007774 <_scanf_float+0x284>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	e765      	b.n	800753a <_scanf_float+0x4a>
 800766e:	eb1a 0105 	adds.w	r1, sl, r5
 8007672:	f47f af6f 	bne.w	8007554 <_scanf_float+0x64>
 8007676:	6822      	ldr	r2, [r4, #0]
 8007678:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800767c:	6022      	str	r2, [r4, #0]
 800767e:	460d      	mov	r5, r1
 8007680:	468a      	mov	sl, r1
 8007682:	f806 3b01 	strb.w	r3, [r6], #1
 8007686:	e7e2      	b.n	800764e <_scanf_float+0x15e>
 8007688:	6822      	ldr	r2, [r4, #0]
 800768a:	0610      	lsls	r0, r2, #24
 800768c:	f57f af62 	bpl.w	8007554 <_scanf_float+0x64>
 8007690:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007694:	6022      	str	r2, [r4, #0]
 8007696:	e7f4      	b.n	8007682 <_scanf_float+0x192>
 8007698:	f1ba 0f00 	cmp.w	sl, #0
 800769c:	d10e      	bne.n	80076bc <_scanf_float+0x1cc>
 800769e:	f1b9 0f00 	cmp.w	r9, #0
 80076a2:	d10e      	bne.n	80076c2 <_scanf_float+0x1d2>
 80076a4:	6822      	ldr	r2, [r4, #0]
 80076a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80076aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80076ae:	d108      	bne.n	80076c2 <_scanf_float+0x1d2>
 80076b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80076b4:	6022      	str	r2, [r4, #0]
 80076b6:	f04f 0a01 	mov.w	sl, #1
 80076ba:	e7e2      	b.n	8007682 <_scanf_float+0x192>
 80076bc:	f1ba 0f02 	cmp.w	sl, #2
 80076c0:	d055      	beq.n	800776e <_scanf_float+0x27e>
 80076c2:	2d01      	cmp	r5, #1
 80076c4:	d002      	beq.n	80076cc <_scanf_float+0x1dc>
 80076c6:	2d04      	cmp	r5, #4
 80076c8:	f47f af44 	bne.w	8007554 <_scanf_float+0x64>
 80076cc:	3501      	adds	r5, #1
 80076ce:	b2ed      	uxtb	r5, r5
 80076d0:	e7d7      	b.n	8007682 <_scanf_float+0x192>
 80076d2:	f1ba 0f01 	cmp.w	sl, #1
 80076d6:	f47f af3d 	bne.w	8007554 <_scanf_float+0x64>
 80076da:	f04f 0a02 	mov.w	sl, #2
 80076de:	e7d0      	b.n	8007682 <_scanf_float+0x192>
 80076e0:	b97d      	cbnz	r5, 8007702 <_scanf_float+0x212>
 80076e2:	f1b9 0f00 	cmp.w	r9, #0
 80076e6:	f47f af38 	bne.w	800755a <_scanf_float+0x6a>
 80076ea:	6822      	ldr	r2, [r4, #0]
 80076ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80076f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80076f4:	f040 8108 	bne.w	8007908 <_scanf_float+0x418>
 80076f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80076fc:	6022      	str	r2, [r4, #0]
 80076fe:	2501      	movs	r5, #1
 8007700:	e7bf      	b.n	8007682 <_scanf_float+0x192>
 8007702:	2d03      	cmp	r5, #3
 8007704:	d0e2      	beq.n	80076cc <_scanf_float+0x1dc>
 8007706:	2d05      	cmp	r5, #5
 8007708:	e7de      	b.n	80076c8 <_scanf_float+0x1d8>
 800770a:	2d02      	cmp	r5, #2
 800770c:	f47f af22 	bne.w	8007554 <_scanf_float+0x64>
 8007710:	2503      	movs	r5, #3
 8007712:	e7b6      	b.n	8007682 <_scanf_float+0x192>
 8007714:	2d06      	cmp	r5, #6
 8007716:	f47f af1d 	bne.w	8007554 <_scanf_float+0x64>
 800771a:	2507      	movs	r5, #7
 800771c:	e7b1      	b.n	8007682 <_scanf_float+0x192>
 800771e:	6822      	ldr	r2, [r4, #0]
 8007720:	0591      	lsls	r1, r2, #22
 8007722:	f57f af17 	bpl.w	8007554 <_scanf_float+0x64>
 8007726:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800772a:	6022      	str	r2, [r4, #0]
 800772c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007730:	e7a7      	b.n	8007682 <_scanf_float+0x192>
 8007732:	6822      	ldr	r2, [r4, #0]
 8007734:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007738:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800773c:	d006      	beq.n	800774c <_scanf_float+0x25c>
 800773e:	0550      	lsls	r0, r2, #21
 8007740:	f57f af08 	bpl.w	8007554 <_scanf_float+0x64>
 8007744:	f1b9 0f00 	cmp.w	r9, #0
 8007748:	f000 80de 	beq.w	8007908 <_scanf_float+0x418>
 800774c:	0591      	lsls	r1, r2, #22
 800774e:	bf58      	it	pl
 8007750:	9902      	ldrpl	r1, [sp, #8]
 8007752:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007756:	bf58      	it	pl
 8007758:	eba9 0101 	subpl.w	r1, r9, r1
 800775c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007760:	bf58      	it	pl
 8007762:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007766:	6022      	str	r2, [r4, #0]
 8007768:	f04f 0900 	mov.w	r9, #0
 800776c:	e789      	b.n	8007682 <_scanf_float+0x192>
 800776e:	f04f 0a03 	mov.w	sl, #3
 8007772:	e786      	b.n	8007682 <_scanf_float+0x192>
 8007774:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007778:	4639      	mov	r1, r7
 800777a:	4640      	mov	r0, r8
 800777c:	4798      	blx	r3
 800777e:	2800      	cmp	r0, #0
 8007780:	f43f aedb 	beq.w	800753a <_scanf_float+0x4a>
 8007784:	e6e6      	b.n	8007554 <_scanf_float+0x64>
 8007786:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800778a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800778e:	463a      	mov	r2, r7
 8007790:	4640      	mov	r0, r8
 8007792:	4798      	blx	r3
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	3b01      	subs	r3, #1
 8007798:	6123      	str	r3, [r4, #16]
 800779a:	e6e8      	b.n	800756e <_scanf_float+0x7e>
 800779c:	1e6b      	subs	r3, r5, #1
 800779e:	2b06      	cmp	r3, #6
 80077a0:	d824      	bhi.n	80077ec <_scanf_float+0x2fc>
 80077a2:	2d02      	cmp	r5, #2
 80077a4:	d836      	bhi.n	8007814 <_scanf_float+0x324>
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	429e      	cmp	r6, r3
 80077aa:	f67f aee4 	bls.w	8007576 <_scanf_float+0x86>
 80077ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077b6:	463a      	mov	r2, r7
 80077b8:	4640      	mov	r0, r8
 80077ba:	4798      	blx	r3
 80077bc:	6923      	ldr	r3, [r4, #16]
 80077be:	3b01      	subs	r3, #1
 80077c0:	6123      	str	r3, [r4, #16]
 80077c2:	e7f0      	b.n	80077a6 <_scanf_float+0x2b6>
 80077c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077c8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80077cc:	463a      	mov	r2, r7
 80077ce:	4640      	mov	r0, r8
 80077d0:	4798      	blx	r3
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	6123      	str	r3, [r4, #16]
 80077d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077dc:	fa5f fa8a 	uxtb.w	sl, sl
 80077e0:	f1ba 0f02 	cmp.w	sl, #2
 80077e4:	d1ee      	bne.n	80077c4 <_scanf_float+0x2d4>
 80077e6:	3d03      	subs	r5, #3
 80077e8:	b2ed      	uxtb	r5, r5
 80077ea:	1b76      	subs	r6, r6, r5
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	05da      	lsls	r2, r3, #23
 80077f0:	d530      	bpl.n	8007854 <_scanf_float+0x364>
 80077f2:	055b      	lsls	r3, r3, #21
 80077f4:	d511      	bpl.n	800781a <_scanf_float+0x32a>
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	429e      	cmp	r6, r3
 80077fa:	f67f aebc 	bls.w	8007576 <_scanf_float+0x86>
 80077fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007802:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007806:	463a      	mov	r2, r7
 8007808:	4640      	mov	r0, r8
 800780a:	4798      	blx	r3
 800780c:	6923      	ldr	r3, [r4, #16]
 800780e:	3b01      	subs	r3, #1
 8007810:	6123      	str	r3, [r4, #16]
 8007812:	e7f0      	b.n	80077f6 <_scanf_float+0x306>
 8007814:	46aa      	mov	sl, r5
 8007816:	46b3      	mov	fp, r6
 8007818:	e7de      	b.n	80077d8 <_scanf_float+0x2e8>
 800781a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800781e:	6923      	ldr	r3, [r4, #16]
 8007820:	2965      	cmp	r1, #101	@ 0x65
 8007822:	f103 33ff 	add.w	r3, r3, #4294967295
 8007826:	f106 35ff 	add.w	r5, r6, #4294967295
 800782a:	6123      	str	r3, [r4, #16]
 800782c:	d00c      	beq.n	8007848 <_scanf_float+0x358>
 800782e:	2945      	cmp	r1, #69	@ 0x45
 8007830:	d00a      	beq.n	8007848 <_scanf_float+0x358>
 8007832:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007836:	463a      	mov	r2, r7
 8007838:	4640      	mov	r0, r8
 800783a:	4798      	blx	r3
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007842:	3b01      	subs	r3, #1
 8007844:	1eb5      	subs	r5, r6, #2
 8007846:	6123      	str	r3, [r4, #16]
 8007848:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800784c:	463a      	mov	r2, r7
 800784e:	4640      	mov	r0, r8
 8007850:	4798      	blx	r3
 8007852:	462e      	mov	r6, r5
 8007854:	6822      	ldr	r2, [r4, #0]
 8007856:	f012 0210 	ands.w	r2, r2, #16
 800785a:	d001      	beq.n	8007860 <_scanf_float+0x370>
 800785c:	2000      	movs	r0, #0
 800785e:	e68b      	b.n	8007578 <_scanf_float+0x88>
 8007860:	7032      	strb	r2, [r6, #0]
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800786c:	d11c      	bne.n	80078a8 <_scanf_float+0x3b8>
 800786e:	9b02      	ldr	r3, [sp, #8]
 8007870:	454b      	cmp	r3, r9
 8007872:	eba3 0209 	sub.w	r2, r3, r9
 8007876:	d123      	bne.n	80078c0 <_scanf_float+0x3d0>
 8007878:	9901      	ldr	r1, [sp, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	4640      	mov	r0, r8
 800787e:	f002 fcfb 	bl	800a278 <_strtod_r>
 8007882:	9b03      	ldr	r3, [sp, #12]
 8007884:	6821      	ldr	r1, [r4, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f011 0f02 	tst.w	r1, #2
 800788c:	ec57 6b10 	vmov	r6, r7, d0
 8007890:	f103 0204 	add.w	r2, r3, #4
 8007894:	d01f      	beq.n	80078d6 <_scanf_float+0x3e6>
 8007896:	9903      	ldr	r1, [sp, #12]
 8007898:	600a      	str	r2, [r1, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	e9c3 6700 	strd	r6, r7, [r3]
 80078a0:	68e3      	ldr	r3, [r4, #12]
 80078a2:	3301      	adds	r3, #1
 80078a4:	60e3      	str	r3, [r4, #12]
 80078a6:	e7d9      	b.n	800785c <_scanf_float+0x36c>
 80078a8:	9b04      	ldr	r3, [sp, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0e4      	beq.n	8007878 <_scanf_float+0x388>
 80078ae:	9905      	ldr	r1, [sp, #20]
 80078b0:	230a      	movs	r3, #10
 80078b2:	3101      	adds	r1, #1
 80078b4:	4640      	mov	r0, r8
 80078b6:	f002 fd5f 	bl	800a378 <_strtol_r>
 80078ba:	9b04      	ldr	r3, [sp, #16]
 80078bc:	9e05      	ldr	r6, [sp, #20]
 80078be:	1ac2      	subs	r2, r0, r3
 80078c0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80078c4:	429e      	cmp	r6, r3
 80078c6:	bf28      	it	cs
 80078c8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80078cc:	4910      	ldr	r1, [pc, #64]	@ (8007910 <_scanf_float+0x420>)
 80078ce:	4630      	mov	r0, r6
 80078d0:	f000 f954 	bl	8007b7c <siprintf>
 80078d4:	e7d0      	b.n	8007878 <_scanf_float+0x388>
 80078d6:	f011 0f04 	tst.w	r1, #4
 80078da:	9903      	ldr	r1, [sp, #12]
 80078dc:	600a      	str	r2, [r1, #0]
 80078de:	d1dc      	bne.n	800789a <_scanf_float+0x3aa>
 80078e0:	681d      	ldr	r5, [r3, #0]
 80078e2:	4632      	mov	r2, r6
 80078e4:	463b      	mov	r3, r7
 80078e6:	4630      	mov	r0, r6
 80078e8:	4639      	mov	r1, r7
 80078ea:	f7f9 f93f 	bl	8000b6c <__aeabi_dcmpun>
 80078ee:	b128      	cbz	r0, 80078fc <_scanf_float+0x40c>
 80078f0:	4808      	ldr	r0, [pc, #32]	@ (8007914 <_scanf_float+0x424>)
 80078f2:	f000 fabb 	bl	8007e6c <nanf>
 80078f6:	ed85 0a00 	vstr	s0, [r5]
 80078fa:	e7d1      	b.n	80078a0 <_scanf_float+0x3b0>
 80078fc:	4630      	mov	r0, r6
 80078fe:	4639      	mov	r1, r7
 8007900:	f7f9 f992 	bl	8000c28 <__aeabi_d2f>
 8007904:	6028      	str	r0, [r5, #0]
 8007906:	e7cb      	b.n	80078a0 <_scanf_float+0x3b0>
 8007908:	f04f 0900 	mov.w	r9, #0
 800790c:	e629      	b.n	8007562 <_scanf_float+0x72>
 800790e:	bf00      	nop
 8007910:	0800b4e0 	.word	0x0800b4e0
 8007914:	0800b875 	.word	0x0800b875

08007918 <std>:
 8007918:	2300      	movs	r3, #0
 800791a:	b510      	push	{r4, lr}
 800791c:	4604      	mov	r4, r0
 800791e:	e9c0 3300 	strd	r3, r3, [r0]
 8007922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007926:	6083      	str	r3, [r0, #8]
 8007928:	8181      	strh	r1, [r0, #12]
 800792a:	6643      	str	r3, [r0, #100]	@ 0x64
 800792c:	81c2      	strh	r2, [r0, #14]
 800792e:	6183      	str	r3, [r0, #24]
 8007930:	4619      	mov	r1, r3
 8007932:	2208      	movs	r2, #8
 8007934:	305c      	adds	r0, #92	@ 0x5c
 8007936:	f000 fa19 	bl	8007d6c <memset>
 800793a:	4b0d      	ldr	r3, [pc, #52]	@ (8007970 <std+0x58>)
 800793c:	6263      	str	r3, [r4, #36]	@ 0x24
 800793e:	4b0d      	ldr	r3, [pc, #52]	@ (8007974 <std+0x5c>)
 8007940:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007942:	4b0d      	ldr	r3, [pc, #52]	@ (8007978 <std+0x60>)
 8007944:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007946:	4b0d      	ldr	r3, [pc, #52]	@ (800797c <std+0x64>)
 8007948:	6323      	str	r3, [r4, #48]	@ 0x30
 800794a:	4b0d      	ldr	r3, [pc, #52]	@ (8007980 <std+0x68>)
 800794c:	6224      	str	r4, [r4, #32]
 800794e:	429c      	cmp	r4, r3
 8007950:	d006      	beq.n	8007960 <std+0x48>
 8007952:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007956:	4294      	cmp	r4, r2
 8007958:	d002      	beq.n	8007960 <std+0x48>
 800795a:	33d0      	adds	r3, #208	@ 0xd0
 800795c:	429c      	cmp	r4, r3
 800795e:	d105      	bne.n	800796c <std+0x54>
 8007960:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007968:	f000 ba7c 	b.w	8007e64 <__retarget_lock_init_recursive>
 800796c:	bd10      	pop	{r4, pc}
 800796e:	bf00      	nop
 8007970:	08007bbd 	.word	0x08007bbd
 8007974:	08007bdf 	.word	0x08007bdf
 8007978:	08007c17 	.word	0x08007c17
 800797c:	08007c3b 	.word	0x08007c3b
 8007980:	20000570 	.word	0x20000570

08007984 <stdio_exit_handler>:
 8007984:	4a02      	ldr	r2, [pc, #8]	@ (8007990 <stdio_exit_handler+0xc>)
 8007986:	4903      	ldr	r1, [pc, #12]	@ (8007994 <stdio_exit_handler+0x10>)
 8007988:	4803      	ldr	r0, [pc, #12]	@ (8007998 <stdio_exit_handler+0x14>)
 800798a:	f000 b869 	b.w	8007a60 <_fwalk_sglue>
 800798e:	bf00      	nop
 8007990:	20000020 	.word	0x20000020
 8007994:	0800a9b9 	.word	0x0800a9b9
 8007998:	20000030 	.word	0x20000030

0800799c <cleanup_stdio>:
 800799c:	6841      	ldr	r1, [r0, #4]
 800799e:	4b0c      	ldr	r3, [pc, #48]	@ (80079d0 <cleanup_stdio+0x34>)
 80079a0:	4299      	cmp	r1, r3
 80079a2:	b510      	push	{r4, lr}
 80079a4:	4604      	mov	r4, r0
 80079a6:	d001      	beq.n	80079ac <cleanup_stdio+0x10>
 80079a8:	f003 f806 	bl	800a9b8 <_fflush_r>
 80079ac:	68a1      	ldr	r1, [r4, #8]
 80079ae:	4b09      	ldr	r3, [pc, #36]	@ (80079d4 <cleanup_stdio+0x38>)
 80079b0:	4299      	cmp	r1, r3
 80079b2:	d002      	beq.n	80079ba <cleanup_stdio+0x1e>
 80079b4:	4620      	mov	r0, r4
 80079b6:	f002 ffff 	bl	800a9b8 <_fflush_r>
 80079ba:	68e1      	ldr	r1, [r4, #12]
 80079bc:	4b06      	ldr	r3, [pc, #24]	@ (80079d8 <cleanup_stdio+0x3c>)
 80079be:	4299      	cmp	r1, r3
 80079c0:	d004      	beq.n	80079cc <cleanup_stdio+0x30>
 80079c2:	4620      	mov	r0, r4
 80079c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c8:	f002 bff6 	b.w	800a9b8 <_fflush_r>
 80079cc:	bd10      	pop	{r4, pc}
 80079ce:	bf00      	nop
 80079d0:	20000570 	.word	0x20000570
 80079d4:	200005d8 	.word	0x200005d8
 80079d8:	20000640 	.word	0x20000640

080079dc <global_stdio_init.part.0>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	4b0b      	ldr	r3, [pc, #44]	@ (8007a0c <global_stdio_init.part.0+0x30>)
 80079e0:	4c0b      	ldr	r4, [pc, #44]	@ (8007a10 <global_stdio_init.part.0+0x34>)
 80079e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007a14 <global_stdio_init.part.0+0x38>)
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	4620      	mov	r0, r4
 80079e8:	2200      	movs	r2, #0
 80079ea:	2104      	movs	r1, #4
 80079ec:	f7ff ff94 	bl	8007918 <std>
 80079f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079f4:	2201      	movs	r2, #1
 80079f6:	2109      	movs	r1, #9
 80079f8:	f7ff ff8e 	bl	8007918 <std>
 80079fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a00:	2202      	movs	r2, #2
 8007a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a06:	2112      	movs	r1, #18
 8007a08:	f7ff bf86 	b.w	8007918 <std>
 8007a0c:	200006a8 	.word	0x200006a8
 8007a10:	20000570 	.word	0x20000570
 8007a14:	08007985 	.word	0x08007985

08007a18 <__sfp_lock_acquire>:
 8007a18:	4801      	ldr	r0, [pc, #4]	@ (8007a20 <__sfp_lock_acquire+0x8>)
 8007a1a:	f000 ba24 	b.w	8007e66 <__retarget_lock_acquire_recursive>
 8007a1e:	bf00      	nop
 8007a20:	200006b1 	.word	0x200006b1

08007a24 <__sfp_lock_release>:
 8007a24:	4801      	ldr	r0, [pc, #4]	@ (8007a2c <__sfp_lock_release+0x8>)
 8007a26:	f000 ba1f 	b.w	8007e68 <__retarget_lock_release_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	200006b1 	.word	0x200006b1

08007a30 <__sinit>:
 8007a30:	b510      	push	{r4, lr}
 8007a32:	4604      	mov	r4, r0
 8007a34:	f7ff fff0 	bl	8007a18 <__sfp_lock_acquire>
 8007a38:	6a23      	ldr	r3, [r4, #32]
 8007a3a:	b11b      	cbz	r3, 8007a44 <__sinit+0x14>
 8007a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a40:	f7ff bff0 	b.w	8007a24 <__sfp_lock_release>
 8007a44:	4b04      	ldr	r3, [pc, #16]	@ (8007a58 <__sinit+0x28>)
 8007a46:	6223      	str	r3, [r4, #32]
 8007a48:	4b04      	ldr	r3, [pc, #16]	@ (8007a5c <__sinit+0x2c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1f5      	bne.n	8007a3c <__sinit+0xc>
 8007a50:	f7ff ffc4 	bl	80079dc <global_stdio_init.part.0>
 8007a54:	e7f2      	b.n	8007a3c <__sinit+0xc>
 8007a56:	bf00      	nop
 8007a58:	0800799d 	.word	0x0800799d
 8007a5c:	200006a8 	.word	0x200006a8

08007a60 <_fwalk_sglue>:
 8007a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a64:	4607      	mov	r7, r0
 8007a66:	4688      	mov	r8, r1
 8007a68:	4614      	mov	r4, r2
 8007a6a:	2600      	movs	r6, #0
 8007a6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a70:	f1b9 0901 	subs.w	r9, r9, #1
 8007a74:	d505      	bpl.n	8007a82 <_fwalk_sglue+0x22>
 8007a76:	6824      	ldr	r4, [r4, #0]
 8007a78:	2c00      	cmp	r4, #0
 8007a7a:	d1f7      	bne.n	8007a6c <_fwalk_sglue+0xc>
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a82:	89ab      	ldrh	r3, [r5, #12]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d907      	bls.n	8007a98 <_fwalk_sglue+0x38>
 8007a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	d003      	beq.n	8007a98 <_fwalk_sglue+0x38>
 8007a90:	4629      	mov	r1, r5
 8007a92:	4638      	mov	r0, r7
 8007a94:	47c0      	blx	r8
 8007a96:	4306      	orrs	r6, r0
 8007a98:	3568      	adds	r5, #104	@ 0x68
 8007a9a:	e7e9      	b.n	8007a70 <_fwalk_sglue+0x10>

08007a9c <iprintf>:
 8007a9c:	b40f      	push	{r0, r1, r2, r3}
 8007a9e:	b507      	push	{r0, r1, r2, lr}
 8007aa0:	4906      	ldr	r1, [pc, #24]	@ (8007abc <iprintf+0x20>)
 8007aa2:	ab04      	add	r3, sp, #16
 8007aa4:	6808      	ldr	r0, [r1, #0]
 8007aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aaa:	6881      	ldr	r1, [r0, #8]
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	f002 fde7 	bl	800a680 <_vfiprintf_r>
 8007ab2:	b003      	add	sp, #12
 8007ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ab8:	b004      	add	sp, #16
 8007aba:	4770      	bx	lr
 8007abc:	2000002c 	.word	0x2000002c

08007ac0 <_puts_r>:
 8007ac0:	6a03      	ldr	r3, [r0, #32]
 8007ac2:	b570      	push	{r4, r5, r6, lr}
 8007ac4:	6884      	ldr	r4, [r0, #8]
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	460e      	mov	r6, r1
 8007aca:	b90b      	cbnz	r3, 8007ad0 <_puts_r+0x10>
 8007acc:	f7ff ffb0 	bl	8007a30 <__sinit>
 8007ad0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ad2:	07db      	lsls	r3, r3, #31
 8007ad4:	d405      	bmi.n	8007ae2 <_puts_r+0x22>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	0598      	lsls	r0, r3, #22
 8007ada:	d402      	bmi.n	8007ae2 <_puts_r+0x22>
 8007adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ade:	f000 f9c2 	bl	8007e66 <__retarget_lock_acquire_recursive>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	0719      	lsls	r1, r3, #28
 8007ae6:	d502      	bpl.n	8007aee <_puts_r+0x2e>
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d135      	bne.n	8007b5a <_puts_r+0x9a>
 8007aee:	4621      	mov	r1, r4
 8007af0:	4628      	mov	r0, r5
 8007af2:	f000 f8e5 	bl	8007cc0 <__swsetup_r>
 8007af6:	b380      	cbz	r0, 8007b5a <_puts_r+0x9a>
 8007af8:	f04f 35ff 	mov.w	r5, #4294967295
 8007afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007afe:	07da      	lsls	r2, r3, #31
 8007b00:	d405      	bmi.n	8007b0e <_puts_r+0x4e>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	059b      	lsls	r3, r3, #22
 8007b06:	d402      	bmi.n	8007b0e <_puts_r+0x4e>
 8007b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b0a:	f000 f9ad 	bl	8007e68 <__retarget_lock_release_recursive>
 8007b0e:	4628      	mov	r0, r5
 8007b10:	bd70      	pop	{r4, r5, r6, pc}
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	da04      	bge.n	8007b20 <_puts_r+0x60>
 8007b16:	69a2      	ldr	r2, [r4, #24]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	dc17      	bgt.n	8007b4c <_puts_r+0x8c>
 8007b1c:	290a      	cmp	r1, #10
 8007b1e:	d015      	beq.n	8007b4c <_puts_r+0x8c>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	6022      	str	r2, [r4, #0]
 8007b26:	7019      	strb	r1, [r3, #0]
 8007b28:	68a3      	ldr	r3, [r4, #8]
 8007b2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	60a3      	str	r3, [r4, #8]
 8007b32:	2900      	cmp	r1, #0
 8007b34:	d1ed      	bne.n	8007b12 <_puts_r+0x52>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	da11      	bge.n	8007b5e <_puts_r+0x9e>
 8007b3a:	4622      	mov	r2, r4
 8007b3c:	210a      	movs	r1, #10
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f000 f87f 	bl	8007c42 <__swbuf_r>
 8007b44:	3001      	adds	r0, #1
 8007b46:	d0d7      	beq.n	8007af8 <_puts_r+0x38>
 8007b48:	250a      	movs	r5, #10
 8007b4a:	e7d7      	b.n	8007afc <_puts_r+0x3c>
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 f877 	bl	8007c42 <__swbuf_r>
 8007b54:	3001      	adds	r0, #1
 8007b56:	d1e7      	bne.n	8007b28 <_puts_r+0x68>
 8007b58:	e7ce      	b.n	8007af8 <_puts_r+0x38>
 8007b5a:	3e01      	subs	r6, #1
 8007b5c:	e7e4      	b.n	8007b28 <_puts_r+0x68>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	6022      	str	r2, [r4, #0]
 8007b64:	220a      	movs	r2, #10
 8007b66:	701a      	strb	r2, [r3, #0]
 8007b68:	e7ee      	b.n	8007b48 <_puts_r+0x88>
	...

08007b6c <puts>:
 8007b6c:	4b02      	ldr	r3, [pc, #8]	@ (8007b78 <puts+0xc>)
 8007b6e:	4601      	mov	r1, r0
 8007b70:	6818      	ldr	r0, [r3, #0]
 8007b72:	f7ff bfa5 	b.w	8007ac0 <_puts_r>
 8007b76:	bf00      	nop
 8007b78:	2000002c 	.word	0x2000002c

08007b7c <siprintf>:
 8007b7c:	b40e      	push	{r1, r2, r3}
 8007b7e:	b500      	push	{lr}
 8007b80:	b09c      	sub	sp, #112	@ 0x70
 8007b82:	ab1d      	add	r3, sp, #116	@ 0x74
 8007b84:	9002      	str	r0, [sp, #8]
 8007b86:	9006      	str	r0, [sp, #24]
 8007b88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007b8c:	4809      	ldr	r0, [pc, #36]	@ (8007bb4 <siprintf+0x38>)
 8007b8e:	9107      	str	r1, [sp, #28]
 8007b90:	9104      	str	r1, [sp, #16]
 8007b92:	4909      	ldr	r1, [pc, #36]	@ (8007bb8 <siprintf+0x3c>)
 8007b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b98:	9105      	str	r1, [sp, #20]
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	a902      	add	r1, sp, #8
 8007ba0:	f002 fc48 	bl	800a434 <_svfiprintf_r>
 8007ba4:	9b02      	ldr	r3, [sp, #8]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	b01c      	add	sp, #112	@ 0x70
 8007bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bb0:	b003      	add	sp, #12
 8007bb2:	4770      	bx	lr
 8007bb4:	2000002c 	.word	0x2000002c
 8007bb8:	ffff0208 	.word	0xffff0208

08007bbc <__sread>:
 8007bbc:	b510      	push	{r4, lr}
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc4:	f000 f900 	bl	8007dc8 <_read_r>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	bfab      	itete	ge
 8007bcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bce:	89a3      	ldrhlt	r3, [r4, #12]
 8007bd0:	181b      	addge	r3, r3, r0
 8007bd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bd6:	bfac      	ite	ge
 8007bd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bda:	81a3      	strhlt	r3, [r4, #12]
 8007bdc:	bd10      	pop	{r4, pc}

08007bde <__swrite>:
 8007bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be2:	461f      	mov	r7, r3
 8007be4:	898b      	ldrh	r3, [r1, #12]
 8007be6:	05db      	lsls	r3, r3, #23
 8007be8:	4605      	mov	r5, r0
 8007bea:	460c      	mov	r4, r1
 8007bec:	4616      	mov	r6, r2
 8007bee:	d505      	bpl.n	8007bfc <__swrite+0x1e>
 8007bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f000 f8d4 	bl	8007da4 <_lseek_r>
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c06:	81a3      	strh	r3, [r4, #12]
 8007c08:	4632      	mov	r2, r6
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c12:	f000 b8eb 	b.w	8007dec <_write_r>

08007c16 <__sseek>:
 8007c16:	b510      	push	{r4, lr}
 8007c18:	460c      	mov	r4, r1
 8007c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c1e:	f000 f8c1 	bl	8007da4 <_lseek_r>
 8007c22:	1c43      	adds	r3, r0, #1
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	bf15      	itete	ne
 8007c28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c32:	81a3      	strheq	r3, [r4, #12]
 8007c34:	bf18      	it	ne
 8007c36:	81a3      	strhne	r3, [r4, #12]
 8007c38:	bd10      	pop	{r4, pc}

08007c3a <__sclose>:
 8007c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3e:	f000 b8a1 	b.w	8007d84 <_close_r>

08007c42 <__swbuf_r>:
 8007c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c44:	460e      	mov	r6, r1
 8007c46:	4614      	mov	r4, r2
 8007c48:	4605      	mov	r5, r0
 8007c4a:	b118      	cbz	r0, 8007c54 <__swbuf_r+0x12>
 8007c4c:	6a03      	ldr	r3, [r0, #32]
 8007c4e:	b90b      	cbnz	r3, 8007c54 <__swbuf_r+0x12>
 8007c50:	f7ff feee 	bl	8007a30 <__sinit>
 8007c54:	69a3      	ldr	r3, [r4, #24]
 8007c56:	60a3      	str	r3, [r4, #8]
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	071a      	lsls	r2, r3, #28
 8007c5c:	d501      	bpl.n	8007c62 <__swbuf_r+0x20>
 8007c5e:	6923      	ldr	r3, [r4, #16]
 8007c60:	b943      	cbnz	r3, 8007c74 <__swbuf_r+0x32>
 8007c62:	4621      	mov	r1, r4
 8007c64:	4628      	mov	r0, r5
 8007c66:	f000 f82b 	bl	8007cc0 <__swsetup_r>
 8007c6a:	b118      	cbz	r0, 8007c74 <__swbuf_r+0x32>
 8007c6c:	f04f 37ff 	mov.w	r7, #4294967295
 8007c70:	4638      	mov	r0, r7
 8007c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	6922      	ldr	r2, [r4, #16]
 8007c78:	1a98      	subs	r0, r3, r2
 8007c7a:	6963      	ldr	r3, [r4, #20]
 8007c7c:	b2f6      	uxtb	r6, r6
 8007c7e:	4283      	cmp	r3, r0
 8007c80:	4637      	mov	r7, r6
 8007c82:	dc05      	bgt.n	8007c90 <__swbuf_r+0x4e>
 8007c84:	4621      	mov	r1, r4
 8007c86:	4628      	mov	r0, r5
 8007c88:	f002 fe96 	bl	800a9b8 <_fflush_r>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d1ed      	bne.n	8007c6c <__swbuf_r+0x2a>
 8007c90:	68a3      	ldr	r3, [r4, #8]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	60a3      	str	r3, [r4, #8]
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	6022      	str	r2, [r4, #0]
 8007c9c:	701e      	strb	r6, [r3, #0]
 8007c9e:	6962      	ldr	r2, [r4, #20]
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d004      	beq.n	8007cb0 <__swbuf_r+0x6e>
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	07db      	lsls	r3, r3, #31
 8007caa:	d5e1      	bpl.n	8007c70 <__swbuf_r+0x2e>
 8007cac:	2e0a      	cmp	r6, #10
 8007cae:	d1df      	bne.n	8007c70 <__swbuf_r+0x2e>
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f002 fe80 	bl	800a9b8 <_fflush_r>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d0d9      	beq.n	8007c70 <__swbuf_r+0x2e>
 8007cbc:	e7d6      	b.n	8007c6c <__swbuf_r+0x2a>
	...

08007cc0 <__swsetup_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4b29      	ldr	r3, [pc, #164]	@ (8007d68 <__swsetup_r+0xa8>)
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	6818      	ldr	r0, [r3, #0]
 8007cc8:	460c      	mov	r4, r1
 8007cca:	b118      	cbz	r0, 8007cd4 <__swsetup_r+0x14>
 8007ccc:	6a03      	ldr	r3, [r0, #32]
 8007cce:	b90b      	cbnz	r3, 8007cd4 <__swsetup_r+0x14>
 8007cd0:	f7ff feae 	bl	8007a30 <__sinit>
 8007cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd8:	0719      	lsls	r1, r3, #28
 8007cda:	d422      	bmi.n	8007d22 <__swsetup_r+0x62>
 8007cdc:	06da      	lsls	r2, r3, #27
 8007cde:	d407      	bmi.n	8007cf0 <__swsetup_r+0x30>
 8007ce0:	2209      	movs	r2, #9
 8007ce2:	602a      	str	r2, [r5, #0]
 8007ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295
 8007cee:	e033      	b.n	8007d58 <__swsetup_r+0x98>
 8007cf0:	0758      	lsls	r0, r3, #29
 8007cf2:	d512      	bpl.n	8007d1a <__swsetup_r+0x5a>
 8007cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cf6:	b141      	cbz	r1, 8007d0a <__swsetup_r+0x4a>
 8007cf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cfc:	4299      	cmp	r1, r3
 8007cfe:	d002      	beq.n	8007d06 <__swsetup_r+0x46>
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 ff05 	bl	8008b10 <_free_r>
 8007d06:	2300      	movs	r3, #0
 8007d08:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	2300      	movs	r3, #0
 8007d14:	6063      	str	r3, [r4, #4]
 8007d16:	6923      	ldr	r3, [r4, #16]
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	f043 0308 	orr.w	r3, r3, #8
 8007d20:	81a3      	strh	r3, [r4, #12]
 8007d22:	6923      	ldr	r3, [r4, #16]
 8007d24:	b94b      	cbnz	r3, 8007d3a <__swsetup_r+0x7a>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d30:	d003      	beq.n	8007d3a <__swsetup_r+0x7a>
 8007d32:	4621      	mov	r1, r4
 8007d34:	4628      	mov	r0, r5
 8007d36:	f002 fe8d 	bl	800aa54 <__smakebuf_r>
 8007d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d3e:	f013 0201 	ands.w	r2, r3, #1
 8007d42:	d00a      	beq.n	8007d5a <__swsetup_r+0x9a>
 8007d44:	2200      	movs	r2, #0
 8007d46:	60a2      	str	r2, [r4, #8]
 8007d48:	6962      	ldr	r2, [r4, #20]
 8007d4a:	4252      	negs	r2, r2
 8007d4c:	61a2      	str	r2, [r4, #24]
 8007d4e:	6922      	ldr	r2, [r4, #16]
 8007d50:	b942      	cbnz	r2, 8007d64 <__swsetup_r+0xa4>
 8007d52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d56:	d1c5      	bne.n	8007ce4 <__swsetup_r+0x24>
 8007d58:	bd38      	pop	{r3, r4, r5, pc}
 8007d5a:	0799      	lsls	r1, r3, #30
 8007d5c:	bf58      	it	pl
 8007d5e:	6962      	ldrpl	r2, [r4, #20]
 8007d60:	60a2      	str	r2, [r4, #8]
 8007d62:	e7f4      	b.n	8007d4e <__swsetup_r+0x8e>
 8007d64:	2000      	movs	r0, #0
 8007d66:	e7f7      	b.n	8007d58 <__swsetup_r+0x98>
 8007d68:	2000002c 	.word	0x2000002c

08007d6c <memset>:
 8007d6c:	4402      	add	r2, r0
 8007d6e:	4603      	mov	r3, r0
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d100      	bne.n	8007d76 <memset+0xa>
 8007d74:	4770      	bx	lr
 8007d76:	f803 1b01 	strb.w	r1, [r3], #1
 8007d7a:	e7f9      	b.n	8007d70 <memset+0x4>

08007d7c <_localeconv_r>:
 8007d7c:	4800      	ldr	r0, [pc, #0]	@ (8007d80 <_localeconv_r+0x4>)
 8007d7e:	4770      	bx	lr
 8007d80:	2000016c 	.word	0x2000016c

08007d84 <_close_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4d06      	ldr	r5, [pc, #24]	@ (8007da0 <_close_r+0x1c>)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	602b      	str	r3, [r5, #0]
 8007d90:	f7fa feda 	bl	8002b48 <_close>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_close_r+0x1a>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_close_r+0x1a>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	200006ac 	.word	0x200006ac

08007da4 <_lseek_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d07      	ldr	r5, [pc, #28]	@ (8007dc4 <_lseek_r+0x20>)
 8007da8:	4604      	mov	r4, r0
 8007daa:	4608      	mov	r0, r1
 8007dac:	4611      	mov	r1, r2
 8007dae:	2200      	movs	r2, #0
 8007db0:	602a      	str	r2, [r5, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f7fa feef 	bl	8002b96 <_lseek>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_lseek_r+0x1e>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_lseek_r+0x1e>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	200006ac 	.word	0x200006ac

08007dc8 <_read_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d07      	ldr	r5, [pc, #28]	@ (8007de8 <_read_r+0x20>)
 8007dcc:	4604      	mov	r4, r0
 8007dce:	4608      	mov	r0, r1
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	602a      	str	r2, [r5, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f7fa fe7d 	bl	8002ad6 <_read>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_read_r+0x1e>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_read_r+0x1e>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	200006ac 	.word	0x200006ac

08007dec <_write_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d07      	ldr	r5, [pc, #28]	@ (8007e0c <_write_r+0x20>)
 8007df0:	4604      	mov	r4, r0
 8007df2:	4608      	mov	r0, r1
 8007df4:	4611      	mov	r1, r2
 8007df6:	2200      	movs	r2, #0
 8007df8:	602a      	str	r2, [r5, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f7fa fe88 	bl	8002b10 <_write>
 8007e00:	1c43      	adds	r3, r0, #1
 8007e02:	d102      	bne.n	8007e0a <_write_r+0x1e>
 8007e04:	682b      	ldr	r3, [r5, #0]
 8007e06:	b103      	cbz	r3, 8007e0a <_write_r+0x1e>
 8007e08:	6023      	str	r3, [r4, #0]
 8007e0a:	bd38      	pop	{r3, r4, r5, pc}
 8007e0c:	200006ac 	.word	0x200006ac

08007e10 <__errno>:
 8007e10:	4b01      	ldr	r3, [pc, #4]	@ (8007e18 <__errno+0x8>)
 8007e12:	6818      	ldr	r0, [r3, #0]
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	2000002c 	.word	0x2000002c

08007e1c <__libc_init_array>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8007e54 <__libc_init_array+0x38>)
 8007e20:	4c0d      	ldr	r4, [pc, #52]	@ (8007e58 <__libc_init_array+0x3c>)
 8007e22:	1b64      	subs	r4, r4, r5
 8007e24:	10a4      	asrs	r4, r4, #2
 8007e26:	2600      	movs	r6, #0
 8007e28:	42a6      	cmp	r6, r4
 8007e2a:	d109      	bne.n	8007e40 <__libc_init_array+0x24>
 8007e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8007e5c <__libc_init_array+0x40>)
 8007e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8007e60 <__libc_init_array+0x44>)
 8007e30:	f003 fae0 	bl	800b3f4 <_init>
 8007e34:	1b64      	subs	r4, r4, r5
 8007e36:	10a4      	asrs	r4, r4, #2
 8007e38:	2600      	movs	r6, #0
 8007e3a:	42a6      	cmp	r6, r4
 8007e3c:	d105      	bne.n	8007e4a <__libc_init_array+0x2e>
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e44:	4798      	blx	r3
 8007e46:	3601      	adds	r6, #1
 8007e48:	e7ee      	b.n	8007e28 <__libc_init_array+0xc>
 8007e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e4e:	4798      	blx	r3
 8007e50:	3601      	adds	r6, #1
 8007e52:	e7f2      	b.n	8007e3a <__libc_init_array+0x1e>
 8007e54:	0800b8e0 	.word	0x0800b8e0
 8007e58:	0800b8e0 	.word	0x0800b8e0
 8007e5c:	0800b8e0 	.word	0x0800b8e0
 8007e60:	0800b8e4 	.word	0x0800b8e4

08007e64 <__retarget_lock_init_recursive>:
 8007e64:	4770      	bx	lr

08007e66 <__retarget_lock_acquire_recursive>:
 8007e66:	4770      	bx	lr

08007e68 <__retarget_lock_release_recursive>:
 8007e68:	4770      	bx	lr
	...

08007e6c <nanf>:
 8007e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007e74 <nanf+0x8>
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	7fc00000 	.word	0x7fc00000

08007e78 <quorem>:
 8007e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	6903      	ldr	r3, [r0, #16]
 8007e7e:	690c      	ldr	r4, [r1, #16]
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	4607      	mov	r7, r0
 8007e84:	db7e      	blt.n	8007f84 <quorem+0x10c>
 8007e86:	3c01      	subs	r4, #1
 8007e88:	f101 0814 	add.w	r8, r1, #20
 8007e8c:	00a3      	lsls	r3, r4, #2
 8007e8e:	f100 0514 	add.w	r5, r0, #20
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007eaa:	fbb2 f6f3 	udiv	r6, r2, r3
 8007eae:	d32e      	bcc.n	8007f0e <quorem+0x96>
 8007eb0:	f04f 0a00 	mov.w	sl, #0
 8007eb4:	46c4      	mov	ip, r8
 8007eb6:	46ae      	mov	lr, r5
 8007eb8:	46d3      	mov	fp, sl
 8007eba:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ebe:	b298      	uxth	r0, r3
 8007ec0:	fb06 a000 	mla	r0, r6, r0, sl
 8007ec4:	0c02      	lsrs	r2, r0, #16
 8007ec6:	0c1b      	lsrs	r3, r3, #16
 8007ec8:	fb06 2303 	mla	r3, r6, r3, r2
 8007ecc:	f8de 2000 	ldr.w	r2, [lr]
 8007ed0:	b280      	uxth	r0, r0
 8007ed2:	b292      	uxth	r2, r2
 8007ed4:	1a12      	subs	r2, r2, r0
 8007ed6:	445a      	add	r2, fp
 8007ed8:	f8de 0000 	ldr.w	r0, [lr]
 8007edc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ee6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007eea:	b292      	uxth	r2, r2
 8007eec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ef0:	45e1      	cmp	r9, ip
 8007ef2:	f84e 2b04 	str.w	r2, [lr], #4
 8007ef6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007efa:	d2de      	bcs.n	8007eba <quorem+0x42>
 8007efc:	9b00      	ldr	r3, [sp, #0]
 8007efe:	58eb      	ldr	r3, [r5, r3]
 8007f00:	b92b      	cbnz	r3, 8007f0e <quorem+0x96>
 8007f02:	9b01      	ldr	r3, [sp, #4]
 8007f04:	3b04      	subs	r3, #4
 8007f06:	429d      	cmp	r5, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	d32f      	bcc.n	8007f6c <quorem+0xf4>
 8007f0c:	613c      	str	r4, [r7, #16]
 8007f0e:	4638      	mov	r0, r7
 8007f10:	f001 f9c2 	bl	8009298 <__mcmp>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	db25      	blt.n	8007f64 <quorem+0xec>
 8007f18:	4629      	mov	r1, r5
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f20:	f8d1 c000 	ldr.w	ip, [r1]
 8007f24:	fa1f fe82 	uxth.w	lr, r2
 8007f28:	fa1f f38c 	uxth.w	r3, ip
 8007f2c:	eba3 030e 	sub.w	r3, r3, lr
 8007f30:	4403      	add	r3, r0
 8007f32:	0c12      	lsrs	r2, r2, #16
 8007f34:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f38:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f42:	45c1      	cmp	r9, r8
 8007f44:	f841 3b04 	str.w	r3, [r1], #4
 8007f48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f4c:	d2e6      	bcs.n	8007f1c <quorem+0xa4>
 8007f4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f56:	b922      	cbnz	r2, 8007f62 <quorem+0xea>
 8007f58:	3b04      	subs	r3, #4
 8007f5a:	429d      	cmp	r5, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	d30b      	bcc.n	8007f78 <quorem+0x100>
 8007f60:	613c      	str	r4, [r7, #16]
 8007f62:	3601      	adds	r6, #1
 8007f64:	4630      	mov	r0, r6
 8007f66:	b003      	add	sp, #12
 8007f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	3b04      	subs	r3, #4
 8007f70:	2a00      	cmp	r2, #0
 8007f72:	d1cb      	bne.n	8007f0c <quorem+0x94>
 8007f74:	3c01      	subs	r4, #1
 8007f76:	e7c6      	b.n	8007f06 <quorem+0x8e>
 8007f78:	6812      	ldr	r2, [r2, #0]
 8007f7a:	3b04      	subs	r3, #4
 8007f7c:	2a00      	cmp	r2, #0
 8007f7e:	d1ef      	bne.n	8007f60 <quorem+0xe8>
 8007f80:	3c01      	subs	r4, #1
 8007f82:	e7ea      	b.n	8007f5a <quorem+0xe2>
 8007f84:	2000      	movs	r0, #0
 8007f86:	e7ee      	b.n	8007f66 <quorem+0xee>

08007f88 <_dtoa_r>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	69c7      	ldr	r7, [r0, #28]
 8007f8e:	b099      	sub	sp, #100	@ 0x64
 8007f90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f94:	ec55 4b10 	vmov	r4, r5, d0
 8007f98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007f9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f9c:	4683      	mov	fp, r0
 8007f9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007fa0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fa2:	b97f      	cbnz	r7, 8007fc4 <_dtoa_r+0x3c>
 8007fa4:	2010      	movs	r0, #16
 8007fa6:	f000 fdfd 	bl	8008ba4 <malloc>
 8007faa:	4602      	mov	r2, r0
 8007fac:	f8cb 001c 	str.w	r0, [fp, #28]
 8007fb0:	b920      	cbnz	r0, 8007fbc <_dtoa_r+0x34>
 8007fb2:	4ba7      	ldr	r3, [pc, #668]	@ (8008250 <_dtoa_r+0x2c8>)
 8007fb4:	21ef      	movs	r1, #239	@ 0xef
 8007fb6:	48a7      	ldr	r0, [pc, #668]	@ (8008254 <_dtoa_r+0x2cc>)
 8007fb8:	f002 fdfe 	bl	800abb8 <__assert_func>
 8007fbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007fc0:	6007      	str	r7, [r0, #0]
 8007fc2:	60c7      	str	r7, [r0, #12]
 8007fc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007fc8:	6819      	ldr	r1, [r3, #0]
 8007fca:	b159      	cbz	r1, 8007fe4 <_dtoa_r+0x5c>
 8007fcc:	685a      	ldr	r2, [r3, #4]
 8007fce:	604a      	str	r2, [r1, #4]
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	4093      	lsls	r3, r2
 8007fd4:	608b      	str	r3, [r1, #8]
 8007fd6:	4658      	mov	r0, fp
 8007fd8:	f000 feda 	bl	8008d90 <_Bfree>
 8007fdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	1e2b      	subs	r3, r5, #0
 8007fe6:	bfb9      	ittee	lt
 8007fe8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007fec:	9303      	strlt	r3, [sp, #12]
 8007fee:	2300      	movge	r3, #0
 8007ff0:	6033      	strge	r3, [r6, #0]
 8007ff2:	9f03      	ldr	r7, [sp, #12]
 8007ff4:	4b98      	ldr	r3, [pc, #608]	@ (8008258 <_dtoa_r+0x2d0>)
 8007ff6:	bfbc      	itt	lt
 8007ff8:	2201      	movlt	r2, #1
 8007ffa:	6032      	strlt	r2, [r6, #0]
 8007ffc:	43bb      	bics	r3, r7
 8007ffe:	d112      	bne.n	8008026 <_dtoa_r+0x9e>
 8008000:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008002:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800800c:	4323      	orrs	r3, r4
 800800e:	f000 854d 	beq.w	8008aac <_dtoa_r+0xb24>
 8008012:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008014:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800826c <_dtoa_r+0x2e4>
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 854f 	beq.w	8008abc <_dtoa_r+0xb34>
 800801e:	f10a 0303 	add.w	r3, sl, #3
 8008022:	f000 bd49 	b.w	8008ab8 <_dtoa_r+0xb30>
 8008026:	ed9d 7b02 	vldr	d7, [sp, #8]
 800802a:	2200      	movs	r2, #0
 800802c:	ec51 0b17 	vmov	r0, r1, d7
 8008030:	2300      	movs	r3, #0
 8008032:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008036:	f7f8 fd67 	bl	8000b08 <__aeabi_dcmpeq>
 800803a:	4680      	mov	r8, r0
 800803c:	b158      	cbz	r0, 8008056 <_dtoa_r+0xce>
 800803e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008040:	2301      	movs	r3, #1
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008046:	b113      	cbz	r3, 800804e <_dtoa_r+0xc6>
 8008048:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800804a:	4b84      	ldr	r3, [pc, #528]	@ (800825c <_dtoa_r+0x2d4>)
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008270 <_dtoa_r+0x2e8>
 8008052:	f000 bd33 	b.w	8008abc <_dtoa_r+0xb34>
 8008056:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800805a:	aa16      	add	r2, sp, #88	@ 0x58
 800805c:	a917      	add	r1, sp, #92	@ 0x5c
 800805e:	4658      	mov	r0, fp
 8008060:	f001 fa3a 	bl	80094d8 <__d2b>
 8008064:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008068:	4681      	mov	r9, r0
 800806a:	2e00      	cmp	r6, #0
 800806c:	d077      	beq.n	800815e <_dtoa_r+0x1d6>
 800806e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008070:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800807c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008080:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008084:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008088:	4619      	mov	r1, r3
 800808a:	2200      	movs	r2, #0
 800808c:	4b74      	ldr	r3, [pc, #464]	@ (8008260 <_dtoa_r+0x2d8>)
 800808e:	f7f8 f91b 	bl	80002c8 <__aeabi_dsub>
 8008092:	a369      	add	r3, pc, #420	@ (adr r3, 8008238 <_dtoa_r+0x2b0>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f7f8 face 	bl	8000638 <__aeabi_dmul>
 800809c:	a368      	add	r3, pc, #416	@ (adr r3, 8008240 <_dtoa_r+0x2b8>)
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f7f8 f913 	bl	80002cc <__adddf3>
 80080a6:	4604      	mov	r4, r0
 80080a8:	4630      	mov	r0, r6
 80080aa:	460d      	mov	r5, r1
 80080ac:	f7f8 fa5a 	bl	8000564 <__aeabi_i2d>
 80080b0:	a365      	add	r3, pc, #404	@ (adr r3, 8008248 <_dtoa_r+0x2c0>)
 80080b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b6:	f7f8 fabf 	bl	8000638 <__aeabi_dmul>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4620      	mov	r0, r4
 80080c0:	4629      	mov	r1, r5
 80080c2:	f7f8 f903 	bl	80002cc <__adddf3>
 80080c6:	4604      	mov	r4, r0
 80080c8:	460d      	mov	r5, r1
 80080ca:	f7f8 fd65 	bl	8000b98 <__aeabi_d2iz>
 80080ce:	2200      	movs	r2, #0
 80080d0:	4607      	mov	r7, r0
 80080d2:	2300      	movs	r3, #0
 80080d4:	4620      	mov	r0, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	f7f8 fd20 	bl	8000b1c <__aeabi_dcmplt>
 80080dc:	b140      	cbz	r0, 80080f0 <_dtoa_r+0x168>
 80080de:	4638      	mov	r0, r7
 80080e0:	f7f8 fa40 	bl	8000564 <__aeabi_i2d>
 80080e4:	4622      	mov	r2, r4
 80080e6:	462b      	mov	r3, r5
 80080e8:	f7f8 fd0e 	bl	8000b08 <__aeabi_dcmpeq>
 80080ec:	b900      	cbnz	r0, 80080f0 <_dtoa_r+0x168>
 80080ee:	3f01      	subs	r7, #1
 80080f0:	2f16      	cmp	r7, #22
 80080f2:	d851      	bhi.n	8008198 <_dtoa_r+0x210>
 80080f4:	4b5b      	ldr	r3, [pc, #364]	@ (8008264 <_dtoa_r+0x2dc>)
 80080f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008102:	f7f8 fd0b 	bl	8000b1c <__aeabi_dcmplt>
 8008106:	2800      	cmp	r0, #0
 8008108:	d048      	beq.n	800819c <_dtoa_r+0x214>
 800810a:	3f01      	subs	r7, #1
 800810c:	2300      	movs	r3, #0
 800810e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008110:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008112:	1b9b      	subs	r3, r3, r6
 8008114:	1e5a      	subs	r2, r3, #1
 8008116:	bf44      	itt	mi
 8008118:	f1c3 0801 	rsbmi	r8, r3, #1
 800811c:	2300      	movmi	r3, #0
 800811e:	9208      	str	r2, [sp, #32]
 8008120:	bf54      	ite	pl
 8008122:	f04f 0800 	movpl.w	r8, #0
 8008126:	9308      	strmi	r3, [sp, #32]
 8008128:	2f00      	cmp	r7, #0
 800812a:	db39      	blt.n	80081a0 <_dtoa_r+0x218>
 800812c:	9b08      	ldr	r3, [sp, #32]
 800812e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008130:	443b      	add	r3, r7
 8008132:	9308      	str	r3, [sp, #32]
 8008134:	2300      	movs	r3, #0
 8008136:	930a      	str	r3, [sp, #40]	@ 0x28
 8008138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800813a:	2b09      	cmp	r3, #9
 800813c:	d864      	bhi.n	8008208 <_dtoa_r+0x280>
 800813e:	2b05      	cmp	r3, #5
 8008140:	bfc4      	itt	gt
 8008142:	3b04      	subgt	r3, #4
 8008144:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008148:	f1a3 0302 	sub.w	r3, r3, #2
 800814c:	bfcc      	ite	gt
 800814e:	2400      	movgt	r4, #0
 8008150:	2401      	movle	r4, #1
 8008152:	2b03      	cmp	r3, #3
 8008154:	d863      	bhi.n	800821e <_dtoa_r+0x296>
 8008156:	e8df f003 	tbb	[pc, r3]
 800815a:	372a      	.short	0x372a
 800815c:	5535      	.short	0x5535
 800815e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008162:	441e      	add	r6, r3
 8008164:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008168:	2b20      	cmp	r3, #32
 800816a:	bfc1      	itttt	gt
 800816c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008170:	409f      	lslgt	r7, r3
 8008172:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008176:	fa24 f303 	lsrgt.w	r3, r4, r3
 800817a:	bfd6      	itet	le
 800817c:	f1c3 0320 	rsble	r3, r3, #32
 8008180:	ea47 0003 	orrgt.w	r0, r7, r3
 8008184:	fa04 f003 	lslle.w	r0, r4, r3
 8008188:	f7f8 f9dc 	bl	8000544 <__aeabi_ui2d>
 800818c:	2201      	movs	r2, #1
 800818e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008192:	3e01      	subs	r6, #1
 8008194:	9214      	str	r2, [sp, #80]	@ 0x50
 8008196:	e777      	b.n	8008088 <_dtoa_r+0x100>
 8008198:	2301      	movs	r3, #1
 800819a:	e7b8      	b.n	800810e <_dtoa_r+0x186>
 800819c:	9012      	str	r0, [sp, #72]	@ 0x48
 800819e:	e7b7      	b.n	8008110 <_dtoa_r+0x188>
 80081a0:	427b      	negs	r3, r7
 80081a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80081a4:	2300      	movs	r3, #0
 80081a6:	eba8 0807 	sub.w	r8, r8, r7
 80081aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081ac:	e7c4      	b.n	8008138 <_dtoa_r+0x1b0>
 80081ae:	2300      	movs	r3, #0
 80081b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dc35      	bgt.n	8008224 <_dtoa_r+0x29c>
 80081b8:	2301      	movs	r3, #1
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	9307      	str	r3, [sp, #28]
 80081be:	461a      	mov	r2, r3
 80081c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80081c2:	e00b      	b.n	80081dc <_dtoa_r+0x254>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e7f3      	b.n	80081b0 <_dtoa_r+0x228>
 80081c8:	2300      	movs	r3, #0
 80081ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081ce:	18fb      	adds	r3, r7, r3
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	3301      	adds	r3, #1
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	9307      	str	r3, [sp, #28]
 80081d8:	bfb8      	it	lt
 80081da:	2301      	movlt	r3, #1
 80081dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80081e0:	2100      	movs	r1, #0
 80081e2:	2204      	movs	r2, #4
 80081e4:	f102 0514 	add.w	r5, r2, #20
 80081e8:	429d      	cmp	r5, r3
 80081ea:	d91f      	bls.n	800822c <_dtoa_r+0x2a4>
 80081ec:	6041      	str	r1, [r0, #4]
 80081ee:	4658      	mov	r0, fp
 80081f0:	f000 fd8e 	bl	8008d10 <_Balloc>
 80081f4:	4682      	mov	sl, r0
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d13c      	bne.n	8008274 <_dtoa_r+0x2ec>
 80081fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008268 <_dtoa_r+0x2e0>)
 80081fc:	4602      	mov	r2, r0
 80081fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8008202:	e6d8      	b.n	8007fb6 <_dtoa_r+0x2e>
 8008204:	2301      	movs	r3, #1
 8008206:	e7e0      	b.n	80081ca <_dtoa_r+0x242>
 8008208:	2401      	movs	r4, #1
 800820a:	2300      	movs	r3, #0
 800820c:	9309      	str	r3, [sp, #36]	@ 0x24
 800820e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008210:	f04f 33ff 	mov.w	r3, #4294967295
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	9307      	str	r3, [sp, #28]
 8008218:	2200      	movs	r2, #0
 800821a:	2312      	movs	r3, #18
 800821c:	e7d0      	b.n	80081c0 <_dtoa_r+0x238>
 800821e:	2301      	movs	r3, #1
 8008220:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008222:	e7f5      	b.n	8008210 <_dtoa_r+0x288>
 8008224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	9307      	str	r3, [sp, #28]
 800822a:	e7d7      	b.n	80081dc <_dtoa_r+0x254>
 800822c:	3101      	adds	r1, #1
 800822e:	0052      	lsls	r2, r2, #1
 8008230:	e7d8      	b.n	80081e4 <_dtoa_r+0x25c>
 8008232:	bf00      	nop
 8008234:	f3af 8000 	nop.w
 8008238:	636f4361 	.word	0x636f4361
 800823c:	3fd287a7 	.word	0x3fd287a7
 8008240:	8b60c8b3 	.word	0x8b60c8b3
 8008244:	3fc68a28 	.word	0x3fc68a28
 8008248:	509f79fb 	.word	0x509f79fb
 800824c:	3fd34413 	.word	0x3fd34413
 8008250:	0800b4f2 	.word	0x0800b4f2
 8008254:	0800b509 	.word	0x0800b509
 8008258:	7ff00000 	.word	0x7ff00000
 800825c:	0800b4bd 	.word	0x0800b4bd
 8008260:	3ff80000 	.word	0x3ff80000
 8008264:	0800b600 	.word	0x0800b600
 8008268:	0800b561 	.word	0x0800b561
 800826c:	0800b4ee 	.word	0x0800b4ee
 8008270:	0800b4bc 	.word	0x0800b4bc
 8008274:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008278:	6018      	str	r0, [r3, #0]
 800827a:	9b07      	ldr	r3, [sp, #28]
 800827c:	2b0e      	cmp	r3, #14
 800827e:	f200 80a4 	bhi.w	80083ca <_dtoa_r+0x442>
 8008282:	2c00      	cmp	r4, #0
 8008284:	f000 80a1 	beq.w	80083ca <_dtoa_r+0x442>
 8008288:	2f00      	cmp	r7, #0
 800828a:	dd33      	ble.n	80082f4 <_dtoa_r+0x36c>
 800828c:	4bad      	ldr	r3, [pc, #692]	@ (8008544 <_dtoa_r+0x5bc>)
 800828e:	f007 020f 	and.w	r2, r7, #15
 8008292:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008296:	ed93 7b00 	vldr	d7, [r3]
 800829a:	05f8      	lsls	r0, r7, #23
 800829c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80082a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80082a4:	d516      	bpl.n	80082d4 <_dtoa_r+0x34c>
 80082a6:	4ba8      	ldr	r3, [pc, #672]	@ (8008548 <_dtoa_r+0x5c0>)
 80082a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082b0:	f7f8 faec 	bl	800088c <__aeabi_ddiv>
 80082b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082b8:	f004 040f 	and.w	r4, r4, #15
 80082bc:	2603      	movs	r6, #3
 80082be:	4da2      	ldr	r5, [pc, #648]	@ (8008548 <_dtoa_r+0x5c0>)
 80082c0:	b954      	cbnz	r4, 80082d8 <_dtoa_r+0x350>
 80082c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ca:	f7f8 fadf 	bl	800088c <__aeabi_ddiv>
 80082ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d2:	e028      	b.n	8008326 <_dtoa_r+0x39e>
 80082d4:	2602      	movs	r6, #2
 80082d6:	e7f2      	b.n	80082be <_dtoa_r+0x336>
 80082d8:	07e1      	lsls	r1, r4, #31
 80082da:	d508      	bpl.n	80082ee <_dtoa_r+0x366>
 80082dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082e4:	f7f8 f9a8 	bl	8000638 <__aeabi_dmul>
 80082e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082ec:	3601      	adds	r6, #1
 80082ee:	1064      	asrs	r4, r4, #1
 80082f0:	3508      	adds	r5, #8
 80082f2:	e7e5      	b.n	80082c0 <_dtoa_r+0x338>
 80082f4:	f000 80d2 	beq.w	800849c <_dtoa_r+0x514>
 80082f8:	427c      	negs	r4, r7
 80082fa:	4b92      	ldr	r3, [pc, #584]	@ (8008544 <_dtoa_r+0x5bc>)
 80082fc:	4d92      	ldr	r5, [pc, #584]	@ (8008548 <_dtoa_r+0x5c0>)
 80082fe:	f004 020f 	and.w	r2, r4, #15
 8008302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800830e:	f7f8 f993 	bl	8000638 <__aeabi_dmul>
 8008312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008316:	1124      	asrs	r4, r4, #4
 8008318:	2300      	movs	r3, #0
 800831a:	2602      	movs	r6, #2
 800831c:	2c00      	cmp	r4, #0
 800831e:	f040 80b2 	bne.w	8008486 <_dtoa_r+0x4fe>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1d3      	bne.n	80082ce <_dtoa_r+0x346>
 8008326:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008328:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 80b7 	beq.w	80084a0 <_dtoa_r+0x518>
 8008332:	4b86      	ldr	r3, [pc, #536]	@ (800854c <_dtoa_r+0x5c4>)
 8008334:	2200      	movs	r2, #0
 8008336:	4620      	mov	r0, r4
 8008338:	4629      	mov	r1, r5
 800833a:	f7f8 fbef 	bl	8000b1c <__aeabi_dcmplt>
 800833e:	2800      	cmp	r0, #0
 8008340:	f000 80ae 	beq.w	80084a0 <_dtoa_r+0x518>
 8008344:	9b07      	ldr	r3, [sp, #28]
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 80aa 	beq.w	80084a0 <_dtoa_r+0x518>
 800834c:	9b00      	ldr	r3, [sp, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	dd37      	ble.n	80083c2 <_dtoa_r+0x43a>
 8008352:	1e7b      	subs	r3, r7, #1
 8008354:	9304      	str	r3, [sp, #16]
 8008356:	4620      	mov	r0, r4
 8008358:	4b7d      	ldr	r3, [pc, #500]	@ (8008550 <_dtoa_r+0x5c8>)
 800835a:	2200      	movs	r2, #0
 800835c:	4629      	mov	r1, r5
 800835e:	f7f8 f96b 	bl	8000638 <__aeabi_dmul>
 8008362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008366:	9c00      	ldr	r4, [sp, #0]
 8008368:	3601      	adds	r6, #1
 800836a:	4630      	mov	r0, r6
 800836c:	f7f8 f8fa 	bl	8000564 <__aeabi_i2d>
 8008370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008374:	f7f8 f960 	bl	8000638 <__aeabi_dmul>
 8008378:	4b76      	ldr	r3, [pc, #472]	@ (8008554 <_dtoa_r+0x5cc>)
 800837a:	2200      	movs	r2, #0
 800837c:	f7f7 ffa6 	bl	80002cc <__adddf3>
 8008380:	4605      	mov	r5, r0
 8008382:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008386:	2c00      	cmp	r4, #0
 8008388:	f040 808d 	bne.w	80084a6 <_dtoa_r+0x51e>
 800838c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008390:	4b71      	ldr	r3, [pc, #452]	@ (8008558 <_dtoa_r+0x5d0>)
 8008392:	2200      	movs	r2, #0
 8008394:	f7f7 ff98 	bl	80002c8 <__aeabi_dsub>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083a0:	462a      	mov	r2, r5
 80083a2:	4633      	mov	r3, r6
 80083a4:	f7f8 fbd8 	bl	8000b58 <__aeabi_dcmpgt>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	f040 828b 	bne.w	80088c4 <_dtoa_r+0x93c>
 80083ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083b2:	462a      	mov	r2, r5
 80083b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80083b8:	f7f8 fbb0 	bl	8000b1c <__aeabi_dcmplt>
 80083bc:	2800      	cmp	r0, #0
 80083be:	f040 8128 	bne.w	8008612 <_dtoa_r+0x68a>
 80083c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80083c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80083ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f2c0 815a 	blt.w	8008686 <_dtoa_r+0x6fe>
 80083d2:	2f0e      	cmp	r7, #14
 80083d4:	f300 8157 	bgt.w	8008686 <_dtoa_r+0x6fe>
 80083d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008544 <_dtoa_r+0x5bc>)
 80083da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083de:	ed93 7b00 	vldr	d7, [r3]
 80083e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	ed8d 7b00 	vstr	d7, [sp]
 80083ea:	da03      	bge.n	80083f4 <_dtoa_r+0x46c>
 80083ec:	9b07      	ldr	r3, [sp, #28]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f340 8101 	ble.w	80085f6 <_dtoa_r+0x66e>
 80083f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80083f8:	4656      	mov	r6, sl
 80083fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083fe:	4620      	mov	r0, r4
 8008400:	4629      	mov	r1, r5
 8008402:	f7f8 fa43 	bl	800088c <__aeabi_ddiv>
 8008406:	f7f8 fbc7 	bl	8000b98 <__aeabi_d2iz>
 800840a:	4680      	mov	r8, r0
 800840c:	f7f8 f8aa 	bl	8000564 <__aeabi_i2d>
 8008410:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008414:	f7f8 f910 	bl	8000638 <__aeabi_dmul>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4620      	mov	r0, r4
 800841e:	4629      	mov	r1, r5
 8008420:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008424:	f7f7 ff50 	bl	80002c8 <__aeabi_dsub>
 8008428:	f806 4b01 	strb.w	r4, [r6], #1
 800842c:	9d07      	ldr	r5, [sp, #28]
 800842e:	eba6 040a 	sub.w	r4, r6, sl
 8008432:	42a5      	cmp	r5, r4
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	f040 8117 	bne.w	800866a <_dtoa_r+0x6e2>
 800843c:	f7f7 ff46 	bl	80002cc <__adddf3>
 8008440:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008444:	4604      	mov	r4, r0
 8008446:	460d      	mov	r5, r1
 8008448:	f7f8 fb86 	bl	8000b58 <__aeabi_dcmpgt>
 800844c:	2800      	cmp	r0, #0
 800844e:	f040 80f9 	bne.w	8008644 <_dtoa_r+0x6bc>
 8008452:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008456:	4620      	mov	r0, r4
 8008458:	4629      	mov	r1, r5
 800845a:	f7f8 fb55 	bl	8000b08 <__aeabi_dcmpeq>
 800845e:	b118      	cbz	r0, 8008468 <_dtoa_r+0x4e0>
 8008460:	f018 0f01 	tst.w	r8, #1
 8008464:	f040 80ee 	bne.w	8008644 <_dtoa_r+0x6bc>
 8008468:	4649      	mov	r1, r9
 800846a:	4658      	mov	r0, fp
 800846c:	f000 fc90 	bl	8008d90 <_Bfree>
 8008470:	2300      	movs	r3, #0
 8008472:	7033      	strb	r3, [r6, #0]
 8008474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008476:	3701      	adds	r7, #1
 8008478:	601f      	str	r7, [r3, #0]
 800847a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 831d 	beq.w	8008abc <_dtoa_r+0xb34>
 8008482:	601e      	str	r6, [r3, #0]
 8008484:	e31a      	b.n	8008abc <_dtoa_r+0xb34>
 8008486:	07e2      	lsls	r2, r4, #31
 8008488:	d505      	bpl.n	8008496 <_dtoa_r+0x50e>
 800848a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800848e:	f7f8 f8d3 	bl	8000638 <__aeabi_dmul>
 8008492:	3601      	adds	r6, #1
 8008494:	2301      	movs	r3, #1
 8008496:	1064      	asrs	r4, r4, #1
 8008498:	3508      	adds	r5, #8
 800849a:	e73f      	b.n	800831c <_dtoa_r+0x394>
 800849c:	2602      	movs	r6, #2
 800849e:	e742      	b.n	8008326 <_dtoa_r+0x39e>
 80084a0:	9c07      	ldr	r4, [sp, #28]
 80084a2:	9704      	str	r7, [sp, #16]
 80084a4:	e761      	b.n	800836a <_dtoa_r+0x3e2>
 80084a6:	4b27      	ldr	r3, [pc, #156]	@ (8008544 <_dtoa_r+0x5bc>)
 80084a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084b2:	4454      	add	r4, sl
 80084b4:	2900      	cmp	r1, #0
 80084b6:	d053      	beq.n	8008560 <_dtoa_r+0x5d8>
 80084b8:	4928      	ldr	r1, [pc, #160]	@ (800855c <_dtoa_r+0x5d4>)
 80084ba:	2000      	movs	r0, #0
 80084bc:	f7f8 f9e6 	bl	800088c <__aeabi_ddiv>
 80084c0:	4633      	mov	r3, r6
 80084c2:	462a      	mov	r2, r5
 80084c4:	f7f7 ff00 	bl	80002c8 <__aeabi_dsub>
 80084c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084cc:	4656      	mov	r6, sl
 80084ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084d2:	f7f8 fb61 	bl	8000b98 <__aeabi_d2iz>
 80084d6:	4605      	mov	r5, r0
 80084d8:	f7f8 f844 	bl	8000564 <__aeabi_i2d>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084e4:	f7f7 fef0 	bl	80002c8 <__aeabi_dsub>
 80084e8:	3530      	adds	r5, #48	@ 0x30
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084f2:	f806 5b01 	strb.w	r5, [r6], #1
 80084f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084fa:	f7f8 fb0f 	bl	8000b1c <__aeabi_dcmplt>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d171      	bne.n	80085e6 <_dtoa_r+0x65e>
 8008502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008506:	4911      	ldr	r1, [pc, #68]	@ (800854c <_dtoa_r+0x5c4>)
 8008508:	2000      	movs	r0, #0
 800850a:	f7f7 fedd 	bl	80002c8 <__aeabi_dsub>
 800850e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008512:	f7f8 fb03 	bl	8000b1c <__aeabi_dcmplt>
 8008516:	2800      	cmp	r0, #0
 8008518:	f040 8095 	bne.w	8008646 <_dtoa_r+0x6be>
 800851c:	42a6      	cmp	r6, r4
 800851e:	f43f af50 	beq.w	80083c2 <_dtoa_r+0x43a>
 8008522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008526:	4b0a      	ldr	r3, [pc, #40]	@ (8008550 <_dtoa_r+0x5c8>)
 8008528:	2200      	movs	r2, #0
 800852a:	f7f8 f885 	bl	8000638 <__aeabi_dmul>
 800852e:	4b08      	ldr	r3, [pc, #32]	@ (8008550 <_dtoa_r+0x5c8>)
 8008530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008534:	2200      	movs	r2, #0
 8008536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800853a:	f7f8 f87d 	bl	8000638 <__aeabi_dmul>
 800853e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008542:	e7c4      	b.n	80084ce <_dtoa_r+0x546>
 8008544:	0800b600 	.word	0x0800b600
 8008548:	0800b5d8 	.word	0x0800b5d8
 800854c:	3ff00000 	.word	0x3ff00000
 8008550:	40240000 	.word	0x40240000
 8008554:	401c0000 	.word	0x401c0000
 8008558:	40140000 	.word	0x40140000
 800855c:	3fe00000 	.word	0x3fe00000
 8008560:	4631      	mov	r1, r6
 8008562:	4628      	mov	r0, r5
 8008564:	f7f8 f868 	bl	8000638 <__aeabi_dmul>
 8008568:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800856c:	9415      	str	r4, [sp, #84]	@ 0x54
 800856e:	4656      	mov	r6, sl
 8008570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008574:	f7f8 fb10 	bl	8000b98 <__aeabi_d2iz>
 8008578:	4605      	mov	r5, r0
 800857a:	f7f7 fff3 	bl	8000564 <__aeabi_i2d>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008586:	f7f7 fe9f 	bl	80002c8 <__aeabi_dsub>
 800858a:	3530      	adds	r5, #48	@ 0x30
 800858c:	f806 5b01 	strb.w	r5, [r6], #1
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	42a6      	cmp	r6, r4
 8008596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800859a:	f04f 0200 	mov.w	r2, #0
 800859e:	d124      	bne.n	80085ea <_dtoa_r+0x662>
 80085a0:	4bac      	ldr	r3, [pc, #688]	@ (8008854 <_dtoa_r+0x8cc>)
 80085a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80085a6:	f7f7 fe91 	bl	80002cc <__adddf3>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085b2:	f7f8 fad1 	bl	8000b58 <__aeabi_dcmpgt>
 80085b6:	2800      	cmp	r0, #0
 80085b8:	d145      	bne.n	8008646 <_dtoa_r+0x6be>
 80085ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085be:	49a5      	ldr	r1, [pc, #660]	@ (8008854 <_dtoa_r+0x8cc>)
 80085c0:	2000      	movs	r0, #0
 80085c2:	f7f7 fe81 	bl	80002c8 <__aeabi_dsub>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ce:	f7f8 faa5 	bl	8000b1c <__aeabi_dcmplt>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f43f aef5 	beq.w	80083c2 <_dtoa_r+0x43a>
 80085d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80085da:	1e73      	subs	r3, r6, #1
 80085dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80085de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80085e2:	2b30      	cmp	r3, #48	@ 0x30
 80085e4:	d0f8      	beq.n	80085d8 <_dtoa_r+0x650>
 80085e6:	9f04      	ldr	r7, [sp, #16]
 80085e8:	e73e      	b.n	8008468 <_dtoa_r+0x4e0>
 80085ea:	4b9b      	ldr	r3, [pc, #620]	@ (8008858 <_dtoa_r+0x8d0>)
 80085ec:	f7f8 f824 	bl	8000638 <__aeabi_dmul>
 80085f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085f4:	e7bc      	b.n	8008570 <_dtoa_r+0x5e8>
 80085f6:	d10c      	bne.n	8008612 <_dtoa_r+0x68a>
 80085f8:	4b98      	ldr	r3, [pc, #608]	@ (800885c <_dtoa_r+0x8d4>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008600:	f7f8 f81a 	bl	8000638 <__aeabi_dmul>
 8008604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008608:	f7f8 fa9c 	bl	8000b44 <__aeabi_dcmpge>
 800860c:	2800      	cmp	r0, #0
 800860e:	f000 8157 	beq.w	80088c0 <_dtoa_r+0x938>
 8008612:	2400      	movs	r4, #0
 8008614:	4625      	mov	r5, r4
 8008616:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008618:	43db      	mvns	r3, r3
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	4656      	mov	r6, sl
 800861e:	2700      	movs	r7, #0
 8008620:	4621      	mov	r1, r4
 8008622:	4658      	mov	r0, fp
 8008624:	f000 fbb4 	bl	8008d90 <_Bfree>
 8008628:	2d00      	cmp	r5, #0
 800862a:	d0dc      	beq.n	80085e6 <_dtoa_r+0x65e>
 800862c:	b12f      	cbz	r7, 800863a <_dtoa_r+0x6b2>
 800862e:	42af      	cmp	r7, r5
 8008630:	d003      	beq.n	800863a <_dtoa_r+0x6b2>
 8008632:	4639      	mov	r1, r7
 8008634:	4658      	mov	r0, fp
 8008636:	f000 fbab 	bl	8008d90 <_Bfree>
 800863a:	4629      	mov	r1, r5
 800863c:	4658      	mov	r0, fp
 800863e:	f000 fba7 	bl	8008d90 <_Bfree>
 8008642:	e7d0      	b.n	80085e6 <_dtoa_r+0x65e>
 8008644:	9704      	str	r7, [sp, #16]
 8008646:	4633      	mov	r3, r6
 8008648:	461e      	mov	r6, r3
 800864a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800864e:	2a39      	cmp	r2, #57	@ 0x39
 8008650:	d107      	bne.n	8008662 <_dtoa_r+0x6da>
 8008652:	459a      	cmp	sl, r3
 8008654:	d1f8      	bne.n	8008648 <_dtoa_r+0x6c0>
 8008656:	9a04      	ldr	r2, [sp, #16]
 8008658:	3201      	adds	r2, #1
 800865a:	9204      	str	r2, [sp, #16]
 800865c:	2230      	movs	r2, #48	@ 0x30
 800865e:	f88a 2000 	strb.w	r2, [sl]
 8008662:	781a      	ldrb	r2, [r3, #0]
 8008664:	3201      	adds	r2, #1
 8008666:	701a      	strb	r2, [r3, #0]
 8008668:	e7bd      	b.n	80085e6 <_dtoa_r+0x65e>
 800866a:	4b7b      	ldr	r3, [pc, #492]	@ (8008858 <_dtoa_r+0x8d0>)
 800866c:	2200      	movs	r2, #0
 800866e:	f7f7 ffe3 	bl	8000638 <__aeabi_dmul>
 8008672:	2200      	movs	r2, #0
 8008674:	2300      	movs	r3, #0
 8008676:	4604      	mov	r4, r0
 8008678:	460d      	mov	r5, r1
 800867a:	f7f8 fa45 	bl	8000b08 <__aeabi_dcmpeq>
 800867e:	2800      	cmp	r0, #0
 8008680:	f43f aebb 	beq.w	80083fa <_dtoa_r+0x472>
 8008684:	e6f0      	b.n	8008468 <_dtoa_r+0x4e0>
 8008686:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008688:	2a00      	cmp	r2, #0
 800868a:	f000 80db 	beq.w	8008844 <_dtoa_r+0x8bc>
 800868e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008690:	2a01      	cmp	r2, #1
 8008692:	f300 80bf 	bgt.w	8008814 <_dtoa_r+0x88c>
 8008696:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008698:	2a00      	cmp	r2, #0
 800869a:	f000 80b7 	beq.w	800880c <_dtoa_r+0x884>
 800869e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80086a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80086a4:	4646      	mov	r6, r8
 80086a6:	9a08      	ldr	r2, [sp, #32]
 80086a8:	2101      	movs	r1, #1
 80086aa:	441a      	add	r2, r3
 80086ac:	4658      	mov	r0, fp
 80086ae:	4498      	add	r8, r3
 80086b0:	9208      	str	r2, [sp, #32]
 80086b2:	f000 fc6b 	bl	8008f8c <__i2b>
 80086b6:	4605      	mov	r5, r0
 80086b8:	b15e      	cbz	r6, 80086d2 <_dtoa_r+0x74a>
 80086ba:	9b08      	ldr	r3, [sp, #32]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	dd08      	ble.n	80086d2 <_dtoa_r+0x74a>
 80086c0:	42b3      	cmp	r3, r6
 80086c2:	9a08      	ldr	r2, [sp, #32]
 80086c4:	bfa8      	it	ge
 80086c6:	4633      	movge	r3, r6
 80086c8:	eba8 0803 	sub.w	r8, r8, r3
 80086cc:	1af6      	subs	r6, r6, r3
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	9308      	str	r3, [sp, #32]
 80086d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086d4:	b1f3      	cbz	r3, 8008714 <_dtoa_r+0x78c>
 80086d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 80b7 	beq.w	800884c <_dtoa_r+0x8c4>
 80086de:	b18c      	cbz	r4, 8008704 <_dtoa_r+0x77c>
 80086e0:	4629      	mov	r1, r5
 80086e2:	4622      	mov	r2, r4
 80086e4:	4658      	mov	r0, fp
 80086e6:	f000 fd11 	bl	800910c <__pow5mult>
 80086ea:	464a      	mov	r2, r9
 80086ec:	4601      	mov	r1, r0
 80086ee:	4605      	mov	r5, r0
 80086f0:	4658      	mov	r0, fp
 80086f2:	f000 fc61 	bl	8008fb8 <__multiply>
 80086f6:	4649      	mov	r1, r9
 80086f8:	9004      	str	r0, [sp, #16]
 80086fa:	4658      	mov	r0, fp
 80086fc:	f000 fb48 	bl	8008d90 <_Bfree>
 8008700:	9b04      	ldr	r3, [sp, #16]
 8008702:	4699      	mov	r9, r3
 8008704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008706:	1b1a      	subs	r2, r3, r4
 8008708:	d004      	beq.n	8008714 <_dtoa_r+0x78c>
 800870a:	4649      	mov	r1, r9
 800870c:	4658      	mov	r0, fp
 800870e:	f000 fcfd 	bl	800910c <__pow5mult>
 8008712:	4681      	mov	r9, r0
 8008714:	2101      	movs	r1, #1
 8008716:	4658      	mov	r0, fp
 8008718:	f000 fc38 	bl	8008f8c <__i2b>
 800871c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800871e:	4604      	mov	r4, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 81cf 	beq.w	8008ac4 <_dtoa_r+0xb3c>
 8008726:	461a      	mov	r2, r3
 8008728:	4601      	mov	r1, r0
 800872a:	4658      	mov	r0, fp
 800872c:	f000 fcee 	bl	800910c <__pow5mult>
 8008730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008732:	2b01      	cmp	r3, #1
 8008734:	4604      	mov	r4, r0
 8008736:	f300 8095 	bgt.w	8008864 <_dtoa_r+0x8dc>
 800873a:	9b02      	ldr	r3, [sp, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	f040 8087 	bne.w	8008850 <_dtoa_r+0x8c8>
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008748:	2b00      	cmp	r3, #0
 800874a:	f040 8089 	bne.w	8008860 <_dtoa_r+0x8d8>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008754:	0d1b      	lsrs	r3, r3, #20
 8008756:	051b      	lsls	r3, r3, #20
 8008758:	b12b      	cbz	r3, 8008766 <_dtoa_r+0x7de>
 800875a:	9b08      	ldr	r3, [sp, #32]
 800875c:	3301      	adds	r3, #1
 800875e:	9308      	str	r3, [sp, #32]
 8008760:	f108 0801 	add.w	r8, r8, #1
 8008764:	2301      	movs	r3, #1
 8008766:	930a      	str	r3, [sp, #40]	@ 0x28
 8008768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 81b0 	beq.w	8008ad0 <_dtoa_r+0xb48>
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008776:	6918      	ldr	r0, [r3, #16]
 8008778:	f000 fbbc 	bl	8008ef4 <__hi0bits>
 800877c:	f1c0 0020 	rsb	r0, r0, #32
 8008780:	9b08      	ldr	r3, [sp, #32]
 8008782:	4418      	add	r0, r3
 8008784:	f010 001f 	ands.w	r0, r0, #31
 8008788:	d077      	beq.n	800887a <_dtoa_r+0x8f2>
 800878a:	f1c0 0320 	rsb	r3, r0, #32
 800878e:	2b04      	cmp	r3, #4
 8008790:	dd6b      	ble.n	800886a <_dtoa_r+0x8e2>
 8008792:	9b08      	ldr	r3, [sp, #32]
 8008794:	f1c0 001c 	rsb	r0, r0, #28
 8008798:	4403      	add	r3, r0
 800879a:	4480      	add	r8, r0
 800879c:	4406      	add	r6, r0
 800879e:	9308      	str	r3, [sp, #32]
 80087a0:	f1b8 0f00 	cmp.w	r8, #0
 80087a4:	dd05      	ble.n	80087b2 <_dtoa_r+0x82a>
 80087a6:	4649      	mov	r1, r9
 80087a8:	4642      	mov	r2, r8
 80087aa:	4658      	mov	r0, fp
 80087ac:	f000 fd08 	bl	80091c0 <__lshift>
 80087b0:	4681      	mov	r9, r0
 80087b2:	9b08      	ldr	r3, [sp, #32]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	dd05      	ble.n	80087c4 <_dtoa_r+0x83c>
 80087b8:	4621      	mov	r1, r4
 80087ba:	461a      	mov	r2, r3
 80087bc:	4658      	mov	r0, fp
 80087be:	f000 fcff 	bl	80091c0 <__lshift>
 80087c2:	4604      	mov	r4, r0
 80087c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d059      	beq.n	800887e <_dtoa_r+0x8f6>
 80087ca:	4621      	mov	r1, r4
 80087cc:	4648      	mov	r0, r9
 80087ce:	f000 fd63 	bl	8009298 <__mcmp>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	da53      	bge.n	800887e <_dtoa_r+0x8f6>
 80087d6:	1e7b      	subs	r3, r7, #1
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	4649      	mov	r1, r9
 80087dc:	2300      	movs	r3, #0
 80087de:	220a      	movs	r2, #10
 80087e0:	4658      	mov	r0, fp
 80087e2:	f000 faf7 	bl	8008dd4 <__multadd>
 80087e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087e8:	4681      	mov	r9, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 8172 	beq.w	8008ad4 <_dtoa_r+0xb4c>
 80087f0:	2300      	movs	r3, #0
 80087f2:	4629      	mov	r1, r5
 80087f4:	220a      	movs	r2, #10
 80087f6:	4658      	mov	r0, fp
 80087f8:	f000 faec 	bl	8008dd4 <__multadd>
 80087fc:	9b00      	ldr	r3, [sp, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	4605      	mov	r5, r0
 8008802:	dc67      	bgt.n	80088d4 <_dtoa_r+0x94c>
 8008804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008806:	2b02      	cmp	r3, #2
 8008808:	dc41      	bgt.n	800888e <_dtoa_r+0x906>
 800880a:	e063      	b.n	80088d4 <_dtoa_r+0x94c>
 800880c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800880e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008812:	e746      	b.n	80086a2 <_dtoa_r+0x71a>
 8008814:	9b07      	ldr	r3, [sp, #28]
 8008816:	1e5c      	subs	r4, r3, #1
 8008818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800881a:	42a3      	cmp	r3, r4
 800881c:	bfbf      	itttt	lt
 800881e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008820:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008822:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008824:	1ae3      	sublt	r3, r4, r3
 8008826:	bfb4      	ite	lt
 8008828:	18d2      	addlt	r2, r2, r3
 800882a:	1b1c      	subge	r4, r3, r4
 800882c:	9b07      	ldr	r3, [sp, #28]
 800882e:	bfbc      	itt	lt
 8008830:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008832:	2400      	movlt	r4, #0
 8008834:	2b00      	cmp	r3, #0
 8008836:	bfb5      	itete	lt
 8008838:	eba8 0603 	sublt.w	r6, r8, r3
 800883c:	9b07      	ldrge	r3, [sp, #28]
 800883e:	2300      	movlt	r3, #0
 8008840:	4646      	movge	r6, r8
 8008842:	e730      	b.n	80086a6 <_dtoa_r+0x71e>
 8008844:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008846:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008848:	4646      	mov	r6, r8
 800884a:	e735      	b.n	80086b8 <_dtoa_r+0x730>
 800884c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800884e:	e75c      	b.n	800870a <_dtoa_r+0x782>
 8008850:	2300      	movs	r3, #0
 8008852:	e788      	b.n	8008766 <_dtoa_r+0x7de>
 8008854:	3fe00000 	.word	0x3fe00000
 8008858:	40240000 	.word	0x40240000
 800885c:	40140000 	.word	0x40140000
 8008860:	9b02      	ldr	r3, [sp, #8]
 8008862:	e780      	b.n	8008766 <_dtoa_r+0x7de>
 8008864:	2300      	movs	r3, #0
 8008866:	930a      	str	r3, [sp, #40]	@ 0x28
 8008868:	e782      	b.n	8008770 <_dtoa_r+0x7e8>
 800886a:	d099      	beq.n	80087a0 <_dtoa_r+0x818>
 800886c:	9a08      	ldr	r2, [sp, #32]
 800886e:	331c      	adds	r3, #28
 8008870:	441a      	add	r2, r3
 8008872:	4498      	add	r8, r3
 8008874:	441e      	add	r6, r3
 8008876:	9208      	str	r2, [sp, #32]
 8008878:	e792      	b.n	80087a0 <_dtoa_r+0x818>
 800887a:	4603      	mov	r3, r0
 800887c:	e7f6      	b.n	800886c <_dtoa_r+0x8e4>
 800887e:	9b07      	ldr	r3, [sp, #28]
 8008880:	9704      	str	r7, [sp, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	dc20      	bgt.n	80088c8 <_dtoa_r+0x940>
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888a:	2b02      	cmp	r3, #2
 800888c:	dd1e      	ble.n	80088cc <_dtoa_r+0x944>
 800888e:	9b00      	ldr	r3, [sp, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f47f aec0 	bne.w	8008616 <_dtoa_r+0x68e>
 8008896:	4621      	mov	r1, r4
 8008898:	2205      	movs	r2, #5
 800889a:	4658      	mov	r0, fp
 800889c:	f000 fa9a 	bl	8008dd4 <__multadd>
 80088a0:	4601      	mov	r1, r0
 80088a2:	4604      	mov	r4, r0
 80088a4:	4648      	mov	r0, r9
 80088a6:	f000 fcf7 	bl	8009298 <__mcmp>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	f77f aeb3 	ble.w	8008616 <_dtoa_r+0x68e>
 80088b0:	4656      	mov	r6, sl
 80088b2:	2331      	movs	r3, #49	@ 0x31
 80088b4:	f806 3b01 	strb.w	r3, [r6], #1
 80088b8:	9b04      	ldr	r3, [sp, #16]
 80088ba:	3301      	adds	r3, #1
 80088bc:	9304      	str	r3, [sp, #16]
 80088be:	e6ae      	b.n	800861e <_dtoa_r+0x696>
 80088c0:	9c07      	ldr	r4, [sp, #28]
 80088c2:	9704      	str	r7, [sp, #16]
 80088c4:	4625      	mov	r5, r4
 80088c6:	e7f3      	b.n	80088b0 <_dtoa_r+0x928>
 80088c8:	9b07      	ldr	r3, [sp, #28]
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 8104 	beq.w	8008adc <_dtoa_r+0xb54>
 80088d4:	2e00      	cmp	r6, #0
 80088d6:	dd05      	ble.n	80088e4 <_dtoa_r+0x95c>
 80088d8:	4629      	mov	r1, r5
 80088da:	4632      	mov	r2, r6
 80088dc:	4658      	mov	r0, fp
 80088de:	f000 fc6f 	bl	80091c0 <__lshift>
 80088e2:	4605      	mov	r5, r0
 80088e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d05a      	beq.n	80089a0 <_dtoa_r+0xa18>
 80088ea:	6869      	ldr	r1, [r5, #4]
 80088ec:	4658      	mov	r0, fp
 80088ee:	f000 fa0f 	bl	8008d10 <_Balloc>
 80088f2:	4606      	mov	r6, r0
 80088f4:	b928      	cbnz	r0, 8008902 <_dtoa_r+0x97a>
 80088f6:	4b84      	ldr	r3, [pc, #528]	@ (8008b08 <_dtoa_r+0xb80>)
 80088f8:	4602      	mov	r2, r0
 80088fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80088fe:	f7ff bb5a 	b.w	8007fb6 <_dtoa_r+0x2e>
 8008902:	692a      	ldr	r2, [r5, #16]
 8008904:	3202      	adds	r2, #2
 8008906:	0092      	lsls	r2, r2, #2
 8008908:	f105 010c 	add.w	r1, r5, #12
 800890c:	300c      	adds	r0, #12
 800890e:	f002 f93b 	bl	800ab88 <memcpy>
 8008912:	2201      	movs	r2, #1
 8008914:	4631      	mov	r1, r6
 8008916:	4658      	mov	r0, fp
 8008918:	f000 fc52 	bl	80091c0 <__lshift>
 800891c:	f10a 0301 	add.w	r3, sl, #1
 8008920:	9307      	str	r3, [sp, #28]
 8008922:	9b00      	ldr	r3, [sp, #0]
 8008924:	4453      	add	r3, sl
 8008926:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008928:	9b02      	ldr	r3, [sp, #8]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	462f      	mov	r7, r5
 8008930:	930a      	str	r3, [sp, #40]	@ 0x28
 8008932:	4605      	mov	r5, r0
 8008934:	9b07      	ldr	r3, [sp, #28]
 8008936:	4621      	mov	r1, r4
 8008938:	3b01      	subs	r3, #1
 800893a:	4648      	mov	r0, r9
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	f7ff fa9b 	bl	8007e78 <quorem>
 8008942:	4639      	mov	r1, r7
 8008944:	9002      	str	r0, [sp, #8]
 8008946:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800894a:	4648      	mov	r0, r9
 800894c:	f000 fca4 	bl	8009298 <__mcmp>
 8008950:	462a      	mov	r2, r5
 8008952:	9008      	str	r0, [sp, #32]
 8008954:	4621      	mov	r1, r4
 8008956:	4658      	mov	r0, fp
 8008958:	f000 fcba 	bl	80092d0 <__mdiff>
 800895c:	68c2      	ldr	r2, [r0, #12]
 800895e:	4606      	mov	r6, r0
 8008960:	bb02      	cbnz	r2, 80089a4 <_dtoa_r+0xa1c>
 8008962:	4601      	mov	r1, r0
 8008964:	4648      	mov	r0, r9
 8008966:	f000 fc97 	bl	8009298 <__mcmp>
 800896a:	4602      	mov	r2, r0
 800896c:	4631      	mov	r1, r6
 800896e:	4658      	mov	r0, fp
 8008970:	920e      	str	r2, [sp, #56]	@ 0x38
 8008972:	f000 fa0d 	bl	8008d90 <_Bfree>
 8008976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008978:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800897a:	9e07      	ldr	r6, [sp, #28]
 800897c:	ea43 0102 	orr.w	r1, r3, r2
 8008980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008982:	4319      	orrs	r1, r3
 8008984:	d110      	bne.n	80089a8 <_dtoa_r+0xa20>
 8008986:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800898a:	d029      	beq.n	80089e0 <_dtoa_r+0xa58>
 800898c:	9b08      	ldr	r3, [sp, #32]
 800898e:	2b00      	cmp	r3, #0
 8008990:	dd02      	ble.n	8008998 <_dtoa_r+0xa10>
 8008992:	9b02      	ldr	r3, [sp, #8]
 8008994:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008998:	9b00      	ldr	r3, [sp, #0]
 800899a:	f883 8000 	strb.w	r8, [r3]
 800899e:	e63f      	b.n	8008620 <_dtoa_r+0x698>
 80089a0:	4628      	mov	r0, r5
 80089a2:	e7bb      	b.n	800891c <_dtoa_r+0x994>
 80089a4:	2201      	movs	r2, #1
 80089a6:	e7e1      	b.n	800896c <_dtoa_r+0x9e4>
 80089a8:	9b08      	ldr	r3, [sp, #32]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	db04      	blt.n	80089b8 <_dtoa_r+0xa30>
 80089ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089b0:	430b      	orrs	r3, r1
 80089b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089b4:	430b      	orrs	r3, r1
 80089b6:	d120      	bne.n	80089fa <_dtoa_r+0xa72>
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	dded      	ble.n	8008998 <_dtoa_r+0xa10>
 80089bc:	4649      	mov	r1, r9
 80089be:	2201      	movs	r2, #1
 80089c0:	4658      	mov	r0, fp
 80089c2:	f000 fbfd 	bl	80091c0 <__lshift>
 80089c6:	4621      	mov	r1, r4
 80089c8:	4681      	mov	r9, r0
 80089ca:	f000 fc65 	bl	8009298 <__mcmp>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	dc03      	bgt.n	80089da <_dtoa_r+0xa52>
 80089d2:	d1e1      	bne.n	8008998 <_dtoa_r+0xa10>
 80089d4:	f018 0f01 	tst.w	r8, #1
 80089d8:	d0de      	beq.n	8008998 <_dtoa_r+0xa10>
 80089da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80089de:	d1d8      	bne.n	8008992 <_dtoa_r+0xa0a>
 80089e0:	9a00      	ldr	r2, [sp, #0]
 80089e2:	2339      	movs	r3, #57	@ 0x39
 80089e4:	7013      	strb	r3, [r2, #0]
 80089e6:	4633      	mov	r3, r6
 80089e8:	461e      	mov	r6, r3
 80089ea:	3b01      	subs	r3, #1
 80089ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80089f0:	2a39      	cmp	r2, #57	@ 0x39
 80089f2:	d052      	beq.n	8008a9a <_dtoa_r+0xb12>
 80089f4:	3201      	adds	r2, #1
 80089f6:	701a      	strb	r2, [r3, #0]
 80089f8:	e612      	b.n	8008620 <_dtoa_r+0x698>
 80089fa:	2a00      	cmp	r2, #0
 80089fc:	dd07      	ble.n	8008a0e <_dtoa_r+0xa86>
 80089fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a02:	d0ed      	beq.n	80089e0 <_dtoa_r+0xa58>
 8008a04:	9a00      	ldr	r2, [sp, #0]
 8008a06:	f108 0301 	add.w	r3, r8, #1
 8008a0a:	7013      	strb	r3, [r2, #0]
 8008a0c:	e608      	b.n	8008620 <_dtoa_r+0x698>
 8008a0e:	9b07      	ldr	r3, [sp, #28]
 8008a10:	9a07      	ldr	r2, [sp, #28]
 8008a12:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d028      	beq.n	8008a6e <_dtoa_r+0xae6>
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	2300      	movs	r3, #0
 8008a20:	220a      	movs	r2, #10
 8008a22:	4658      	mov	r0, fp
 8008a24:	f000 f9d6 	bl	8008dd4 <__multadd>
 8008a28:	42af      	cmp	r7, r5
 8008a2a:	4681      	mov	r9, r0
 8008a2c:	f04f 0300 	mov.w	r3, #0
 8008a30:	f04f 020a 	mov.w	r2, #10
 8008a34:	4639      	mov	r1, r7
 8008a36:	4658      	mov	r0, fp
 8008a38:	d107      	bne.n	8008a4a <_dtoa_r+0xac2>
 8008a3a:	f000 f9cb 	bl	8008dd4 <__multadd>
 8008a3e:	4607      	mov	r7, r0
 8008a40:	4605      	mov	r5, r0
 8008a42:	9b07      	ldr	r3, [sp, #28]
 8008a44:	3301      	adds	r3, #1
 8008a46:	9307      	str	r3, [sp, #28]
 8008a48:	e774      	b.n	8008934 <_dtoa_r+0x9ac>
 8008a4a:	f000 f9c3 	bl	8008dd4 <__multadd>
 8008a4e:	4629      	mov	r1, r5
 8008a50:	4607      	mov	r7, r0
 8008a52:	2300      	movs	r3, #0
 8008a54:	220a      	movs	r2, #10
 8008a56:	4658      	mov	r0, fp
 8008a58:	f000 f9bc 	bl	8008dd4 <__multadd>
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	e7f0      	b.n	8008a42 <_dtoa_r+0xaba>
 8008a60:	9b00      	ldr	r3, [sp, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	bfcc      	ite	gt
 8008a66:	461e      	movgt	r6, r3
 8008a68:	2601      	movle	r6, #1
 8008a6a:	4456      	add	r6, sl
 8008a6c:	2700      	movs	r7, #0
 8008a6e:	4649      	mov	r1, r9
 8008a70:	2201      	movs	r2, #1
 8008a72:	4658      	mov	r0, fp
 8008a74:	f000 fba4 	bl	80091c0 <__lshift>
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4681      	mov	r9, r0
 8008a7c:	f000 fc0c 	bl	8009298 <__mcmp>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	dcb0      	bgt.n	80089e6 <_dtoa_r+0xa5e>
 8008a84:	d102      	bne.n	8008a8c <_dtoa_r+0xb04>
 8008a86:	f018 0f01 	tst.w	r8, #1
 8008a8a:	d1ac      	bne.n	80089e6 <_dtoa_r+0xa5e>
 8008a8c:	4633      	mov	r3, r6
 8008a8e:	461e      	mov	r6, r3
 8008a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a94:	2a30      	cmp	r2, #48	@ 0x30
 8008a96:	d0fa      	beq.n	8008a8e <_dtoa_r+0xb06>
 8008a98:	e5c2      	b.n	8008620 <_dtoa_r+0x698>
 8008a9a:	459a      	cmp	sl, r3
 8008a9c:	d1a4      	bne.n	80089e8 <_dtoa_r+0xa60>
 8008a9e:	9b04      	ldr	r3, [sp, #16]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	9304      	str	r3, [sp, #16]
 8008aa4:	2331      	movs	r3, #49	@ 0x31
 8008aa6:	f88a 3000 	strb.w	r3, [sl]
 8008aaa:	e5b9      	b.n	8008620 <_dtoa_r+0x698>
 8008aac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008aae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008b0c <_dtoa_r+0xb84>
 8008ab2:	b11b      	cbz	r3, 8008abc <_dtoa_r+0xb34>
 8008ab4:	f10a 0308 	add.w	r3, sl, #8
 8008ab8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008aba:	6013      	str	r3, [r2, #0]
 8008abc:	4650      	mov	r0, sl
 8008abe:	b019      	add	sp, #100	@ 0x64
 8008ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	f77f ae37 	ble.w	800873a <_dtoa_r+0x7b2>
 8008acc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ace:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ad0:	2001      	movs	r0, #1
 8008ad2:	e655      	b.n	8008780 <_dtoa_r+0x7f8>
 8008ad4:	9b00      	ldr	r3, [sp, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f77f aed6 	ble.w	8008888 <_dtoa_r+0x900>
 8008adc:	4656      	mov	r6, sl
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4648      	mov	r0, r9
 8008ae2:	f7ff f9c9 	bl	8007e78 <quorem>
 8008ae6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008aea:	f806 8b01 	strb.w	r8, [r6], #1
 8008aee:	9b00      	ldr	r3, [sp, #0]
 8008af0:	eba6 020a 	sub.w	r2, r6, sl
 8008af4:	4293      	cmp	r3, r2
 8008af6:	ddb3      	ble.n	8008a60 <_dtoa_r+0xad8>
 8008af8:	4649      	mov	r1, r9
 8008afa:	2300      	movs	r3, #0
 8008afc:	220a      	movs	r2, #10
 8008afe:	4658      	mov	r0, fp
 8008b00:	f000 f968 	bl	8008dd4 <__multadd>
 8008b04:	4681      	mov	r9, r0
 8008b06:	e7ea      	b.n	8008ade <_dtoa_r+0xb56>
 8008b08:	0800b561 	.word	0x0800b561
 8008b0c:	0800b4e5 	.word	0x0800b4e5

08008b10 <_free_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4605      	mov	r5, r0
 8008b14:	2900      	cmp	r1, #0
 8008b16:	d041      	beq.n	8008b9c <_free_r+0x8c>
 8008b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b1c:	1f0c      	subs	r4, r1, #4
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	bfb8      	it	lt
 8008b22:	18e4      	addlt	r4, r4, r3
 8008b24:	f000 f8e8 	bl	8008cf8 <__malloc_lock>
 8008b28:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba0 <_free_r+0x90>)
 8008b2a:	6813      	ldr	r3, [r2, #0]
 8008b2c:	b933      	cbnz	r3, 8008b3c <_free_r+0x2c>
 8008b2e:	6063      	str	r3, [r4, #4]
 8008b30:	6014      	str	r4, [r2, #0]
 8008b32:	4628      	mov	r0, r5
 8008b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b38:	f000 b8e4 	b.w	8008d04 <__malloc_unlock>
 8008b3c:	42a3      	cmp	r3, r4
 8008b3e:	d908      	bls.n	8008b52 <_free_r+0x42>
 8008b40:	6820      	ldr	r0, [r4, #0]
 8008b42:	1821      	adds	r1, r4, r0
 8008b44:	428b      	cmp	r3, r1
 8008b46:	bf01      	itttt	eq
 8008b48:	6819      	ldreq	r1, [r3, #0]
 8008b4a:	685b      	ldreq	r3, [r3, #4]
 8008b4c:	1809      	addeq	r1, r1, r0
 8008b4e:	6021      	streq	r1, [r4, #0]
 8008b50:	e7ed      	b.n	8008b2e <_free_r+0x1e>
 8008b52:	461a      	mov	r2, r3
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	b10b      	cbz	r3, 8008b5c <_free_r+0x4c>
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	d9fa      	bls.n	8008b52 <_free_r+0x42>
 8008b5c:	6811      	ldr	r1, [r2, #0]
 8008b5e:	1850      	adds	r0, r2, r1
 8008b60:	42a0      	cmp	r0, r4
 8008b62:	d10b      	bne.n	8008b7c <_free_r+0x6c>
 8008b64:	6820      	ldr	r0, [r4, #0]
 8008b66:	4401      	add	r1, r0
 8008b68:	1850      	adds	r0, r2, r1
 8008b6a:	4283      	cmp	r3, r0
 8008b6c:	6011      	str	r1, [r2, #0]
 8008b6e:	d1e0      	bne.n	8008b32 <_free_r+0x22>
 8008b70:	6818      	ldr	r0, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	6053      	str	r3, [r2, #4]
 8008b76:	4408      	add	r0, r1
 8008b78:	6010      	str	r0, [r2, #0]
 8008b7a:	e7da      	b.n	8008b32 <_free_r+0x22>
 8008b7c:	d902      	bls.n	8008b84 <_free_r+0x74>
 8008b7e:	230c      	movs	r3, #12
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	e7d6      	b.n	8008b32 <_free_r+0x22>
 8008b84:	6820      	ldr	r0, [r4, #0]
 8008b86:	1821      	adds	r1, r4, r0
 8008b88:	428b      	cmp	r3, r1
 8008b8a:	bf04      	itt	eq
 8008b8c:	6819      	ldreq	r1, [r3, #0]
 8008b8e:	685b      	ldreq	r3, [r3, #4]
 8008b90:	6063      	str	r3, [r4, #4]
 8008b92:	bf04      	itt	eq
 8008b94:	1809      	addeq	r1, r1, r0
 8008b96:	6021      	streq	r1, [r4, #0]
 8008b98:	6054      	str	r4, [r2, #4]
 8008b9a:	e7ca      	b.n	8008b32 <_free_r+0x22>
 8008b9c:	bd38      	pop	{r3, r4, r5, pc}
 8008b9e:	bf00      	nop
 8008ba0:	200006b8 	.word	0x200006b8

08008ba4 <malloc>:
 8008ba4:	4b02      	ldr	r3, [pc, #8]	@ (8008bb0 <malloc+0xc>)
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	f000 b825 	b.w	8008bf8 <_malloc_r>
 8008bae:	bf00      	nop
 8008bb0:	2000002c 	.word	0x2000002c

08008bb4 <sbrk_aligned>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8008bf4 <sbrk_aligned+0x40>)
 8008bb8:	460c      	mov	r4, r1
 8008bba:	6831      	ldr	r1, [r6, #0]
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	b911      	cbnz	r1, 8008bc6 <sbrk_aligned+0x12>
 8008bc0:	f001 ffd2 	bl	800ab68 <_sbrk_r>
 8008bc4:	6030      	str	r0, [r6, #0]
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f001 ffcd 	bl	800ab68 <_sbrk_r>
 8008bce:	1c43      	adds	r3, r0, #1
 8008bd0:	d103      	bne.n	8008bda <sbrk_aligned+0x26>
 8008bd2:	f04f 34ff 	mov.w	r4, #4294967295
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	bd70      	pop	{r4, r5, r6, pc}
 8008bda:	1cc4      	adds	r4, r0, #3
 8008bdc:	f024 0403 	bic.w	r4, r4, #3
 8008be0:	42a0      	cmp	r0, r4
 8008be2:	d0f8      	beq.n	8008bd6 <sbrk_aligned+0x22>
 8008be4:	1a21      	subs	r1, r4, r0
 8008be6:	4628      	mov	r0, r5
 8008be8:	f001 ffbe 	bl	800ab68 <_sbrk_r>
 8008bec:	3001      	adds	r0, #1
 8008bee:	d1f2      	bne.n	8008bd6 <sbrk_aligned+0x22>
 8008bf0:	e7ef      	b.n	8008bd2 <sbrk_aligned+0x1e>
 8008bf2:	bf00      	nop
 8008bf4:	200006b4 	.word	0x200006b4

08008bf8 <_malloc_r>:
 8008bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	1ccd      	adds	r5, r1, #3
 8008bfe:	f025 0503 	bic.w	r5, r5, #3
 8008c02:	3508      	adds	r5, #8
 8008c04:	2d0c      	cmp	r5, #12
 8008c06:	bf38      	it	cc
 8008c08:	250c      	movcc	r5, #12
 8008c0a:	2d00      	cmp	r5, #0
 8008c0c:	4606      	mov	r6, r0
 8008c0e:	db01      	blt.n	8008c14 <_malloc_r+0x1c>
 8008c10:	42a9      	cmp	r1, r5
 8008c12:	d904      	bls.n	8008c1e <_malloc_r+0x26>
 8008c14:	230c      	movs	r3, #12
 8008c16:	6033      	str	r3, [r6, #0]
 8008c18:	2000      	movs	r0, #0
 8008c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cf4 <_malloc_r+0xfc>
 8008c22:	f000 f869 	bl	8008cf8 <__malloc_lock>
 8008c26:	f8d8 3000 	ldr.w	r3, [r8]
 8008c2a:	461c      	mov	r4, r3
 8008c2c:	bb44      	cbnz	r4, 8008c80 <_malloc_r+0x88>
 8008c2e:	4629      	mov	r1, r5
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7ff ffbf 	bl	8008bb4 <sbrk_aligned>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	4604      	mov	r4, r0
 8008c3a:	d158      	bne.n	8008cee <_malloc_r+0xf6>
 8008c3c:	f8d8 4000 	ldr.w	r4, [r8]
 8008c40:	4627      	mov	r7, r4
 8008c42:	2f00      	cmp	r7, #0
 8008c44:	d143      	bne.n	8008cce <_malloc_r+0xd6>
 8008c46:	2c00      	cmp	r4, #0
 8008c48:	d04b      	beq.n	8008ce2 <_malloc_r+0xea>
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	4630      	mov	r0, r6
 8008c50:	eb04 0903 	add.w	r9, r4, r3
 8008c54:	f001 ff88 	bl	800ab68 <_sbrk_r>
 8008c58:	4581      	cmp	r9, r0
 8008c5a:	d142      	bne.n	8008ce2 <_malloc_r+0xea>
 8008c5c:	6821      	ldr	r1, [r4, #0]
 8008c5e:	1a6d      	subs	r5, r5, r1
 8008c60:	4629      	mov	r1, r5
 8008c62:	4630      	mov	r0, r6
 8008c64:	f7ff ffa6 	bl	8008bb4 <sbrk_aligned>
 8008c68:	3001      	adds	r0, #1
 8008c6a:	d03a      	beq.n	8008ce2 <_malloc_r+0xea>
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	442b      	add	r3, r5
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	f8d8 3000 	ldr.w	r3, [r8]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	bb62      	cbnz	r2, 8008cd4 <_malloc_r+0xdc>
 8008c7a:	f8c8 7000 	str.w	r7, [r8]
 8008c7e:	e00f      	b.n	8008ca0 <_malloc_r+0xa8>
 8008c80:	6822      	ldr	r2, [r4, #0]
 8008c82:	1b52      	subs	r2, r2, r5
 8008c84:	d420      	bmi.n	8008cc8 <_malloc_r+0xd0>
 8008c86:	2a0b      	cmp	r2, #11
 8008c88:	d917      	bls.n	8008cba <_malloc_r+0xc2>
 8008c8a:	1961      	adds	r1, r4, r5
 8008c8c:	42a3      	cmp	r3, r4
 8008c8e:	6025      	str	r5, [r4, #0]
 8008c90:	bf18      	it	ne
 8008c92:	6059      	strne	r1, [r3, #4]
 8008c94:	6863      	ldr	r3, [r4, #4]
 8008c96:	bf08      	it	eq
 8008c98:	f8c8 1000 	streq.w	r1, [r8]
 8008c9c:	5162      	str	r2, [r4, r5]
 8008c9e:	604b      	str	r3, [r1, #4]
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f000 f82f 	bl	8008d04 <__malloc_unlock>
 8008ca6:	f104 000b 	add.w	r0, r4, #11
 8008caa:	1d23      	adds	r3, r4, #4
 8008cac:	f020 0007 	bic.w	r0, r0, #7
 8008cb0:	1ac2      	subs	r2, r0, r3
 8008cb2:	bf1c      	itt	ne
 8008cb4:	1a1b      	subne	r3, r3, r0
 8008cb6:	50a3      	strne	r3, [r4, r2]
 8008cb8:	e7af      	b.n	8008c1a <_malloc_r+0x22>
 8008cba:	6862      	ldr	r2, [r4, #4]
 8008cbc:	42a3      	cmp	r3, r4
 8008cbe:	bf0c      	ite	eq
 8008cc0:	f8c8 2000 	streq.w	r2, [r8]
 8008cc4:	605a      	strne	r2, [r3, #4]
 8008cc6:	e7eb      	b.n	8008ca0 <_malloc_r+0xa8>
 8008cc8:	4623      	mov	r3, r4
 8008cca:	6864      	ldr	r4, [r4, #4]
 8008ccc:	e7ae      	b.n	8008c2c <_malloc_r+0x34>
 8008cce:	463c      	mov	r4, r7
 8008cd0:	687f      	ldr	r7, [r7, #4]
 8008cd2:	e7b6      	b.n	8008c42 <_malloc_r+0x4a>
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	d1fb      	bne.n	8008cd4 <_malloc_r+0xdc>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	6053      	str	r3, [r2, #4]
 8008ce0:	e7de      	b.n	8008ca0 <_malloc_r+0xa8>
 8008ce2:	230c      	movs	r3, #12
 8008ce4:	6033      	str	r3, [r6, #0]
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	f000 f80c 	bl	8008d04 <__malloc_unlock>
 8008cec:	e794      	b.n	8008c18 <_malloc_r+0x20>
 8008cee:	6005      	str	r5, [r0, #0]
 8008cf0:	e7d6      	b.n	8008ca0 <_malloc_r+0xa8>
 8008cf2:	bf00      	nop
 8008cf4:	200006b8 	.word	0x200006b8

08008cf8 <__malloc_lock>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	@ (8008d00 <__malloc_lock+0x8>)
 8008cfa:	f7ff b8b4 	b.w	8007e66 <__retarget_lock_acquire_recursive>
 8008cfe:	bf00      	nop
 8008d00:	200006b0 	.word	0x200006b0

08008d04 <__malloc_unlock>:
 8008d04:	4801      	ldr	r0, [pc, #4]	@ (8008d0c <__malloc_unlock+0x8>)
 8008d06:	f7ff b8af 	b.w	8007e68 <__retarget_lock_release_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	200006b0 	.word	0x200006b0

08008d10 <_Balloc>:
 8008d10:	b570      	push	{r4, r5, r6, lr}
 8008d12:	69c6      	ldr	r6, [r0, #28]
 8008d14:	4604      	mov	r4, r0
 8008d16:	460d      	mov	r5, r1
 8008d18:	b976      	cbnz	r6, 8008d38 <_Balloc+0x28>
 8008d1a:	2010      	movs	r0, #16
 8008d1c:	f7ff ff42 	bl	8008ba4 <malloc>
 8008d20:	4602      	mov	r2, r0
 8008d22:	61e0      	str	r0, [r4, #28]
 8008d24:	b920      	cbnz	r0, 8008d30 <_Balloc+0x20>
 8008d26:	4b18      	ldr	r3, [pc, #96]	@ (8008d88 <_Balloc+0x78>)
 8008d28:	4818      	ldr	r0, [pc, #96]	@ (8008d8c <_Balloc+0x7c>)
 8008d2a:	216b      	movs	r1, #107	@ 0x6b
 8008d2c:	f001 ff44 	bl	800abb8 <__assert_func>
 8008d30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d34:	6006      	str	r6, [r0, #0]
 8008d36:	60c6      	str	r6, [r0, #12]
 8008d38:	69e6      	ldr	r6, [r4, #28]
 8008d3a:	68f3      	ldr	r3, [r6, #12]
 8008d3c:	b183      	cbz	r3, 8008d60 <_Balloc+0x50>
 8008d3e:	69e3      	ldr	r3, [r4, #28]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d46:	b9b8      	cbnz	r0, 8008d78 <_Balloc+0x68>
 8008d48:	2101      	movs	r1, #1
 8008d4a:	fa01 f605 	lsl.w	r6, r1, r5
 8008d4e:	1d72      	adds	r2, r6, #5
 8008d50:	0092      	lsls	r2, r2, #2
 8008d52:	4620      	mov	r0, r4
 8008d54:	f001 ff4e 	bl	800abf4 <_calloc_r>
 8008d58:	b160      	cbz	r0, 8008d74 <_Balloc+0x64>
 8008d5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d5e:	e00e      	b.n	8008d7e <_Balloc+0x6e>
 8008d60:	2221      	movs	r2, #33	@ 0x21
 8008d62:	2104      	movs	r1, #4
 8008d64:	4620      	mov	r0, r4
 8008d66:	f001 ff45 	bl	800abf4 <_calloc_r>
 8008d6a:	69e3      	ldr	r3, [r4, #28]
 8008d6c:	60f0      	str	r0, [r6, #12]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1e4      	bne.n	8008d3e <_Balloc+0x2e>
 8008d74:	2000      	movs	r0, #0
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
 8008d78:	6802      	ldr	r2, [r0, #0]
 8008d7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d84:	e7f7      	b.n	8008d76 <_Balloc+0x66>
 8008d86:	bf00      	nop
 8008d88:	0800b4f2 	.word	0x0800b4f2
 8008d8c:	0800b572 	.word	0x0800b572

08008d90 <_Bfree>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	69c6      	ldr	r6, [r0, #28]
 8008d94:	4605      	mov	r5, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	b976      	cbnz	r6, 8008db8 <_Bfree+0x28>
 8008d9a:	2010      	movs	r0, #16
 8008d9c:	f7ff ff02 	bl	8008ba4 <malloc>
 8008da0:	4602      	mov	r2, r0
 8008da2:	61e8      	str	r0, [r5, #28]
 8008da4:	b920      	cbnz	r0, 8008db0 <_Bfree+0x20>
 8008da6:	4b09      	ldr	r3, [pc, #36]	@ (8008dcc <_Bfree+0x3c>)
 8008da8:	4809      	ldr	r0, [pc, #36]	@ (8008dd0 <_Bfree+0x40>)
 8008daa:	218f      	movs	r1, #143	@ 0x8f
 8008dac:	f001 ff04 	bl	800abb8 <__assert_func>
 8008db0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008db4:	6006      	str	r6, [r0, #0]
 8008db6:	60c6      	str	r6, [r0, #12]
 8008db8:	b13c      	cbz	r4, 8008dca <_Bfree+0x3a>
 8008dba:	69eb      	ldr	r3, [r5, #28]
 8008dbc:	6862      	ldr	r2, [r4, #4]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dc4:	6021      	str	r1, [r4, #0]
 8008dc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dca:	bd70      	pop	{r4, r5, r6, pc}
 8008dcc:	0800b4f2 	.word	0x0800b4f2
 8008dd0:	0800b572 	.word	0x0800b572

08008dd4 <__multadd>:
 8008dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd8:	690d      	ldr	r5, [r1, #16]
 8008dda:	4607      	mov	r7, r0
 8008ddc:	460c      	mov	r4, r1
 8008dde:	461e      	mov	r6, r3
 8008de0:	f101 0c14 	add.w	ip, r1, #20
 8008de4:	2000      	movs	r0, #0
 8008de6:	f8dc 3000 	ldr.w	r3, [ip]
 8008dea:	b299      	uxth	r1, r3
 8008dec:	fb02 6101 	mla	r1, r2, r1, r6
 8008df0:	0c1e      	lsrs	r6, r3, #16
 8008df2:	0c0b      	lsrs	r3, r1, #16
 8008df4:	fb02 3306 	mla	r3, r2, r6, r3
 8008df8:	b289      	uxth	r1, r1
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e00:	4285      	cmp	r5, r0
 8008e02:	f84c 1b04 	str.w	r1, [ip], #4
 8008e06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e0a:	dcec      	bgt.n	8008de6 <__multadd+0x12>
 8008e0c:	b30e      	cbz	r6, 8008e52 <__multadd+0x7e>
 8008e0e:	68a3      	ldr	r3, [r4, #8]
 8008e10:	42ab      	cmp	r3, r5
 8008e12:	dc19      	bgt.n	8008e48 <__multadd+0x74>
 8008e14:	6861      	ldr	r1, [r4, #4]
 8008e16:	4638      	mov	r0, r7
 8008e18:	3101      	adds	r1, #1
 8008e1a:	f7ff ff79 	bl	8008d10 <_Balloc>
 8008e1e:	4680      	mov	r8, r0
 8008e20:	b928      	cbnz	r0, 8008e2e <__multadd+0x5a>
 8008e22:	4602      	mov	r2, r0
 8008e24:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <__multadd+0x84>)
 8008e26:	480d      	ldr	r0, [pc, #52]	@ (8008e5c <__multadd+0x88>)
 8008e28:	21ba      	movs	r1, #186	@ 0xba
 8008e2a:	f001 fec5 	bl	800abb8 <__assert_func>
 8008e2e:	6922      	ldr	r2, [r4, #16]
 8008e30:	3202      	adds	r2, #2
 8008e32:	f104 010c 	add.w	r1, r4, #12
 8008e36:	0092      	lsls	r2, r2, #2
 8008e38:	300c      	adds	r0, #12
 8008e3a:	f001 fea5 	bl	800ab88 <memcpy>
 8008e3e:	4621      	mov	r1, r4
 8008e40:	4638      	mov	r0, r7
 8008e42:	f7ff ffa5 	bl	8008d90 <_Bfree>
 8008e46:	4644      	mov	r4, r8
 8008e48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e4c:	3501      	adds	r5, #1
 8008e4e:	615e      	str	r6, [r3, #20]
 8008e50:	6125      	str	r5, [r4, #16]
 8008e52:	4620      	mov	r0, r4
 8008e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e58:	0800b561 	.word	0x0800b561
 8008e5c:	0800b572 	.word	0x0800b572

08008e60 <__s2b>:
 8008e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e64:	460c      	mov	r4, r1
 8008e66:	4615      	mov	r5, r2
 8008e68:	461f      	mov	r7, r3
 8008e6a:	2209      	movs	r2, #9
 8008e6c:	3308      	adds	r3, #8
 8008e6e:	4606      	mov	r6, r0
 8008e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e74:	2100      	movs	r1, #0
 8008e76:	2201      	movs	r2, #1
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	db09      	blt.n	8008e90 <__s2b+0x30>
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f7ff ff47 	bl	8008d10 <_Balloc>
 8008e82:	b940      	cbnz	r0, 8008e96 <__s2b+0x36>
 8008e84:	4602      	mov	r2, r0
 8008e86:	4b19      	ldr	r3, [pc, #100]	@ (8008eec <__s2b+0x8c>)
 8008e88:	4819      	ldr	r0, [pc, #100]	@ (8008ef0 <__s2b+0x90>)
 8008e8a:	21d3      	movs	r1, #211	@ 0xd3
 8008e8c:	f001 fe94 	bl	800abb8 <__assert_func>
 8008e90:	0052      	lsls	r2, r2, #1
 8008e92:	3101      	adds	r1, #1
 8008e94:	e7f0      	b.n	8008e78 <__s2b+0x18>
 8008e96:	9b08      	ldr	r3, [sp, #32]
 8008e98:	6143      	str	r3, [r0, #20]
 8008e9a:	2d09      	cmp	r5, #9
 8008e9c:	f04f 0301 	mov.w	r3, #1
 8008ea0:	6103      	str	r3, [r0, #16]
 8008ea2:	dd16      	ble.n	8008ed2 <__s2b+0x72>
 8008ea4:	f104 0909 	add.w	r9, r4, #9
 8008ea8:	46c8      	mov	r8, r9
 8008eaa:	442c      	add	r4, r5
 8008eac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008eb0:	4601      	mov	r1, r0
 8008eb2:	3b30      	subs	r3, #48	@ 0x30
 8008eb4:	220a      	movs	r2, #10
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f7ff ff8c 	bl	8008dd4 <__multadd>
 8008ebc:	45a0      	cmp	r8, r4
 8008ebe:	d1f5      	bne.n	8008eac <__s2b+0x4c>
 8008ec0:	f1a5 0408 	sub.w	r4, r5, #8
 8008ec4:	444c      	add	r4, r9
 8008ec6:	1b2d      	subs	r5, r5, r4
 8008ec8:	1963      	adds	r3, r4, r5
 8008eca:	42bb      	cmp	r3, r7
 8008ecc:	db04      	blt.n	8008ed8 <__s2b+0x78>
 8008ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed2:	340a      	adds	r4, #10
 8008ed4:	2509      	movs	r5, #9
 8008ed6:	e7f6      	b.n	8008ec6 <__s2b+0x66>
 8008ed8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008edc:	4601      	mov	r1, r0
 8008ede:	3b30      	subs	r3, #48	@ 0x30
 8008ee0:	220a      	movs	r2, #10
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f7ff ff76 	bl	8008dd4 <__multadd>
 8008ee8:	e7ee      	b.n	8008ec8 <__s2b+0x68>
 8008eea:	bf00      	nop
 8008eec:	0800b561 	.word	0x0800b561
 8008ef0:	0800b572 	.word	0x0800b572

08008ef4 <__hi0bits>:
 8008ef4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ef8:	4603      	mov	r3, r0
 8008efa:	bf36      	itet	cc
 8008efc:	0403      	lslcc	r3, r0, #16
 8008efe:	2000      	movcs	r0, #0
 8008f00:	2010      	movcc	r0, #16
 8008f02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f06:	bf3c      	itt	cc
 8008f08:	021b      	lslcc	r3, r3, #8
 8008f0a:	3008      	addcc	r0, #8
 8008f0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f10:	bf3c      	itt	cc
 8008f12:	011b      	lslcc	r3, r3, #4
 8008f14:	3004      	addcc	r0, #4
 8008f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f1a:	bf3c      	itt	cc
 8008f1c:	009b      	lslcc	r3, r3, #2
 8008f1e:	3002      	addcc	r0, #2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	db05      	blt.n	8008f30 <__hi0bits+0x3c>
 8008f24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f28:	f100 0001 	add.w	r0, r0, #1
 8008f2c:	bf08      	it	eq
 8008f2e:	2020      	moveq	r0, #32
 8008f30:	4770      	bx	lr

08008f32 <__lo0bits>:
 8008f32:	6803      	ldr	r3, [r0, #0]
 8008f34:	4602      	mov	r2, r0
 8008f36:	f013 0007 	ands.w	r0, r3, #7
 8008f3a:	d00b      	beq.n	8008f54 <__lo0bits+0x22>
 8008f3c:	07d9      	lsls	r1, r3, #31
 8008f3e:	d421      	bmi.n	8008f84 <__lo0bits+0x52>
 8008f40:	0798      	lsls	r0, r3, #30
 8008f42:	bf49      	itett	mi
 8008f44:	085b      	lsrmi	r3, r3, #1
 8008f46:	089b      	lsrpl	r3, r3, #2
 8008f48:	2001      	movmi	r0, #1
 8008f4a:	6013      	strmi	r3, [r2, #0]
 8008f4c:	bf5c      	itt	pl
 8008f4e:	6013      	strpl	r3, [r2, #0]
 8008f50:	2002      	movpl	r0, #2
 8008f52:	4770      	bx	lr
 8008f54:	b299      	uxth	r1, r3
 8008f56:	b909      	cbnz	r1, 8008f5c <__lo0bits+0x2a>
 8008f58:	0c1b      	lsrs	r3, r3, #16
 8008f5a:	2010      	movs	r0, #16
 8008f5c:	b2d9      	uxtb	r1, r3
 8008f5e:	b909      	cbnz	r1, 8008f64 <__lo0bits+0x32>
 8008f60:	3008      	adds	r0, #8
 8008f62:	0a1b      	lsrs	r3, r3, #8
 8008f64:	0719      	lsls	r1, r3, #28
 8008f66:	bf04      	itt	eq
 8008f68:	091b      	lsreq	r3, r3, #4
 8008f6a:	3004      	addeq	r0, #4
 8008f6c:	0799      	lsls	r1, r3, #30
 8008f6e:	bf04      	itt	eq
 8008f70:	089b      	lsreq	r3, r3, #2
 8008f72:	3002      	addeq	r0, #2
 8008f74:	07d9      	lsls	r1, r3, #31
 8008f76:	d403      	bmi.n	8008f80 <__lo0bits+0x4e>
 8008f78:	085b      	lsrs	r3, r3, #1
 8008f7a:	f100 0001 	add.w	r0, r0, #1
 8008f7e:	d003      	beq.n	8008f88 <__lo0bits+0x56>
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	4770      	bx	lr
 8008f84:	2000      	movs	r0, #0
 8008f86:	4770      	bx	lr
 8008f88:	2020      	movs	r0, #32
 8008f8a:	4770      	bx	lr

08008f8c <__i2b>:
 8008f8c:	b510      	push	{r4, lr}
 8008f8e:	460c      	mov	r4, r1
 8008f90:	2101      	movs	r1, #1
 8008f92:	f7ff febd 	bl	8008d10 <_Balloc>
 8008f96:	4602      	mov	r2, r0
 8008f98:	b928      	cbnz	r0, 8008fa6 <__i2b+0x1a>
 8008f9a:	4b05      	ldr	r3, [pc, #20]	@ (8008fb0 <__i2b+0x24>)
 8008f9c:	4805      	ldr	r0, [pc, #20]	@ (8008fb4 <__i2b+0x28>)
 8008f9e:	f240 1145 	movw	r1, #325	@ 0x145
 8008fa2:	f001 fe09 	bl	800abb8 <__assert_func>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	6144      	str	r4, [r0, #20]
 8008faa:	6103      	str	r3, [r0, #16]
 8008fac:	bd10      	pop	{r4, pc}
 8008fae:	bf00      	nop
 8008fb0:	0800b561 	.word	0x0800b561
 8008fb4:	0800b572 	.word	0x0800b572

08008fb8 <__multiply>:
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	4614      	mov	r4, r2
 8008fbe:	690a      	ldr	r2, [r1, #16]
 8008fc0:	6923      	ldr	r3, [r4, #16]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	bfa8      	it	ge
 8008fc6:	4623      	movge	r3, r4
 8008fc8:	460f      	mov	r7, r1
 8008fca:	bfa4      	itt	ge
 8008fcc:	460c      	movge	r4, r1
 8008fce:	461f      	movge	r7, r3
 8008fd0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008fd4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008fd8:	68a3      	ldr	r3, [r4, #8]
 8008fda:	6861      	ldr	r1, [r4, #4]
 8008fdc:	eb0a 0609 	add.w	r6, sl, r9
 8008fe0:	42b3      	cmp	r3, r6
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	bfb8      	it	lt
 8008fe6:	3101      	addlt	r1, #1
 8008fe8:	f7ff fe92 	bl	8008d10 <_Balloc>
 8008fec:	b930      	cbnz	r0, 8008ffc <__multiply+0x44>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	4b44      	ldr	r3, [pc, #272]	@ (8009104 <__multiply+0x14c>)
 8008ff2:	4845      	ldr	r0, [pc, #276]	@ (8009108 <__multiply+0x150>)
 8008ff4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ff8:	f001 fdde 	bl	800abb8 <__assert_func>
 8008ffc:	f100 0514 	add.w	r5, r0, #20
 8009000:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009004:	462b      	mov	r3, r5
 8009006:	2200      	movs	r2, #0
 8009008:	4543      	cmp	r3, r8
 800900a:	d321      	bcc.n	8009050 <__multiply+0x98>
 800900c:	f107 0114 	add.w	r1, r7, #20
 8009010:	f104 0214 	add.w	r2, r4, #20
 8009014:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009018:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800901c:	9302      	str	r3, [sp, #8]
 800901e:	1b13      	subs	r3, r2, r4
 8009020:	3b15      	subs	r3, #21
 8009022:	f023 0303 	bic.w	r3, r3, #3
 8009026:	3304      	adds	r3, #4
 8009028:	f104 0715 	add.w	r7, r4, #21
 800902c:	42ba      	cmp	r2, r7
 800902e:	bf38      	it	cc
 8009030:	2304      	movcc	r3, #4
 8009032:	9301      	str	r3, [sp, #4]
 8009034:	9b02      	ldr	r3, [sp, #8]
 8009036:	9103      	str	r1, [sp, #12]
 8009038:	428b      	cmp	r3, r1
 800903a:	d80c      	bhi.n	8009056 <__multiply+0x9e>
 800903c:	2e00      	cmp	r6, #0
 800903e:	dd03      	ble.n	8009048 <__multiply+0x90>
 8009040:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009044:	2b00      	cmp	r3, #0
 8009046:	d05b      	beq.n	8009100 <__multiply+0x148>
 8009048:	6106      	str	r6, [r0, #16]
 800904a:	b005      	add	sp, #20
 800904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009050:	f843 2b04 	str.w	r2, [r3], #4
 8009054:	e7d8      	b.n	8009008 <__multiply+0x50>
 8009056:	f8b1 a000 	ldrh.w	sl, [r1]
 800905a:	f1ba 0f00 	cmp.w	sl, #0
 800905e:	d024      	beq.n	80090aa <__multiply+0xf2>
 8009060:	f104 0e14 	add.w	lr, r4, #20
 8009064:	46a9      	mov	r9, r5
 8009066:	f04f 0c00 	mov.w	ip, #0
 800906a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800906e:	f8d9 3000 	ldr.w	r3, [r9]
 8009072:	fa1f fb87 	uxth.w	fp, r7
 8009076:	b29b      	uxth	r3, r3
 8009078:	fb0a 330b 	mla	r3, sl, fp, r3
 800907c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009080:	f8d9 7000 	ldr.w	r7, [r9]
 8009084:	4463      	add	r3, ip
 8009086:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800908a:	fb0a c70b 	mla	r7, sl, fp, ip
 800908e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009092:	b29b      	uxth	r3, r3
 8009094:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009098:	4572      	cmp	r2, lr
 800909a:	f849 3b04 	str.w	r3, [r9], #4
 800909e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80090a2:	d8e2      	bhi.n	800906a <__multiply+0xb2>
 80090a4:	9b01      	ldr	r3, [sp, #4]
 80090a6:	f845 c003 	str.w	ip, [r5, r3]
 80090aa:	9b03      	ldr	r3, [sp, #12]
 80090ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80090b0:	3104      	adds	r1, #4
 80090b2:	f1b9 0f00 	cmp.w	r9, #0
 80090b6:	d021      	beq.n	80090fc <__multiply+0x144>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	f104 0c14 	add.w	ip, r4, #20
 80090be:	46ae      	mov	lr, r5
 80090c0:	f04f 0a00 	mov.w	sl, #0
 80090c4:	f8bc b000 	ldrh.w	fp, [ip]
 80090c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80090cc:	fb09 770b 	mla	r7, r9, fp, r7
 80090d0:	4457      	add	r7, sl
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80090d8:	f84e 3b04 	str.w	r3, [lr], #4
 80090dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090e4:	f8be 3000 	ldrh.w	r3, [lr]
 80090e8:	fb09 330a 	mla	r3, r9, sl, r3
 80090ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80090f0:	4562      	cmp	r2, ip
 80090f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090f6:	d8e5      	bhi.n	80090c4 <__multiply+0x10c>
 80090f8:	9f01      	ldr	r7, [sp, #4]
 80090fa:	51eb      	str	r3, [r5, r7]
 80090fc:	3504      	adds	r5, #4
 80090fe:	e799      	b.n	8009034 <__multiply+0x7c>
 8009100:	3e01      	subs	r6, #1
 8009102:	e79b      	b.n	800903c <__multiply+0x84>
 8009104:	0800b561 	.word	0x0800b561
 8009108:	0800b572 	.word	0x0800b572

0800910c <__pow5mult>:
 800910c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009110:	4615      	mov	r5, r2
 8009112:	f012 0203 	ands.w	r2, r2, #3
 8009116:	4607      	mov	r7, r0
 8009118:	460e      	mov	r6, r1
 800911a:	d007      	beq.n	800912c <__pow5mult+0x20>
 800911c:	4c25      	ldr	r4, [pc, #148]	@ (80091b4 <__pow5mult+0xa8>)
 800911e:	3a01      	subs	r2, #1
 8009120:	2300      	movs	r3, #0
 8009122:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009126:	f7ff fe55 	bl	8008dd4 <__multadd>
 800912a:	4606      	mov	r6, r0
 800912c:	10ad      	asrs	r5, r5, #2
 800912e:	d03d      	beq.n	80091ac <__pow5mult+0xa0>
 8009130:	69fc      	ldr	r4, [r7, #28]
 8009132:	b97c      	cbnz	r4, 8009154 <__pow5mult+0x48>
 8009134:	2010      	movs	r0, #16
 8009136:	f7ff fd35 	bl	8008ba4 <malloc>
 800913a:	4602      	mov	r2, r0
 800913c:	61f8      	str	r0, [r7, #28]
 800913e:	b928      	cbnz	r0, 800914c <__pow5mult+0x40>
 8009140:	4b1d      	ldr	r3, [pc, #116]	@ (80091b8 <__pow5mult+0xac>)
 8009142:	481e      	ldr	r0, [pc, #120]	@ (80091bc <__pow5mult+0xb0>)
 8009144:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009148:	f001 fd36 	bl	800abb8 <__assert_func>
 800914c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009150:	6004      	str	r4, [r0, #0]
 8009152:	60c4      	str	r4, [r0, #12]
 8009154:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009158:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800915c:	b94c      	cbnz	r4, 8009172 <__pow5mult+0x66>
 800915e:	f240 2171 	movw	r1, #625	@ 0x271
 8009162:	4638      	mov	r0, r7
 8009164:	f7ff ff12 	bl	8008f8c <__i2b>
 8009168:	2300      	movs	r3, #0
 800916a:	f8c8 0008 	str.w	r0, [r8, #8]
 800916e:	4604      	mov	r4, r0
 8009170:	6003      	str	r3, [r0, #0]
 8009172:	f04f 0900 	mov.w	r9, #0
 8009176:	07eb      	lsls	r3, r5, #31
 8009178:	d50a      	bpl.n	8009190 <__pow5mult+0x84>
 800917a:	4631      	mov	r1, r6
 800917c:	4622      	mov	r2, r4
 800917e:	4638      	mov	r0, r7
 8009180:	f7ff ff1a 	bl	8008fb8 <__multiply>
 8009184:	4631      	mov	r1, r6
 8009186:	4680      	mov	r8, r0
 8009188:	4638      	mov	r0, r7
 800918a:	f7ff fe01 	bl	8008d90 <_Bfree>
 800918e:	4646      	mov	r6, r8
 8009190:	106d      	asrs	r5, r5, #1
 8009192:	d00b      	beq.n	80091ac <__pow5mult+0xa0>
 8009194:	6820      	ldr	r0, [r4, #0]
 8009196:	b938      	cbnz	r0, 80091a8 <__pow5mult+0x9c>
 8009198:	4622      	mov	r2, r4
 800919a:	4621      	mov	r1, r4
 800919c:	4638      	mov	r0, r7
 800919e:	f7ff ff0b 	bl	8008fb8 <__multiply>
 80091a2:	6020      	str	r0, [r4, #0]
 80091a4:	f8c0 9000 	str.w	r9, [r0]
 80091a8:	4604      	mov	r4, r0
 80091aa:	e7e4      	b.n	8009176 <__pow5mult+0x6a>
 80091ac:	4630      	mov	r0, r6
 80091ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091b2:	bf00      	nop
 80091b4:	0800b5cc 	.word	0x0800b5cc
 80091b8:	0800b4f2 	.word	0x0800b4f2
 80091bc:	0800b572 	.word	0x0800b572

080091c0 <__lshift>:
 80091c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c4:	460c      	mov	r4, r1
 80091c6:	6849      	ldr	r1, [r1, #4]
 80091c8:	6923      	ldr	r3, [r4, #16]
 80091ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091ce:	68a3      	ldr	r3, [r4, #8]
 80091d0:	4607      	mov	r7, r0
 80091d2:	4691      	mov	r9, r2
 80091d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091d8:	f108 0601 	add.w	r6, r8, #1
 80091dc:	42b3      	cmp	r3, r6
 80091de:	db0b      	blt.n	80091f8 <__lshift+0x38>
 80091e0:	4638      	mov	r0, r7
 80091e2:	f7ff fd95 	bl	8008d10 <_Balloc>
 80091e6:	4605      	mov	r5, r0
 80091e8:	b948      	cbnz	r0, 80091fe <__lshift+0x3e>
 80091ea:	4602      	mov	r2, r0
 80091ec:	4b28      	ldr	r3, [pc, #160]	@ (8009290 <__lshift+0xd0>)
 80091ee:	4829      	ldr	r0, [pc, #164]	@ (8009294 <__lshift+0xd4>)
 80091f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80091f4:	f001 fce0 	bl	800abb8 <__assert_func>
 80091f8:	3101      	adds	r1, #1
 80091fa:	005b      	lsls	r3, r3, #1
 80091fc:	e7ee      	b.n	80091dc <__lshift+0x1c>
 80091fe:	2300      	movs	r3, #0
 8009200:	f100 0114 	add.w	r1, r0, #20
 8009204:	f100 0210 	add.w	r2, r0, #16
 8009208:	4618      	mov	r0, r3
 800920a:	4553      	cmp	r3, sl
 800920c:	db33      	blt.n	8009276 <__lshift+0xb6>
 800920e:	6920      	ldr	r0, [r4, #16]
 8009210:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009214:	f104 0314 	add.w	r3, r4, #20
 8009218:	f019 091f 	ands.w	r9, r9, #31
 800921c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009220:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009224:	d02b      	beq.n	800927e <__lshift+0xbe>
 8009226:	f1c9 0e20 	rsb	lr, r9, #32
 800922a:	468a      	mov	sl, r1
 800922c:	2200      	movs	r2, #0
 800922e:	6818      	ldr	r0, [r3, #0]
 8009230:	fa00 f009 	lsl.w	r0, r0, r9
 8009234:	4310      	orrs	r0, r2
 8009236:	f84a 0b04 	str.w	r0, [sl], #4
 800923a:	f853 2b04 	ldr.w	r2, [r3], #4
 800923e:	459c      	cmp	ip, r3
 8009240:	fa22 f20e 	lsr.w	r2, r2, lr
 8009244:	d8f3      	bhi.n	800922e <__lshift+0x6e>
 8009246:	ebac 0304 	sub.w	r3, ip, r4
 800924a:	3b15      	subs	r3, #21
 800924c:	f023 0303 	bic.w	r3, r3, #3
 8009250:	3304      	adds	r3, #4
 8009252:	f104 0015 	add.w	r0, r4, #21
 8009256:	4584      	cmp	ip, r0
 8009258:	bf38      	it	cc
 800925a:	2304      	movcc	r3, #4
 800925c:	50ca      	str	r2, [r1, r3]
 800925e:	b10a      	cbz	r2, 8009264 <__lshift+0xa4>
 8009260:	f108 0602 	add.w	r6, r8, #2
 8009264:	3e01      	subs	r6, #1
 8009266:	4638      	mov	r0, r7
 8009268:	612e      	str	r6, [r5, #16]
 800926a:	4621      	mov	r1, r4
 800926c:	f7ff fd90 	bl	8008d90 <_Bfree>
 8009270:	4628      	mov	r0, r5
 8009272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009276:	f842 0f04 	str.w	r0, [r2, #4]!
 800927a:	3301      	adds	r3, #1
 800927c:	e7c5      	b.n	800920a <__lshift+0x4a>
 800927e:	3904      	subs	r1, #4
 8009280:	f853 2b04 	ldr.w	r2, [r3], #4
 8009284:	f841 2f04 	str.w	r2, [r1, #4]!
 8009288:	459c      	cmp	ip, r3
 800928a:	d8f9      	bhi.n	8009280 <__lshift+0xc0>
 800928c:	e7ea      	b.n	8009264 <__lshift+0xa4>
 800928e:	bf00      	nop
 8009290:	0800b561 	.word	0x0800b561
 8009294:	0800b572 	.word	0x0800b572

08009298 <__mcmp>:
 8009298:	690a      	ldr	r2, [r1, #16]
 800929a:	4603      	mov	r3, r0
 800929c:	6900      	ldr	r0, [r0, #16]
 800929e:	1a80      	subs	r0, r0, r2
 80092a0:	b530      	push	{r4, r5, lr}
 80092a2:	d10e      	bne.n	80092c2 <__mcmp+0x2a>
 80092a4:	3314      	adds	r3, #20
 80092a6:	3114      	adds	r1, #20
 80092a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092b8:	4295      	cmp	r5, r2
 80092ba:	d003      	beq.n	80092c4 <__mcmp+0x2c>
 80092bc:	d205      	bcs.n	80092ca <__mcmp+0x32>
 80092be:	f04f 30ff 	mov.w	r0, #4294967295
 80092c2:	bd30      	pop	{r4, r5, pc}
 80092c4:	42a3      	cmp	r3, r4
 80092c6:	d3f3      	bcc.n	80092b0 <__mcmp+0x18>
 80092c8:	e7fb      	b.n	80092c2 <__mcmp+0x2a>
 80092ca:	2001      	movs	r0, #1
 80092cc:	e7f9      	b.n	80092c2 <__mcmp+0x2a>
	...

080092d0 <__mdiff>:
 80092d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	4689      	mov	r9, r1
 80092d6:	4606      	mov	r6, r0
 80092d8:	4611      	mov	r1, r2
 80092da:	4648      	mov	r0, r9
 80092dc:	4614      	mov	r4, r2
 80092de:	f7ff ffdb 	bl	8009298 <__mcmp>
 80092e2:	1e05      	subs	r5, r0, #0
 80092e4:	d112      	bne.n	800930c <__mdiff+0x3c>
 80092e6:	4629      	mov	r1, r5
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff fd11 	bl	8008d10 <_Balloc>
 80092ee:	4602      	mov	r2, r0
 80092f0:	b928      	cbnz	r0, 80092fe <__mdiff+0x2e>
 80092f2:	4b3f      	ldr	r3, [pc, #252]	@ (80093f0 <__mdiff+0x120>)
 80092f4:	f240 2137 	movw	r1, #567	@ 0x237
 80092f8:	483e      	ldr	r0, [pc, #248]	@ (80093f4 <__mdiff+0x124>)
 80092fa:	f001 fc5d 	bl	800abb8 <__assert_func>
 80092fe:	2301      	movs	r3, #1
 8009300:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009304:	4610      	mov	r0, r2
 8009306:	b003      	add	sp, #12
 8009308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930c:	bfbc      	itt	lt
 800930e:	464b      	movlt	r3, r9
 8009310:	46a1      	movlt	r9, r4
 8009312:	4630      	mov	r0, r6
 8009314:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009318:	bfba      	itte	lt
 800931a:	461c      	movlt	r4, r3
 800931c:	2501      	movlt	r5, #1
 800931e:	2500      	movge	r5, #0
 8009320:	f7ff fcf6 	bl	8008d10 <_Balloc>
 8009324:	4602      	mov	r2, r0
 8009326:	b918      	cbnz	r0, 8009330 <__mdiff+0x60>
 8009328:	4b31      	ldr	r3, [pc, #196]	@ (80093f0 <__mdiff+0x120>)
 800932a:	f240 2145 	movw	r1, #581	@ 0x245
 800932e:	e7e3      	b.n	80092f8 <__mdiff+0x28>
 8009330:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009334:	6926      	ldr	r6, [r4, #16]
 8009336:	60c5      	str	r5, [r0, #12]
 8009338:	f109 0310 	add.w	r3, r9, #16
 800933c:	f109 0514 	add.w	r5, r9, #20
 8009340:	f104 0e14 	add.w	lr, r4, #20
 8009344:	f100 0b14 	add.w	fp, r0, #20
 8009348:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800934c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	46d9      	mov	r9, fp
 8009354:	f04f 0c00 	mov.w	ip, #0
 8009358:	9b01      	ldr	r3, [sp, #4]
 800935a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800935e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009362:	9301      	str	r3, [sp, #4]
 8009364:	fa1f f38a 	uxth.w	r3, sl
 8009368:	4619      	mov	r1, r3
 800936a:	b283      	uxth	r3, r0
 800936c:	1acb      	subs	r3, r1, r3
 800936e:	0c00      	lsrs	r0, r0, #16
 8009370:	4463      	add	r3, ip
 8009372:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009376:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800937a:	b29b      	uxth	r3, r3
 800937c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009380:	4576      	cmp	r6, lr
 8009382:	f849 3b04 	str.w	r3, [r9], #4
 8009386:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800938a:	d8e5      	bhi.n	8009358 <__mdiff+0x88>
 800938c:	1b33      	subs	r3, r6, r4
 800938e:	3b15      	subs	r3, #21
 8009390:	f023 0303 	bic.w	r3, r3, #3
 8009394:	3415      	adds	r4, #21
 8009396:	3304      	adds	r3, #4
 8009398:	42a6      	cmp	r6, r4
 800939a:	bf38      	it	cc
 800939c:	2304      	movcc	r3, #4
 800939e:	441d      	add	r5, r3
 80093a0:	445b      	add	r3, fp
 80093a2:	461e      	mov	r6, r3
 80093a4:	462c      	mov	r4, r5
 80093a6:	4544      	cmp	r4, r8
 80093a8:	d30e      	bcc.n	80093c8 <__mdiff+0xf8>
 80093aa:	f108 0103 	add.w	r1, r8, #3
 80093ae:	1b49      	subs	r1, r1, r5
 80093b0:	f021 0103 	bic.w	r1, r1, #3
 80093b4:	3d03      	subs	r5, #3
 80093b6:	45a8      	cmp	r8, r5
 80093b8:	bf38      	it	cc
 80093ba:	2100      	movcc	r1, #0
 80093bc:	440b      	add	r3, r1
 80093be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093c2:	b191      	cbz	r1, 80093ea <__mdiff+0x11a>
 80093c4:	6117      	str	r7, [r2, #16]
 80093c6:	e79d      	b.n	8009304 <__mdiff+0x34>
 80093c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80093cc:	46e6      	mov	lr, ip
 80093ce:	0c08      	lsrs	r0, r1, #16
 80093d0:	fa1c fc81 	uxtah	ip, ip, r1
 80093d4:	4471      	add	r1, lr
 80093d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80093da:	b289      	uxth	r1, r1
 80093dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093e0:	f846 1b04 	str.w	r1, [r6], #4
 80093e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093e8:	e7dd      	b.n	80093a6 <__mdiff+0xd6>
 80093ea:	3f01      	subs	r7, #1
 80093ec:	e7e7      	b.n	80093be <__mdiff+0xee>
 80093ee:	bf00      	nop
 80093f0:	0800b561 	.word	0x0800b561
 80093f4:	0800b572 	.word	0x0800b572

080093f8 <__ulp>:
 80093f8:	b082      	sub	sp, #8
 80093fa:	ed8d 0b00 	vstr	d0, [sp]
 80093fe:	9a01      	ldr	r2, [sp, #4]
 8009400:	4b0f      	ldr	r3, [pc, #60]	@ (8009440 <__ulp+0x48>)
 8009402:	4013      	ands	r3, r2
 8009404:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009408:	2b00      	cmp	r3, #0
 800940a:	dc08      	bgt.n	800941e <__ulp+0x26>
 800940c:	425b      	negs	r3, r3
 800940e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009412:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009416:	da04      	bge.n	8009422 <__ulp+0x2a>
 8009418:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800941c:	4113      	asrs	r3, r2
 800941e:	2200      	movs	r2, #0
 8009420:	e008      	b.n	8009434 <__ulp+0x3c>
 8009422:	f1a2 0314 	sub.w	r3, r2, #20
 8009426:	2b1e      	cmp	r3, #30
 8009428:	bfda      	itte	le
 800942a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800942e:	40da      	lsrle	r2, r3
 8009430:	2201      	movgt	r2, #1
 8009432:	2300      	movs	r3, #0
 8009434:	4619      	mov	r1, r3
 8009436:	4610      	mov	r0, r2
 8009438:	ec41 0b10 	vmov	d0, r0, r1
 800943c:	b002      	add	sp, #8
 800943e:	4770      	bx	lr
 8009440:	7ff00000 	.word	0x7ff00000

08009444 <__b2d>:
 8009444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009448:	6906      	ldr	r6, [r0, #16]
 800944a:	f100 0814 	add.w	r8, r0, #20
 800944e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009452:	1f37      	subs	r7, r6, #4
 8009454:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009458:	4610      	mov	r0, r2
 800945a:	f7ff fd4b 	bl	8008ef4 <__hi0bits>
 800945e:	f1c0 0320 	rsb	r3, r0, #32
 8009462:	280a      	cmp	r0, #10
 8009464:	600b      	str	r3, [r1, #0]
 8009466:	491b      	ldr	r1, [pc, #108]	@ (80094d4 <__b2d+0x90>)
 8009468:	dc15      	bgt.n	8009496 <__b2d+0x52>
 800946a:	f1c0 0c0b 	rsb	ip, r0, #11
 800946e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009472:	45b8      	cmp	r8, r7
 8009474:	ea43 0501 	orr.w	r5, r3, r1
 8009478:	bf34      	ite	cc
 800947a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800947e:	2300      	movcs	r3, #0
 8009480:	3015      	adds	r0, #21
 8009482:	fa02 f000 	lsl.w	r0, r2, r0
 8009486:	fa23 f30c 	lsr.w	r3, r3, ip
 800948a:	4303      	orrs	r3, r0
 800948c:	461c      	mov	r4, r3
 800948e:	ec45 4b10 	vmov	d0, r4, r5
 8009492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009496:	45b8      	cmp	r8, r7
 8009498:	bf3a      	itte	cc
 800949a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800949e:	f1a6 0708 	subcc.w	r7, r6, #8
 80094a2:	2300      	movcs	r3, #0
 80094a4:	380b      	subs	r0, #11
 80094a6:	d012      	beq.n	80094ce <__b2d+0x8a>
 80094a8:	f1c0 0120 	rsb	r1, r0, #32
 80094ac:	fa23 f401 	lsr.w	r4, r3, r1
 80094b0:	4082      	lsls	r2, r0
 80094b2:	4322      	orrs	r2, r4
 80094b4:	4547      	cmp	r7, r8
 80094b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80094ba:	bf8c      	ite	hi
 80094bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80094c0:	2200      	movls	r2, #0
 80094c2:	4083      	lsls	r3, r0
 80094c4:	40ca      	lsrs	r2, r1
 80094c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80094ca:	4313      	orrs	r3, r2
 80094cc:	e7de      	b.n	800948c <__b2d+0x48>
 80094ce:	ea42 0501 	orr.w	r5, r2, r1
 80094d2:	e7db      	b.n	800948c <__b2d+0x48>
 80094d4:	3ff00000 	.word	0x3ff00000

080094d8 <__d2b>:
 80094d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094dc:	460f      	mov	r7, r1
 80094de:	2101      	movs	r1, #1
 80094e0:	ec59 8b10 	vmov	r8, r9, d0
 80094e4:	4616      	mov	r6, r2
 80094e6:	f7ff fc13 	bl	8008d10 <_Balloc>
 80094ea:	4604      	mov	r4, r0
 80094ec:	b930      	cbnz	r0, 80094fc <__d2b+0x24>
 80094ee:	4602      	mov	r2, r0
 80094f0:	4b23      	ldr	r3, [pc, #140]	@ (8009580 <__d2b+0xa8>)
 80094f2:	4824      	ldr	r0, [pc, #144]	@ (8009584 <__d2b+0xac>)
 80094f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80094f8:	f001 fb5e 	bl	800abb8 <__assert_func>
 80094fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009504:	b10d      	cbz	r5, 800950a <__d2b+0x32>
 8009506:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800950a:	9301      	str	r3, [sp, #4]
 800950c:	f1b8 0300 	subs.w	r3, r8, #0
 8009510:	d023      	beq.n	800955a <__d2b+0x82>
 8009512:	4668      	mov	r0, sp
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	f7ff fd0c 	bl	8008f32 <__lo0bits>
 800951a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800951e:	b1d0      	cbz	r0, 8009556 <__d2b+0x7e>
 8009520:	f1c0 0320 	rsb	r3, r0, #32
 8009524:	fa02 f303 	lsl.w	r3, r2, r3
 8009528:	430b      	orrs	r3, r1
 800952a:	40c2      	lsrs	r2, r0
 800952c:	6163      	str	r3, [r4, #20]
 800952e:	9201      	str	r2, [sp, #4]
 8009530:	9b01      	ldr	r3, [sp, #4]
 8009532:	61a3      	str	r3, [r4, #24]
 8009534:	2b00      	cmp	r3, #0
 8009536:	bf0c      	ite	eq
 8009538:	2201      	moveq	r2, #1
 800953a:	2202      	movne	r2, #2
 800953c:	6122      	str	r2, [r4, #16]
 800953e:	b1a5      	cbz	r5, 800956a <__d2b+0x92>
 8009540:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009544:	4405      	add	r5, r0
 8009546:	603d      	str	r5, [r7, #0]
 8009548:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800954c:	6030      	str	r0, [r6, #0]
 800954e:	4620      	mov	r0, r4
 8009550:	b003      	add	sp, #12
 8009552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009556:	6161      	str	r1, [r4, #20]
 8009558:	e7ea      	b.n	8009530 <__d2b+0x58>
 800955a:	a801      	add	r0, sp, #4
 800955c:	f7ff fce9 	bl	8008f32 <__lo0bits>
 8009560:	9b01      	ldr	r3, [sp, #4]
 8009562:	6163      	str	r3, [r4, #20]
 8009564:	3020      	adds	r0, #32
 8009566:	2201      	movs	r2, #1
 8009568:	e7e8      	b.n	800953c <__d2b+0x64>
 800956a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800956e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009572:	6038      	str	r0, [r7, #0]
 8009574:	6918      	ldr	r0, [r3, #16]
 8009576:	f7ff fcbd 	bl	8008ef4 <__hi0bits>
 800957a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800957e:	e7e5      	b.n	800954c <__d2b+0x74>
 8009580:	0800b561 	.word	0x0800b561
 8009584:	0800b572 	.word	0x0800b572

08009588 <__ratio>:
 8009588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	b085      	sub	sp, #20
 800958e:	e9cd 1000 	strd	r1, r0, [sp]
 8009592:	a902      	add	r1, sp, #8
 8009594:	f7ff ff56 	bl	8009444 <__b2d>
 8009598:	9800      	ldr	r0, [sp, #0]
 800959a:	a903      	add	r1, sp, #12
 800959c:	ec55 4b10 	vmov	r4, r5, d0
 80095a0:	f7ff ff50 	bl	8009444 <__b2d>
 80095a4:	9b01      	ldr	r3, [sp, #4]
 80095a6:	6919      	ldr	r1, [r3, #16]
 80095a8:	9b00      	ldr	r3, [sp, #0]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	1ac9      	subs	r1, r1, r3
 80095ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80095b2:	1a9b      	subs	r3, r3, r2
 80095b4:	ec5b ab10 	vmov	sl, fp, d0
 80095b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80095bc:	2b00      	cmp	r3, #0
 80095be:	bfce      	itee	gt
 80095c0:	462a      	movgt	r2, r5
 80095c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80095c6:	465a      	movle	r2, fp
 80095c8:	462f      	mov	r7, r5
 80095ca:	46d9      	mov	r9, fp
 80095cc:	bfcc      	ite	gt
 80095ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80095d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80095d6:	464b      	mov	r3, r9
 80095d8:	4652      	mov	r2, sl
 80095da:	4620      	mov	r0, r4
 80095dc:	4639      	mov	r1, r7
 80095de:	f7f7 f955 	bl	800088c <__aeabi_ddiv>
 80095e2:	ec41 0b10 	vmov	d0, r0, r1
 80095e6:	b005      	add	sp, #20
 80095e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095ec <__copybits>:
 80095ec:	3901      	subs	r1, #1
 80095ee:	b570      	push	{r4, r5, r6, lr}
 80095f0:	1149      	asrs	r1, r1, #5
 80095f2:	6914      	ldr	r4, [r2, #16]
 80095f4:	3101      	adds	r1, #1
 80095f6:	f102 0314 	add.w	r3, r2, #20
 80095fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80095fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009602:	1f05      	subs	r5, r0, #4
 8009604:	42a3      	cmp	r3, r4
 8009606:	d30c      	bcc.n	8009622 <__copybits+0x36>
 8009608:	1aa3      	subs	r3, r4, r2
 800960a:	3b11      	subs	r3, #17
 800960c:	f023 0303 	bic.w	r3, r3, #3
 8009610:	3211      	adds	r2, #17
 8009612:	42a2      	cmp	r2, r4
 8009614:	bf88      	it	hi
 8009616:	2300      	movhi	r3, #0
 8009618:	4418      	add	r0, r3
 800961a:	2300      	movs	r3, #0
 800961c:	4288      	cmp	r0, r1
 800961e:	d305      	bcc.n	800962c <__copybits+0x40>
 8009620:	bd70      	pop	{r4, r5, r6, pc}
 8009622:	f853 6b04 	ldr.w	r6, [r3], #4
 8009626:	f845 6f04 	str.w	r6, [r5, #4]!
 800962a:	e7eb      	b.n	8009604 <__copybits+0x18>
 800962c:	f840 3b04 	str.w	r3, [r0], #4
 8009630:	e7f4      	b.n	800961c <__copybits+0x30>

08009632 <__any_on>:
 8009632:	f100 0214 	add.w	r2, r0, #20
 8009636:	6900      	ldr	r0, [r0, #16]
 8009638:	114b      	asrs	r3, r1, #5
 800963a:	4298      	cmp	r0, r3
 800963c:	b510      	push	{r4, lr}
 800963e:	db11      	blt.n	8009664 <__any_on+0x32>
 8009640:	dd0a      	ble.n	8009658 <__any_on+0x26>
 8009642:	f011 011f 	ands.w	r1, r1, #31
 8009646:	d007      	beq.n	8009658 <__any_on+0x26>
 8009648:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800964c:	fa24 f001 	lsr.w	r0, r4, r1
 8009650:	fa00 f101 	lsl.w	r1, r0, r1
 8009654:	428c      	cmp	r4, r1
 8009656:	d10b      	bne.n	8009670 <__any_on+0x3e>
 8009658:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800965c:	4293      	cmp	r3, r2
 800965e:	d803      	bhi.n	8009668 <__any_on+0x36>
 8009660:	2000      	movs	r0, #0
 8009662:	bd10      	pop	{r4, pc}
 8009664:	4603      	mov	r3, r0
 8009666:	e7f7      	b.n	8009658 <__any_on+0x26>
 8009668:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800966c:	2900      	cmp	r1, #0
 800966e:	d0f5      	beq.n	800965c <__any_on+0x2a>
 8009670:	2001      	movs	r0, #1
 8009672:	e7f6      	b.n	8009662 <__any_on+0x30>

08009674 <sulp>:
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	4604      	mov	r4, r0
 8009678:	460d      	mov	r5, r1
 800967a:	ec45 4b10 	vmov	d0, r4, r5
 800967e:	4616      	mov	r6, r2
 8009680:	f7ff feba 	bl	80093f8 <__ulp>
 8009684:	ec51 0b10 	vmov	r0, r1, d0
 8009688:	b17e      	cbz	r6, 80096aa <sulp+0x36>
 800968a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800968e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009692:	2b00      	cmp	r3, #0
 8009694:	dd09      	ble.n	80096aa <sulp+0x36>
 8009696:	051b      	lsls	r3, r3, #20
 8009698:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800969c:	2400      	movs	r4, #0
 800969e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80096a2:	4622      	mov	r2, r4
 80096a4:	462b      	mov	r3, r5
 80096a6:	f7f6 ffc7 	bl	8000638 <__aeabi_dmul>
 80096aa:	ec41 0b10 	vmov	d0, r0, r1
 80096ae:	bd70      	pop	{r4, r5, r6, pc}

080096b0 <_strtod_l>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	b09f      	sub	sp, #124	@ 0x7c
 80096b6:	460c      	mov	r4, r1
 80096b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80096ba:	2200      	movs	r2, #0
 80096bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80096be:	9005      	str	r0, [sp, #20]
 80096c0:	f04f 0a00 	mov.w	sl, #0
 80096c4:	f04f 0b00 	mov.w	fp, #0
 80096c8:	460a      	mov	r2, r1
 80096ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80096cc:	7811      	ldrb	r1, [r2, #0]
 80096ce:	292b      	cmp	r1, #43	@ 0x2b
 80096d0:	d04a      	beq.n	8009768 <_strtod_l+0xb8>
 80096d2:	d838      	bhi.n	8009746 <_strtod_l+0x96>
 80096d4:	290d      	cmp	r1, #13
 80096d6:	d832      	bhi.n	800973e <_strtod_l+0x8e>
 80096d8:	2908      	cmp	r1, #8
 80096da:	d832      	bhi.n	8009742 <_strtod_l+0x92>
 80096dc:	2900      	cmp	r1, #0
 80096de:	d03b      	beq.n	8009758 <_strtod_l+0xa8>
 80096e0:	2200      	movs	r2, #0
 80096e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80096e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80096e6:	782a      	ldrb	r2, [r5, #0]
 80096e8:	2a30      	cmp	r2, #48	@ 0x30
 80096ea:	f040 80b3 	bne.w	8009854 <_strtod_l+0x1a4>
 80096ee:	786a      	ldrb	r2, [r5, #1]
 80096f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80096f4:	2a58      	cmp	r2, #88	@ 0x58
 80096f6:	d16e      	bne.n	80097d6 <_strtod_l+0x126>
 80096f8:	9302      	str	r3, [sp, #8]
 80096fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	4a8e      	ldr	r2, [pc, #568]	@ (800993c <_strtod_l+0x28c>)
 8009704:	9805      	ldr	r0, [sp, #20]
 8009706:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009708:	a919      	add	r1, sp, #100	@ 0x64
 800970a:	f001 faef 	bl	800acec <__gethex>
 800970e:	f010 060f 	ands.w	r6, r0, #15
 8009712:	4604      	mov	r4, r0
 8009714:	d005      	beq.n	8009722 <_strtod_l+0x72>
 8009716:	2e06      	cmp	r6, #6
 8009718:	d128      	bne.n	800976c <_strtod_l+0xbc>
 800971a:	3501      	adds	r5, #1
 800971c:	2300      	movs	r3, #0
 800971e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009722:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009724:	2b00      	cmp	r3, #0
 8009726:	f040 858e 	bne.w	800a246 <_strtod_l+0xb96>
 800972a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800972c:	b1cb      	cbz	r3, 8009762 <_strtod_l+0xb2>
 800972e:	4652      	mov	r2, sl
 8009730:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009734:	ec43 2b10 	vmov	d0, r2, r3
 8009738:	b01f      	add	sp, #124	@ 0x7c
 800973a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800973e:	2920      	cmp	r1, #32
 8009740:	d1ce      	bne.n	80096e0 <_strtod_l+0x30>
 8009742:	3201      	adds	r2, #1
 8009744:	e7c1      	b.n	80096ca <_strtod_l+0x1a>
 8009746:	292d      	cmp	r1, #45	@ 0x2d
 8009748:	d1ca      	bne.n	80096e0 <_strtod_l+0x30>
 800974a:	2101      	movs	r1, #1
 800974c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800974e:	1c51      	adds	r1, r2, #1
 8009750:	9119      	str	r1, [sp, #100]	@ 0x64
 8009752:	7852      	ldrb	r2, [r2, #1]
 8009754:	2a00      	cmp	r2, #0
 8009756:	d1c5      	bne.n	80096e4 <_strtod_l+0x34>
 8009758:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800975a:	9419      	str	r4, [sp, #100]	@ 0x64
 800975c:	2b00      	cmp	r3, #0
 800975e:	f040 8570 	bne.w	800a242 <_strtod_l+0xb92>
 8009762:	4652      	mov	r2, sl
 8009764:	465b      	mov	r3, fp
 8009766:	e7e5      	b.n	8009734 <_strtod_l+0x84>
 8009768:	2100      	movs	r1, #0
 800976a:	e7ef      	b.n	800974c <_strtod_l+0x9c>
 800976c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800976e:	b13a      	cbz	r2, 8009780 <_strtod_l+0xd0>
 8009770:	2135      	movs	r1, #53	@ 0x35
 8009772:	a81c      	add	r0, sp, #112	@ 0x70
 8009774:	f7ff ff3a 	bl	80095ec <__copybits>
 8009778:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800977a:	9805      	ldr	r0, [sp, #20]
 800977c:	f7ff fb08 	bl	8008d90 <_Bfree>
 8009780:	3e01      	subs	r6, #1
 8009782:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009784:	2e04      	cmp	r6, #4
 8009786:	d806      	bhi.n	8009796 <_strtod_l+0xe6>
 8009788:	e8df f006 	tbb	[pc, r6]
 800978c:	201d0314 	.word	0x201d0314
 8009790:	14          	.byte	0x14
 8009791:	00          	.byte	0x00
 8009792:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009796:	05e1      	lsls	r1, r4, #23
 8009798:	bf48      	it	mi
 800979a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800979e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097a2:	0d1b      	lsrs	r3, r3, #20
 80097a4:	051b      	lsls	r3, r3, #20
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1bb      	bne.n	8009722 <_strtod_l+0x72>
 80097aa:	f7fe fb31 	bl	8007e10 <__errno>
 80097ae:	2322      	movs	r3, #34	@ 0x22
 80097b0:	6003      	str	r3, [r0, #0]
 80097b2:	e7b6      	b.n	8009722 <_strtod_l+0x72>
 80097b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80097b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80097bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80097c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80097c4:	e7e7      	b.n	8009796 <_strtod_l+0xe6>
 80097c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009944 <_strtod_l+0x294>
 80097ca:	e7e4      	b.n	8009796 <_strtod_l+0xe6>
 80097cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80097d0:	f04f 3aff 	mov.w	sl, #4294967295
 80097d4:	e7df      	b.n	8009796 <_strtod_l+0xe6>
 80097d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097d8:	1c5a      	adds	r2, r3, #1
 80097da:	9219      	str	r2, [sp, #100]	@ 0x64
 80097dc:	785b      	ldrb	r3, [r3, #1]
 80097de:	2b30      	cmp	r3, #48	@ 0x30
 80097e0:	d0f9      	beq.n	80097d6 <_strtod_l+0x126>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d09d      	beq.n	8009722 <_strtod_l+0x72>
 80097e6:	2301      	movs	r3, #1
 80097e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80097ee:	2300      	movs	r3, #0
 80097f0:	9308      	str	r3, [sp, #32]
 80097f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80097f4:	461f      	mov	r7, r3
 80097f6:	220a      	movs	r2, #10
 80097f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80097fa:	7805      	ldrb	r5, [r0, #0]
 80097fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009800:	b2d9      	uxtb	r1, r3
 8009802:	2909      	cmp	r1, #9
 8009804:	d928      	bls.n	8009858 <_strtod_l+0x1a8>
 8009806:	494e      	ldr	r1, [pc, #312]	@ (8009940 <_strtod_l+0x290>)
 8009808:	2201      	movs	r2, #1
 800980a:	f001 f979 	bl	800ab00 <strncmp>
 800980e:	2800      	cmp	r0, #0
 8009810:	d032      	beq.n	8009878 <_strtod_l+0x1c8>
 8009812:	2000      	movs	r0, #0
 8009814:	462a      	mov	r2, r5
 8009816:	4681      	mov	r9, r0
 8009818:	463d      	mov	r5, r7
 800981a:	4603      	mov	r3, r0
 800981c:	2a65      	cmp	r2, #101	@ 0x65
 800981e:	d001      	beq.n	8009824 <_strtod_l+0x174>
 8009820:	2a45      	cmp	r2, #69	@ 0x45
 8009822:	d114      	bne.n	800984e <_strtod_l+0x19e>
 8009824:	b91d      	cbnz	r5, 800982e <_strtod_l+0x17e>
 8009826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009828:	4302      	orrs	r2, r0
 800982a:	d095      	beq.n	8009758 <_strtod_l+0xa8>
 800982c:	2500      	movs	r5, #0
 800982e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009830:	1c62      	adds	r2, r4, #1
 8009832:	9219      	str	r2, [sp, #100]	@ 0x64
 8009834:	7862      	ldrb	r2, [r4, #1]
 8009836:	2a2b      	cmp	r2, #43	@ 0x2b
 8009838:	d077      	beq.n	800992a <_strtod_l+0x27a>
 800983a:	2a2d      	cmp	r2, #45	@ 0x2d
 800983c:	d07b      	beq.n	8009936 <_strtod_l+0x286>
 800983e:	f04f 0c00 	mov.w	ip, #0
 8009842:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009846:	2909      	cmp	r1, #9
 8009848:	f240 8082 	bls.w	8009950 <_strtod_l+0x2a0>
 800984c:	9419      	str	r4, [sp, #100]	@ 0x64
 800984e:	f04f 0800 	mov.w	r8, #0
 8009852:	e0a2      	b.n	800999a <_strtod_l+0x2ea>
 8009854:	2300      	movs	r3, #0
 8009856:	e7c7      	b.n	80097e8 <_strtod_l+0x138>
 8009858:	2f08      	cmp	r7, #8
 800985a:	bfd5      	itete	le
 800985c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800985e:	9908      	ldrgt	r1, [sp, #32]
 8009860:	fb02 3301 	mlale	r3, r2, r1, r3
 8009864:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009868:	f100 0001 	add.w	r0, r0, #1
 800986c:	bfd4      	ite	le
 800986e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009870:	9308      	strgt	r3, [sp, #32]
 8009872:	3701      	adds	r7, #1
 8009874:	9019      	str	r0, [sp, #100]	@ 0x64
 8009876:	e7bf      	b.n	80097f8 <_strtod_l+0x148>
 8009878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	9219      	str	r2, [sp, #100]	@ 0x64
 800987e:	785a      	ldrb	r2, [r3, #1]
 8009880:	b37f      	cbz	r7, 80098e2 <_strtod_l+0x232>
 8009882:	4681      	mov	r9, r0
 8009884:	463d      	mov	r5, r7
 8009886:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800988a:	2b09      	cmp	r3, #9
 800988c:	d912      	bls.n	80098b4 <_strtod_l+0x204>
 800988e:	2301      	movs	r3, #1
 8009890:	e7c4      	b.n	800981c <_strtod_l+0x16c>
 8009892:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	9219      	str	r2, [sp, #100]	@ 0x64
 8009898:	785a      	ldrb	r2, [r3, #1]
 800989a:	3001      	adds	r0, #1
 800989c:	2a30      	cmp	r2, #48	@ 0x30
 800989e:	d0f8      	beq.n	8009892 <_strtod_l+0x1e2>
 80098a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80098a4:	2b08      	cmp	r3, #8
 80098a6:	f200 84d3 	bhi.w	800a250 <_strtod_l+0xba0>
 80098aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80098ae:	4681      	mov	r9, r0
 80098b0:	2000      	movs	r0, #0
 80098b2:	4605      	mov	r5, r0
 80098b4:	3a30      	subs	r2, #48	@ 0x30
 80098b6:	f100 0301 	add.w	r3, r0, #1
 80098ba:	d02a      	beq.n	8009912 <_strtod_l+0x262>
 80098bc:	4499      	add	r9, r3
 80098be:	eb00 0c05 	add.w	ip, r0, r5
 80098c2:	462b      	mov	r3, r5
 80098c4:	210a      	movs	r1, #10
 80098c6:	4563      	cmp	r3, ip
 80098c8:	d10d      	bne.n	80098e6 <_strtod_l+0x236>
 80098ca:	1c69      	adds	r1, r5, #1
 80098cc:	4401      	add	r1, r0
 80098ce:	4428      	add	r0, r5
 80098d0:	2808      	cmp	r0, #8
 80098d2:	dc16      	bgt.n	8009902 <_strtod_l+0x252>
 80098d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80098d6:	230a      	movs	r3, #10
 80098d8:	fb03 2300 	mla	r3, r3, r0, r2
 80098dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80098de:	2300      	movs	r3, #0
 80098e0:	e018      	b.n	8009914 <_strtod_l+0x264>
 80098e2:	4638      	mov	r0, r7
 80098e4:	e7da      	b.n	800989c <_strtod_l+0x1ec>
 80098e6:	2b08      	cmp	r3, #8
 80098e8:	f103 0301 	add.w	r3, r3, #1
 80098ec:	dc03      	bgt.n	80098f6 <_strtod_l+0x246>
 80098ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80098f0:	434e      	muls	r6, r1
 80098f2:	960a      	str	r6, [sp, #40]	@ 0x28
 80098f4:	e7e7      	b.n	80098c6 <_strtod_l+0x216>
 80098f6:	2b10      	cmp	r3, #16
 80098f8:	bfde      	ittt	le
 80098fa:	9e08      	ldrle	r6, [sp, #32]
 80098fc:	434e      	mulle	r6, r1
 80098fe:	9608      	strle	r6, [sp, #32]
 8009900:	e7e1      	b.n	80098c6 <_strtod_l+0x216>
 8009902:	280f      	cmp	r0, #15
 8009904:	dceb      	bgt.n	80098de <_strtod_l+0x22e>
 8009906:	9808      	ldr	r0, [sp, #32]
 8009908:	230a      	movs	r3, #10
 800990a:	fb03 2300 	mla	r3, r3, r0, r2
 800990e:	9308      	str	r3, [sp, #32]
 8009910:	e7e5      	b.n	80098de <_strtod_l+0x22e>
 8009912:	4629      	mov	r1, r5
 8009914:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009916:	1c50      	adds	r0, r2, #1
 8009918:	9019      	str	r0, [sp, #100]	@ 0x64
 800991a:	7852      	ldrb	r2, [r2, #1]
 800991c:	4618      	mov	r0, r3
 800991e:	460d      	mov	r5, r1
 8009920:	e7b1      	b.n	8009886 <_strtod_l+0x1d6>
 8009922:	f04f 0900 	mov.w	r9, #0
 8009926:	2301      	movs	r3, #1
 8009928:	e77d      	b.n	8009826 <_strtod_l+0x176>
 800992a:	f04f 0c00 	mov.w	ip, #0
 800992e:	1ca2      	adds	r2, r4, #2
 8009930:	9219      	str	r2, [sp, #100]	@ 0x64
 8009932:	78a2      	ldrb	r2, [r4, #2]
 8009934:	e785      	b.n	8009842 <_strtod_l+0x192>
 8009936:	f04f 0c01 	mov.w	ip, #1
 800993a:	e7f8      	b.n	800992e <_strtod_l+0x27e>
 800993c:	0800b6e0 	.word	0x0800b6e0
 8009940:	0800b6c8 	.word	0x0800b6c8
 8009944:	7ff00000 	.word	0x7ff00000
 8009948:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800994a:	1c51      	adds	r1, r2, #1
 800994c:	9119      	str	r1, [sp, #100]	@ 0x64
 800994e:	7852      	ldrb	r2, [r2, #1]
 8009950:	2a30      	cmp	r2, #48	@ 0x30
 8009952:	d0f9      	beq.n	8009948 <_strtod_l+0x298>
 8009954:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009958:	2908      	cmp	r1, #8
 800995a:	f63f af78 	bhi.w	800984e <_strtod_l+0x19e>
 800995e:	3a30      	subs	r2, #48	@ 0x30
 8009960:	920e      	str	r2, [sp, #56]	@ 0x38
 8009962:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009964:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009966:	f04f 080a 	mov.w	r8, #10
 800996a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800996c:	1c56      	adds	r6, r2, #1
 800996e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009970:	7852      	ldrb	r2, [r2, #1]
 8009972:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009976:	f1be 0f09 	cmp.w	lr, #9
 800997a:	d939      	bls.n	80099f0 <_strtod_l+0x340>
 800997c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800997e:	1a76      	subs	r6, r6, r1
 8009980:	2e08      	cmp	r6, #8
 8009982:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009986:	dc03      	bgt.n	8009990 <_strtod_l+0x2e0>
 8009988:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800998a:	4588      	cmp	r8, r1
 800998c:	bfa8      	it	ge
 800998e:	4688      	movge	r8, r1
 8009990:	f1bc 0f00 	cmp.w	ip, #0
 8009994:	d001      	beq.n	800999a <_strtod_l+0x2ea>
 8009996:	f1c8 0800 	rsb	r8, r8, #0
 800999a:	2d00      	cmp	r5, #0
 800999c:	d14e      	bne.n	8009a3c <_strtod_l+0x38c>
 800999e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099a0:	4308      	orrs	r0, r1
 80099a2:	f47f aebe 	bne.w	8009722 <_strtod_l+0x72>
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f47f aed6 	bne.w	8009758 <_strtod_l+0xa8>
 80099ac:	2a69      	cmp	r2, #105	@ 0x69
 80099ae:	d028      	beq.n	8009a02 <_strtod_l+0x352>
 80099b0:	dc25      	bgt.n	80099fe <_strtod_l+0x34e>
 80099b2:	2a49      	cmp	r2, #73	@ 0x49
 80099b4:	d025      	beq.n	8009a02 <_strtod_l+0x352>
 80099b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80099b8:	f47f aece 	bne.w	8009758 <_strtod_l+0xa8>
 80099bc:	499b      	ldr	r1, [pc, #620]	@ (8009c2c <_strtod_l+0x57c>)
 80099be:	a819      	add	r0, sp, #100	@ 0x64
 80099c0:	f001 fbb6 	bl	800b130 <__match>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	f43f aec7 	beq.w	8009758 <_strtod_l+0xa8>
 80099ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	2b28      	cmp	r3, #40	@ 0x28
 80099d0:	d12e      	bne.n	8009a30 <_strtod_l+0x380>
 80099d2:	4997      	ldr	r1, [pc, #604]	@ (8009c30 <_strtod_l+0x580>)
 80099d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80099d6:	a819      	add	r0, sp, #100	@ 0x64
 80099d8:	f001 fbbe 	bl	800b158 <__hexnan>
 80099dc:	2805      	cmp	r0, #5
 80099de:	d127      	bne.n	8009a30 <_strtod_l+0x380>
 80099e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80099e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80099e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80099ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80099ee:	e698      	b.n	8009722 <_strtod_l+0x72>
 80099f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80099f2:	fb08 2101 	mla	r1, r8, r1, r2
 80099f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80099fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80099fc:	e7b5      	b.n	800996a <_strtod_l+0x2ba>
 80099fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8009a00:	e7da      	b.n	80099b8 <_strtod_l+0x308>
 8009a02:	498c      	ldr	r1, [pc, #560]	@ (8009c34 <_strtod_l+0x584>)
 8009a04:	a819      	add	r0, sp, #100	@ 0x64
 8009a06:	f001 fb93 	bl	800b130 <__match>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f43f aea4 	beq.w	8009758 <_strtod_l+0xa8>
 8009a10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a12:	4989      	ldr	r1, [pc, #548]	@ (8009c38 <_strtod_l+0x588>)
 8009a14:	3b01      	subs	r3, #1
 8009a16:	a819      	add	r0, sp, #100	@ 0x64
 8009a18:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a1a:	f001 fb89 	bl	800b130 <__match>
 8009a1e:	b910      	cbnz	r0, 8009a26 <_strtod_l+0x376>
 8009a20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a22:	3301      	adds	r3, #1
 8009a24:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a26:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009c48 <_strtod_l+0x598>
 8009a2a:	f04f 0a00 	mov.w	sl, #0
 8009a2e:	e678      	b.n	8009722 <_strtod_l+0x72>
 8009a30:	4882      	ldr	r0, [pc, #520]	@ (8009c3c <_strtod_l+0x58c>)
 8009a32:	f001 f8b9 	bl	800aba8 <nan>
 8009a36:	ec5b ab10 	vmov	sl, fp, d0
 8009a3a:	e672      	b.n	8009722 <_strtod_l+0x72>
 8009a3c:	eba8 0309 	sub.w	r3, r8, r9
 8009a40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a44:	2f00      	cmp	r7, #0
 8009a46:	bf08      	it	eq
 8009a48:	462f      	moveq	r7, r5
 8009a4a:	2d10      	cmp	r5, #16
 8009a4c:	462c      	mov	r4, r5
 8009a4e:	bfa8      	it	ge
 8009a50:	2410      	movge	r4, #16
 8009a52:	f7f6 fd77 	bl	8000544 <__aeabi_ui2d>
 8009a56:	2d09      	cmp	r5, #9
 8009a58:	4682      	mov	sl, r0
 8009a5a:	468b      	mov	fp, r1
 8009a5c:	dc13      	bgt.n	8009a86 <_strtod_l+0x3d6>
 8009a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f43f ae5e 	beq.w	8009722 <_strtod_l+0x72>
 8009a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a68:	dd78      	ble.n	8009b5c <_strtod_l+0x4ac>
 8009a6a:	2b16      	cmp	r3, #22
 8009a6c:	dc5f      	bgt.n	8009b2e <_strtod_l+0x47e>
 8009a6e:	4974      	ldr	r1, [pc, #464]	@ (8009c40 <_strtod_l+0x590>)
 8009a70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a78:	4652      	mov	r2, sl
 8009a7a:	465b      	mov	r3, fp
 8009a7c:	f7f6 fddc 	bl	8000638 <__aeabi_dmul>
 8009a80:	4682      	mov	sl, r0
 8009a82:	468b      	mov	fp, r1
 8009a84:	e64d      	b.n	8009722 <_strtod_l+0x72>
 8009a86:	4b6e      	ldr	r3, [pc, #440]	@ (8009c40 <_strtod_l+0x590>)
 8009a88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009a90:	f7f6 fdd2 	bl	8000638 <__aeabi_dmul>
 8009a94:	4682      	mov	sl, r0
 8009a96:	9808      	ldr	r0, [sp, #32]
 8009a98:	468b      	mov	fp, r1
 8009a9a:	f7f6 fd53 	bl	8000544 <__aeabi_ui2d>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4650      	mov	r0, sl
 8009aa4:	4659      	mov	r1, fp
 8009aa6:	f7f6 fc11 	bl	80002cc <__adddf3>
 8009aaa:	2d0f      	cmp	r5, #15
 8009aac:	4682      	mov	sl, r0
 8009aae:	468b      	mov	fp, r1
 8009ab0:	ddd5      	ble.n	8009a5e <_strtod_l+0x3ae>
 8009ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab4:	1b2c      	subs	r4, r5, r4
 8009ab6:	441c      	add	r4, r3
 8009ab8:	2c00      	cmp	r4, #0
 8009aba:	f340 8096 	ble.w	8009bea <_strtod_l+0x53a>
 8009abe:	f014 030f 	ands.w	r3, r4, #15
 8009ac2:	d00a      	beq.n	8009ada <_strtod_l+0x42a>
 8009ac4:	495e      	ldr	r1, [pc, #376]	@ (8009c40 <_strtod_l+0x590>)
 8009ac6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009aca:	4652      	mov	r2, sl
 8009acc:	465b      	mov	r3, fp
 8009ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ad2:	f7f6 fdb1 	bl	8000638 <__aeabi_dmul>
 8009ad6:	4682      	mov	sl, r0
 8009ad8:	468b      	mov	fp, r1
 8009ada:	f034 040f 	bics.w	r4, r4, #15
 8009ade:	d073      	beq.n	8009bc8 <_strtod_l+0x518>
 8009ae0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009ae4:	dd48      	ble.n	8009b78 <_strtod_l+0x4c8>
 8009ae6:	2400      	movs	r4, #0
 8009ae8:	46a0      	mov	r8, r4
 8009aea:	940a      	str	r4, [sp, #40]	@ 0x28
 8009aec:	46a1      	mov	r9, r4
 8009aee:	9a05      	ldr	r2, [sp, #20]
 8009af0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009c48 <_strtod_l+0x598>
 8009af4:	2322      	movs	r3, #34	@ 0x22
 8009af6:	6013      	str	r3, [r2, #0]
 8009af8:	f04f 0a00 	mov.w	sl, #0
 8009afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f43f ae0f 	beq.w	8009722 <_strtod_l+0x72>
 8009b04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b06:	9805      	ldr	r0, [sp, #20]
 8009b08:	f7ff f942 	bl	8008d90 <_Bfree>
 8009b0c:	9805      	ldr	r0, [sp, #20]
 8009b0e:	4649      	mov	r1, r9
 8009b10:	f7ff f93e 	bl	8008d90 <_Bfree>
 8009b14:	9805      	ldr	r0, [sp, #20]
 8009b16:	4641      	mov	r1, r8
 8009b18:	f7ff f93a 	bl	8008d90 <_Bfree>
 8009b1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b1e:	9805      	ldr	r0, [sp, #20]
 8009b20:	f7ff f936 	bl	8008d90 <_Bfree>
 8009b24:	9805      	ldr	r0, [sp, #20]
 8009b26:	4621      	mov	r1, r4
 8009b28:	f7ff f932 	bl	8008d90 <_Bfree>
 8009b2c:	e5f9      	b.n	8009722 <_strtod_l+0x72>
 8009b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009b34:	4293      	cmp	r3, r2
 8009b36:	dbbc      	blt.n	8009ab2 <_strtod_l+0x402>
 8009b38:	4c41      	ldr	r4, [pc, #260]	@ (8009c40 <_strtod_l+0x590>)
 8009b3a:	f1c5 050f 	rsb	r5, r5, #15
 8009b3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009b42:	4652      	mov	r2, sl
 8009b44:	465b      	mov	r3, fp
 8009b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b4a:	f7f6 fd75 	bl	8000638 <__aeabi_dmul>
 8009b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b50:	1b5d      	subs	r5, r3, r5
 8009b52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009b56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b5a:	e78f      	b.n	8009a7c <_strtod_l+0x3cc>
 8009b5c:	3316      	adds	r3, #22
 8009b5e:	dba8      	blt.n	8009ab2 <_strtod_l+0x402>
 8009b60:	4b37      	ldr	r3, [pc, #220]	@ (8009c40 <_strtod_l+0x590>)
 8009b62:	eba9 0808 	sub.w	r8, r9, r8
 8009b66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009b6a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009b6e:	4650      	mov	r0, sl
 8009b70:	4659      	mov	r1, fp
 8009b72:	f7f6 fe8b 	bl	800088c <__aeabi_ddiv>
 8009b76:	e783      	b.n	8009a80 <_strtod_l+0x3d0>
 8009b78:	4b32      	ldr	r3, [pc, #200]	@ (8009c44 <_strtod_l+0x594>)
 8009b7a:	9308      	str	r3, [sp, #32]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	1124      	asrs	r4, r4, #4
 8009b80:	4650      	mov	r0, sl
 8009b82:	4659      	mov	r1, fp
 8009b84:	461e      	mov	r6, r3
 8009b86:	2c01      	cmp	r4, #1
 8009b88:	dc21      	bgt.n	8009bce <_strtod_l+0x51e>
 8009b8a:	b10b      	cbz	r3, 8009b90 <_strtod_l+0x4e0>
 8009b8c:	4682      	mov	sl, r0
 8009b8e:	468b      	mov	fp, r1
 8009b90:	492c      	ldr	r1, [pc, #176]	@ (8009c44 <_strtod_l+0x594>)
 8009b92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009b96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009b9a:	4652      	mov	r2, sl
 8009b9c:	465b      	mov	r3, fp
 8009b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ba2:	f7f6 fd49 	bl	8000638 <__aeabi_dmul>
 8009ba6:	4b28      	ldr	r3, [pc, #160]	@ (8009c48 <_strtod_l+0x598>)
 8009ba8:	460a      	mov	r2, r1
 8009baa:	400b      	ands	r3, r1
 8009bac:	4927      	ldr	r1, [pc, #156]	@ (8009c4c <_strtod_l+0x59c>)
 8009bae:	428b      	cmp	r3, r1
 8009bb0:	4682      	mov	sl, r0
 8009bb2:	d898      	bhi.n	8009ae6 <_strtod_l+0x436>
 8009bb4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009bb8:	428b      	cmp	r3, r1
 8009bba:	bf86      	itte	hi
 8009bbc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009c50 <_strtod_l+0x5a0>
 8009bc0:	f04f 3aff 	movhi.w	sl, #4294967295
 8009bc4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009bc8:	2300      	movs	r3, #0
 8009bca:	9308      	str	r3, [sp, #32]
 8009bcc:	e07a      	b.n	8009cc4 <_strtod_l+0x614>
 8009bce:	07e2      	lsls	r2, r4, #31
 8009bd0:	d505      	bpl.n	8009bde <_strtod_l+0x52e>
 8009bd2:	9b08      	ldr	r3, [sp, #32]
 8009bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd8:	f7f6 fd2e 	bl	8000638 <__aeabi_dmul>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	9a08      	ldr	r2, [sp, #32]
 8009be0:	3208      	adds	r2, #8
 8009be2:	3601      	adds	r6, #1
 8009be4:	1064      	asrs	r4, r4, #1
 8009be6:	9208      	str	r2, [sp, #32]
 8009be8:	e7cd      	b.n	8009b86 <_strtod_l+0x4d6>
 8009bea:	d0ed      	beq.n	8009bc8 <_strtod_l+0x518>
 8009bec:	4264      	negs	r4, r4
 8009bee:	f014 020f 	ands.w	r2, r4, #15
 8009bf2:	d00a      	beq.n	8009c0a <_strtod_l+0x55a>
 8009bf4:	4b12      	ldr	r3, [pc, #72]	@ (8009c40 <_strtod_l+0x590>)
 8009bf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bfa:	4650      	mov	r0, sl
 8009bfc:	4659      	mov	r1, fp
 8009bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c02:	f7f6 fe43 	bl	800088c <__aeabi_ddiv>
 8009c06:	4682      	mov	sl, r0
 8009c08:	468b      	mov	fp, r1
 8009c0a:	1124      	asrs	r4, r4, #4
 8009c0c:	d0dc      	beq.n	8009bc8 <_strtod_l+0x518>
 8009c0e:	2c1f      	cmp	r4, #31
 8009c10:	dd20      	ble.n	8009c54 <_strtod_l+0x5a4>
 8009c12:	2400      	movs	r4, #0
 8009c14:	46a0      	mov	r8, r4
 8009c16:	940a      	str	r4, [sp, #40]	@ 0x28
 8009c18:	46a1      	mov	r9, r4
 8009c1a:	9a05      	ldr	r2, [sp, #20]
 8009c1c:	2322      	movs	r3, #34	@ 0x22
 8009c1e:	f04f 0a00 	mov.w	sl, #0
 8009c22:	f04f 0b00 	mov.w	fp, #0
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	e768      	b.n	8009afc <_strtod_l+0x44c>
 8009c2a:	bf00      	nop
 8009c2c:	0800b4b9 	.word	0x0800b4b9
 8009c30:	0800b6cc 	.word	0x0800b6cc
 8009c34:	0800b4b1 	.word	0x0800b4b1
 8009c38:	0800b4e8 	.word	0x0800b4e8
 8009c3c:	0800b875 	.word	0x0800b875
 8009c40:	0800b600 	.word	0x0800b600
 8009c44:	0800b5d8 	.word	0x0800b5d8
 8009c48:	7ff00000 	.word	0x7ff00000
 8009c4c:	7ca00000 	.word	0x7ca00000
 8009c50:	7fefffff 	.word	0x7fefffff
 8009c54:	f014 0310 	ands.w	r3, r4, #16
 8009c58:	bf18      	it	ne
 8009c5a:	236a      	movne	r3, #106	@ 0x6a
 8009c5c:	4ea9      	ldr	r6, [pc, #676]	@ (8009f04 <_strtod_l+0x854>)
 8009c5e:	9308      	str	r3, [sp, #32]
 8009c60:	4650      	mov	r0, sl
 8009c62:	4659      	mov	r1, fp
 8009c64:	2300      	movs	r3, #0
 8009c66:	07e2      	lsls	r2, r4, #31
 8009c68:	d504      	bpl.n	8009c74 <_strtod_l+0x5c4>
 8009c6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009c6e:	f7f6 fce3 	bl	8000638 <__aeabi_dmul>
 8009c72:	2301      	movs	r3, #1
 8009c74:	1064      	asrs	r4, r4, #1
 8009c76:	f106 0608 	add.w	r6, r6, #8
 8009c7a:	d1f4      	bne.n	8009c66 <_strtod_l+0x5b6>
 8009c7c:	b10b      	cbz	r3, 8009c82 <_strtod_l+0x5d2>
 8009c7e:	4682      	mov	sl, r0
 8009c80:	468b      	mov	fp, r1
 8009c82:	9b08      	ldr	r3, [sp, #32]
 8009c84:	b1b3      	cbz	r3, 8009cb4 <_strtod_l+0x604>
 8009c86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009c8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	4659      	mov	r1, fp
 8009c92:	dd0f      	ble.n	8009cb4 <_strtod_l+0x604>
 8009c94:	2b1f      	cmp	r3, #31
 8009c96:	dd55      	ble.n	8009d44 <_strtod_l+0x694>
 8009c98:	2b34      	cmp	r3, #52	@ 0x34
 8009c9a:	bfde      	ittt	le
 8009c9c:	f04f 33ff 	movle.w	r3, #4294967295
 8009ca0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009ca4:	4093      	lslle	r3, r2
 8009ca6:	f04f 0a00 	mov.w	sl, #0
 8009caa:	bfcc      	ite	gt
 8009cac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009cb0:	ea03 0b01 	andle.w	fp, r3, r1
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	4650      	mov	r0, sl
 8009cba:	4659      	mov	r1, fp
 8009cbc:	f7f6 ff24 	bl	8000b08 <__aeabi_dcmpeq>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d1a6      	bne.n	8009c12 <_strtod_l+0x562>
 8009cc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009cca:	9805      	ldr	r0, [sp, #20]
 8009ccc:	462b      	mov	r3, r5
 8009cce:	463a      	mov	r2, r7
 8009cd0:	f7ff f8c6 	bl	8008e60 <__s2b>
 8009cd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	f43f af05 	beq.w	8009ae6 <_strtod_l+0x436>
 8009cdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cde:	2a00      	cmp	r2, #0
 8009ce0:	eba9 0308 	sub.w	r3, r9, r8
 8009ce4:	bfa8      	it	ge
 8009ce6:	2300      	movge	r3, #0
 8009ce8:	9312      	str	r3, [sp, #72]	@ 0x48
 8009cea:	2400      	movs	r4, #0
 8009cec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009cf0:	9316      	str	r3, [sp, #88]	@ 0x58
 8009cf2:	46a0      	mov	r8, r4
 8009cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cf6:	9805      	ldr	r0, [sp, #20]
 8009cf8:	6859      	ldr	r1, [r3, #4]
 8009cfa:	f7ff f809 	bl	8008d10 <_Balloc>
 8009cfe:	4681      	mov	r9, r0
 8009d00:	2800      	cmp	r0, #0
 8009d02:	f43f aef4 	beq.w	8009aee <_strtod_l+0x43e>
 8009d06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d08:	691a      	ldr	r2, [r3, #16]
 8009d0a:	3202      	adds	r2, #2
 8009d0c:	f103 010c 	add.w	r1, r3, #12
 8009d10:	0092      	lsls	r2, r2, #2
 8009d12:	300c      	adds	r0, #12
 8009d14:	f000 ff38 	bl	800ab88 <memcpy>
 8009d18:	ec4b ab10 	vmov	d0, sl, fp
 8009d1c:	9805      	ldr	r0, [sp, #20]
 8009d1e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d20:	a91b      	add	r1, sp, #108	@ 0x6c
 8009d22:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009d26:	f7ff fbd7 	bl	80094d8 <__d2b>
 8009d2a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	f43f aede 	beq.w	8009aee <_strtod_l+0x43e>
 8009d32:	9805      	ldr	r0, [sp, #20]
 8009d34:	2101      	movs	r1, #1
 8009d36:	f7ff f929 	bl	8008f8c <__i2b>
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	b948      	cbnz	r0, 8009d52 <_strtod_l+0x6a2>
 8009d3e:	f04f 0800 	mov.w	r8, #0
 8009d42:	e6d4      	b.n	8009aee <_strtod_l+0x43e>
 8009d44:	f04f 32ff 	mov.w	r2, #4294967295
 8009d48:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4c:	ea03 0a0a 	and.w	sl, r3, sl
 8009d50:	e7b0      	b.n	8009cb4 <_strtod_l+0x604>
 8009d52:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009d54:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009d56:	2d00      	cmp	r5, #0
 8009d58:	bfab      	itete	ge
 8009d5a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009d5c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009d5e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009d60:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009d62:	bfac      	ite	ge
 8009d64:	18ef      	addge	r7, r5, r3
 8009d66:	1b5e      	sublt	r6, r3, r5
 8009d68:	9b08      	ldr	r3, [sp, #32]
 8009d6a:	1aed      	subs	r5, r5, r3
 8009d6c:	4415      	add	r5, r2
 8009d6e:	4b66      	ldr	r3, [pc, #408]	@ (8009f08 <_strtod_l+0x858>)
 8009d70:	3d01      	subs	r5, #1
 8009d72:	429d      	cmp	r5, r3
 8009d74:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009d78:	da50      	bge.n	8009e1c <_strtod_l+0x76c>
 8009d7a:	1b5b      	subs	r3, r3, r5
 8009d7c:	2b1f      	cmp	r3, #31
 8009d7e:	eba2 0203 	sub.w	r2, r2, r3
 8009d82:	f04f 0101 	mov.w	r1, #1
 8009d86:	dc3d      	bgt.n	8009e04 <_strtod_l+0x754>
 8009d88:	fa01 f303 	lsl.w	r3, r1, r3
 8009d8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d8e:	2300      	movs	r3, #0
 8009d90:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d92:	18bd      	adds	r5, r7, r2
 8009d94:	9b08      	ldr	r3, [sp, #32]
 8009d96:	42af      	cmp	r7, r5
 8009d98:	4416      	add	r6, r2
 8009d9a:	441e      	add	r6, r3
 8009d9c:	463b      	mov	r3, r7
 8009d9e:	bfa8      	it	ge
 8009da0:	462b      	movge	r3, r5
 8009da2:	42b3      	cmp	r3, r6
 8009da4:	bfa8      	it	ge
 8009da6:	4633      	movge	r3, r6
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	bfc2      	ittt	gt
 8009dac:	1aed      	subgt	r5, r5, r3
 8009dae:	1af6      	subgt	r6, r6, r3
 8009db0:	1aff      	subgt	r7, r7, r3
 8009db2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	dd16      	ble.n	8009de6 <_strtod_l+0x736>
 8009db8:	4641      	mov	r1, r8
 8009dba:	9805      	ldr	r0, [sp, #20]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f7ff f9a5 	bl	800910c <__pow5mult>
 8009dc2:	4680      	mov	r8, r0
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d0ba      	beq.n	8009d3e <_strtod_l+0x68e>
 8009dc8:	4601      	mov	r1, r0
 8009dca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009dcc:	9805      	ldr	r0, [sp, #20]
 8009dce:	f7ff f8f3 	bl	8008fb8 <__multiply>
 8009dd2:	900e      	str	r0, [sp, #56]	@ 0x38
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f43f ae8a 	beq.w	8009aee <_strtod_l+0x43e>
 8009dda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ddc:	9805      	ldr	r0, [sp, #20]
 8009dde:	f7fe ffd7 	bl	8008d90 <_Bfree>
 8009de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009de4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009de6:	2d00      	cmp	r5, #0
 8009de8:	dc1d      	bgt.n	8009e26 <_strtod_l+0x776>
 8009dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	dd23      	ble.n	8009e38 <_strtod_l+0x788>
 8009df0:	4649      	mov	r1, r9
 8009df2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009df4:	9805      	ldr	r0, [sp, #20]
 8009df6:	f7ff f989 	bl	800910c <__pow5mult>
 8009dfa:	4681      	mov	r9, r0
 8009dfc:	b9e0      	cbnz	r0, 8009e38 <_strtod_l+0x788>
 8009dfe:	f04f 0900 	mov.w	r9, #0
 8009e02:	e674      	b.n	8009aee <_strtod_l+0x43e>
 8009e04:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009e08:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009e0c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009e10:	35e2      	adds	r5, #226	@ 0xe2
 8009e12:	fa01 f305 	lsl.w	r3, r1, r5
 8009e16:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e18:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009e1a:	e7ba      	b.n	8009d92 <_strtod_l+0x6e2>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009e20:	2301      	movs	r3, #1
 8009e22:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e24:	e7b5      	b.n	8009d92 <_strtod_l+0x6e2>
 8009e26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e28:	9805      	ldr	r0, [sp, #20]
 8009e2a:	462a      	mov	r2, r5
 8009e2c:	f7ff f9c8 	bl	80091c0 <__lshift>
 8009e30:	901a      	str	r0, [sp, #104]	@ 0x68
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d1d9      	bne.n	8009dea <_strtod_l+0x73a>
 8009e36:	e65a      	b.n	8009aee <_strtod_l+0x43e>
 8009e38:	2e00      	cmp	r6, #0
 8009e3a:	dd07      	ble.n	8009e4c <_strtod_l+0x79c>
 8009e3c:	4649      	mov	r1, r9
 8009e3e:	9805      	ldr	r0, [sp, #20]
 8009e40:	4632      	mov	r2, r6
 8009e42:	f7ff f9bd 	bl	80091c0 <__lshift>
 8009e46:	4681      	mov	r9, r0
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d0d8      	beq.n	8009dfe <_strtod_l+0x74e>
 8009e4c:	2f00      	cmp	r7, #0
 8009e4e:	dd08      	ble.n	8009e62 <_strtod_l+0x7b2>
 8009e50:	4641      	mov	r1, r8
 8009e52:	9805      	ldr	r0, [sp, #20]
 8009e54:	463a      	mov	r2, r7
 8009e56:	f7ff f9b3 	bl	80091c0 <__lshift>
 8009e5a:	4680      	mov	r8, r0
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	f43f ae46 	beq.w	8009aee <_strtod_l+0x43e>
 8009e62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e64:	9805      	ldr	r0, [sp, #20]
 8009e66:	464a      	mov	r2, r9
 8009e68:	f7ff fa32 	bl	80092d0 <__mdiff>
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	f43f ae3d 	beq.w	8009aee <_strtod_l+0x43e>
 8009e74:	68c3      	ldr	r3, [r0, #12]
 8009e76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60c3      	str	r3, [r0, #12]
 8009e7c:	4641      	mov	r1, r8
 8009e7e:	f7ff fa0b 	bl	8009298 <__mcmp>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	da46      	bge.n	8009f14 <_strtod_l+0x864>
 8009e86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e88:	ea53 030a 	orrs.w	r3, r3, sl
 8009e8c:	d16c      	bne.n	8009f68 <_strtod_l+0x8b8>
 8009e8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d168      	bne.n	8009f68 <_strtod_l+0x8b8>
 8009e96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e9a:	0d1b      	lsrs	r3, r3, #20
 8009e9c:	051b      	lsls	r3, r3, #20
 8009e9e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ea2:	d961      	bls.n	8009f68 <_strtod_l+0x8b8>
 8009ea4:	6963      	ldr	r3, [r4, #20]
 8009ea6:	b913      	cbnz	r3, 8009eae <_strtod_l+0x7fe>
 8009ea8:	6923      	ldr	r3, [r4, #16]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	dd5c      	ble.n	8009f68 <_strtod_l+0x8b8>
 8009eae:	4621      	mov	r1, r4
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	9805      	ldr	r0, [sp, #20]
 8009eb4:	f7ff f984 	bl	80091c0 <__lshift>
 8009eb8:	4641      	mov	r1, r8
 8009eba:	4604      	mov	r4, r0
 8009ebc:	f7ff f9ec 	bl	8009298 <__mcmp>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	dd51      	ble.n	8009f68 <_strtod_l+0x8b8>
 8009ec4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ec8:	9a08      	ldr	r2, [sp, #32]
 8009eca:	0d1b      	lsrs	r3, r3, #20
 8009ecc:	051b      	lsls	r3, r3, #20
 8009ece:	2a00      	cmp	r2, #0
 8009ed0:	d06b      	beq.n	8009faa <_strtod_l+0x8fa>
 8009ed2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009ed6:	d868      	bhi.n	8009faa <_strtod_l+0x8fa>
 8009ed8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009edc:	f67f ae9d 	bls.w	8009c1a <_strtod_l+0x56a>
 8009ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8009f0c <_strtod_l+0x85c>)
 8009ee2:	4650      	mov	r0, sl
 8009ee4:	4659      	mov	r1, fp
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f7f6 fba6 	bl	8000638 <__aeabi_dmul>
 8009eec:	4b08      	ldr	r3, [pc, #32]	@ (8009f10 <_strtod_l+0x860>)
 8009eee:	400b      	ands	r3, r1
 8009ef0:	4682      	mov	sl, r0
 8009ef2:	468b      	mov	fp, r1
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f47f ae05 	bne.w	8009b04 <_strtod_l+0x454>
 8009efa:	9a05      	ldr	r2, [sp, #20]
 8009efc:	2322      	movs	r3, #34	@ 0x22
 8009efe:	6013      	str	r3, [r2, #0]
 8009f00:	e600      	b.n	8009b04 <_strtod_l+0x454>
 8009f02:	bf00      	nop
 8009f04:	0800b6f8 	.word	0x0800b6f8
 8009f08:	fffffc02 	.word	0xfffffc02
 8009f0c:	39500000 	.word	0x39500000
 8009f10:	7ff00000 	.word	0x7ff00000
 8009f14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009f18:	d165      	bne.n	8009fe6 <_strtod_l+0x936>
 8009f1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009f1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f20:	b35a      	cbz	r2, 8009f7a <_strtod_l+0x8ca>
 8009f22:	4a9f      	ldr	r2, [pc, #636]	@ (800a1a0 <_strtod_l+0xaf0>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d12b      	bne.n	8009f80 <_strtod_l+0x8d0>
 8009f28:	9b08      	ldr	r3, [sp, #32]
 8009f2a:	4651      	mov	r1, sl
 8009f2c:	b303      	cbz	r3, 8009f70 <_strtod_l+0x8c0>
 8009f2e:	4b9d      	ldr	r3, [pc, #628]	@ (800a1a4 <_strtod_l+0xaf4>)
 8009f30:	465a      	mov	r2, fp
 8009f32:	4013      	ands	r3, r2
 8009f34:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009f38:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3c:	d81b      	bhi.n	8009f76 <_strtod_l+0x8c6>
 8009f3e:	0d1b      	lsrs	r3, r3, #20
 8009f40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009f44:	fa02 f303 	lsl.w	r3, r2, r3
 8009f48:	4299      	cmp	r1, r3
 8009f4a:	d119      	bne.n	8009f80 <_strtod_l+0x8d0>
 8009f4c:	4b96      	ldr	r3, [pc, #600]	@ (800a1a8 <_strtod_l+0xaf8>)
 8009f4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d102      	bne.n	8009f5a <_strtod_l+0x8aa>
 8009f54:	3101      	adds	r1, #1
 8009f56:	f43f adca 	beq.w	8009aee <_strtod_l+0x43e>
 8009f5a:	4b92      	ldr	r3, [pc, #584]	@ (800a1a4 <_strtod_l+0xaf4>)
 8009f5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f5e:	401a      	ands	r2, r3
 8009f60:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009f64:	f04f 0a00 	mov.w	sl, #0
 8009f68:	9b08      	ldr	r3, [sp, #32]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1b8      	bne.n	8009ee0 <_strtod_l+0x830>
 8009f6e:	e5c9      	b.n	8009b04 <_strtod_l+0x454>
 8009f70:	f04f 33ff 	mov.w	r3, #4294967295
 8009f74:	e7e8      	b.n	8009f48 <_strtod_l+0x898>
 8009f76:	4613      	mov	r3, r2
 8009f78:	e7e6      	b.n	8009f48 <_strtod_l+0x898>
 8009f7a:	ea53 030a 	orrs.w	r3, r3, sl
 8009f7e:	d0a1      	beq.n	8009ec4 <_strtod_l+0x814>
 8009f80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f82:	b1db      	cbz	r3, 8009fbc <_strtod_l+0x90c>
 8009f84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f86:	4213      	tst	r3, r2
 8009f88:	d0ee      	beq.n	8009f68 <_strtod_l+0x8b8>
 8009f8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f8c:	9a08      	ldr	r2, [sp, #32]
 8009f8e:	4650      	mov	r0, sl
 8009f90:	4659      	mov	r1, fp
 8009f92:	b1bb      	cbz	r3, 8009fc4 <_strtod_l+0x914>
 8009f94:	f7ff fb6e 	bl	8009674 <sulp>
 8009f98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f9c:	ec53 2b10 	vmov	r2, r3, d0
 8009fa0:	f7f6 f994 	bl	80002cc <__adddf3>
 8009fa4:	4682      	mov	sl, r0
 8009fa6:	468b      	mov	fp, r1
 8009fa8:	e7de      	b.n	8009f68 <_strtod_l+0x8b8>
 8009faa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009fae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009fb2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009fb6:	f04f 3aff 	mov.w	sl, #4294967295
 8009fba:	e7d5      	b.n	8009f68 <_strtod_l+0x8b8>
 8009fbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009fbe:	ea13 0f0a 	tst.w	r3, sl
 8009fc2:	e7e1      	b.n	8009f88 <_strtod_l+0x8d8>
 8009fc4:	f7ff fb56 	bl	8009674 <sulp>
 8009fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fcc:	ec53 2b10 	vmov	r2, r3, d0
 8009fd0:	f7f6 f97a 	bl	80002c8 <__aeabi_dsub>
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	4682      	mov	sl, r0
 8009fda:	468b      	mov	fp, r1
 8009fdc:	f7f6 fd94 	bl	8000b08 <__aeabi_dcmpeq>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d0c1      	beq.n	8009f68 <_strtod_l+0x8b8>
 8009fe4:	e619      	b.n	8009c1a <_strtod_l+0x56a>
 8009fe6:	4641      	mov	r1, r8
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f7ff facd 	bl	8009588 <__ratio>
 8009fee:	ec57 6b10 	vmov	r6, r7, d0
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	f7f6 fd98 	bl	8000b30 <__aeabi_dcmple>
 800a000:	2800      	cmp	r0, #0
 800a002:	d06f      	beq.n	800a0e4 <_strtod_l+0xa34>
 800a004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a006:	2b00      	cmp	r3, #0
 800a008:	d17a      	bne.n	800a100 <_strtod_l+0xa50>
 800a00a:	f1ba 0f00 	cmp.w	sl, #0
 800a00e:	d158      	bne.n	800a0c2 <_strtod_l+0xa12>
 800a010:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a016:	2b00      	cmp	r3, #0
 800a018:	d15a      	bne.n	800a0d0 <_strtod_l+0xa20>
 800a01a:	4b64      	ldr	r3, [pc, #400]	@ (800a1ac <_strtod_l+0xafc>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	4630      	mov	r0, r6
 800a020:	4639      	mov	r1, r7
 800a022:	f7f6 fd7b 	bl	8000b1c <__aeabi_dcmplt>
 800a026:	2800      	cmp	r0, #0
 800a028:	d159      	bne.n	800a0de <_strtod_l+0xa2e>
 800a02a:	4630      	mov	r0, r6
 800a02c:	4639      	mov	r1, r7
 800a02e:	4b60      	ldr	r3, [pc, #384]	@ (800a1b0 <_strtod_l+0xb00>)
 800a030:	2200      	movs	r2, #0
 800a032:	f7f6 fb01 	bl	8000638 <__aeabi_dmul>
 800a036:	4606      	mov	r6, r0
 800a038:	460f      	mov	r7, r1
 800a03a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a03e:	9606      	str	r6, [sp, #24]
 800a040:	9307      	str	r3, [sp, #28]
 800a042:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a046:	4d57      	ldr	r5, [pc, #348]	@ (800a1a4 <_strtod_l+0xaf4>)
 800a048:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a04c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a04e:	401d      	ands	r5, r3
 800a050:	4b58      	ldr	r3, [pc, #352]	@ (800a1b4 <_strtod_l+0xb04>)
 800a052:	429d      	cmp	r5, r3
 800a054:	f040 80b2 	bne.w	800a1bc <_strtod_l+0xb0c>
 800a058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a05a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a05e:	ec4b ab10 	vmov	d0, sl, fp
 800a062:	f7ff f9c9 	bl	80093f8 <__ulp>
 800a066:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a06a:	ec51 0b10 	vmov	r0, r1, d0
 800a06e:	f7f6 fae3 	bl	8000638 <__aeabi_dmul>
 800a072:	4652      	mov	r2, sl
 800a074:	465b      	mov	r3, fp
 800a076:	f7f6 f929 	bl	80002cc <__adddf3>
 800a07a:	460b      	mov	r3, r1
 800a07c:	4949      	ldr	r1, [pc, #292]	@ (800a1a4 <_strtod_l+0xaf4>)
 800a07e:	4a4e      	ldr	r2, [pc, #312]	@ (800a1b8 <_strtod_l+0xb08>)
 800a080:	4019      	ands	r1, r3
 800a082:	4291      	cmp	r1, r2
 800a084:	4682      	mov	sl, r0
 800a086:	d942      	bls.n	800a10e <_strtod_l+0xa5e>
 800a088:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a08a:	4b47      	ldr	r3, [pc, #284]	@ (800a1a8 <_strtod_l+0xaf8>)
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d103      	bne.n	800a098 <_strtod_l+0x9e8>
 800a090:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a092:	3301      	adds	r3, #1
 800a094:	f43f ad2b 	beq.w	8009aee <_strtod_l+0x43e>
 800a098:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a1a8 <_strtod_l+0xaf8>
 800a09c:	f04f 3aff 	mov.w	sl, #4294967295
 800a0a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0a2:	9805      	ldr	r0, [sp, #20]
 800a0a4:	f7fe fe74 	bl	8008d90 <_Bfree>
 800a0a8:	9805      	ldr	r0, [sp, #20]
 800a0aa:	4649      	mov	r1, r9
 800a0ac:	f7fe fe70 	bl	8008d90 <_Bfree>
 800a0b0:	9805      	ldr	r0, [sp, #20]
 800a0b2:	4641      	mov	r1, r8
 800a0b4:	f7fe fe6c 	bl	8008d90 <_Bfree>
 800a0b8:	9805      	ldr	r0, [sp, #20]
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	f7fe fe68 	bl	8008d90 <_Bfree>
 800a0c0:	e618      	b.n	8009cf4 <_strtod_l+0x644>
 800a0c2:	f1ba 0f01 	cmp.w	sl, #1
 800a0c6:	d103      	bne.n	800a0d0 <_strtod_l+0xa20>
 800a0c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f43f ada5 	beq.w	8009c1a <_strtod_l+0x56a>
 800a0d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a180 <_strtod_l+0xad0>
 800a0d4:	4f35      	ldr	r7, [pc, #212]	@ (800a1ac <_strtod_l+0xafc>)
 800a0d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a0da:	2600      	movs	r6, #0
 800a0dc:	e7b1      	b.n	800a042 <_strtod_l+0x992>
 800a0de:	4f34      	ldr	r7, [pc, #208]	@ (800a1b0 <_strtod_l+0xb00>)
 800a0e0:	2600      	movs	r6, #0
 800a0e2:	e7aa      	b.n	800a03a <_strtod_l+0x98a>
 800a0e4:	4b32      	ldr	r3, [pc, #200]	@ (800a1b0 <_strtod_l+0xb00>)
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f7f6 faa4 	bl	8000638 <__aeabi_dmul>
 800a0f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460f      	mov	r7, r1
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d09f      	beq.n	800a03a <_strtod_l+0x98a>
 800a0fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a0fe:	e7a0      	b.n	800a042 <_strtod_l+0x992>
 800a100:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a188 <_strtod_l+0xad8>
 800a104:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a108:	ec57 6b17 	vmov	r6, r7, d7
 800a10c:	e799      	b.n	800a042 <_strtod_l+0x992>
 800a10e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a112:	9b08      	ldr	r3, [sp, #32]
 800a114:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1c1      	bne.n	800a0a0 <_strtod_l+0x9f0>
 800a11c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a120:	0d1b      	lsrs	r3, r3, #20
 800a122:	051b      	lsls	r3, r3, #20
 800a124:	429d      	cmp	r5, r3
 800a126:	d1bb      	bne.n	800a0a0 <_strtod_l+0x9f0>
 800a128:	4630      	mov	r0, r6
 800a12a:	4639      	mov	r1, r7
 800a12c:	f7f6 fde4 	bl	8000cf8 <__aeabi_d2lz>
 800a130:	f7f6 fa54 	bl	80005dc <__aeabi_l2d>
 800a134:	4602      	mov	r2, r0
 800a136:	460b      	mov	r3, r1
 800a138:	4630      	mov	r0, r6
 800a13a:	4639      	mov	r1, r7
 800a13c:	f7f6 f8c4 	bl	80002c8 <__aeabi_dsub>
 800a140:	460b      	mov	r3, r1
 800a142:	4602      	mov	r2, r0
 800a144:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a148:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a14e:	ea46 060a 	orr.w	r6, r6, sl
 800a152:	431e      	orrs	r6, r3
 800a154:	d06f      	beq.n	800a236 <_strtod_l+0xb86>
 800a156:	a30e      	add	r3, pc, #56	@ (adr r3, 800a190 <_strtod_l+0xae0>)
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	f7f6 fcde 	bl	8000b1c <__aeabi_dcmplt>
 800a160:	2800      	cmp	r0, #0
 800a162:	f47f accf 	bne.w	8009b04 <_strtod_l+0x454>
 800a166:	a30c      	add	r3, pc, #48	@ (adr r3, 800a198 <_strtod_l+0xae8>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a170:	f7f6 fcf2 	bl	8000b58 <__aeabi_dcmpgt>
 800a174:	2800      	cmp	r0, #0
 800a176:	d093      	beq.n	800a0a0 <_strtod_l+0x9f0>
 800a178:	e4c4      	b.n	8009b04 <_strtod_l+0x454>
 800a17a:	bf00      	nop
 800a17c:	f3af 8000 	nop.w
 800a180:	00000000 	.word	0x00000000
 800a184:	bff00000 	.word	0xbff00000
 800a188:	00000000 	.word	0x00000000
 800a18c:	3ff00000 	.word	0x3ff00000
 800a190:	94a03595 	.word	0x94a03595
 800a194:	3fdfffff 	.word	0x3fdfffff
 800a198:	35afe535 	.word	0x35afe535
 800a19c:	3fe00000 	.word	0x3fe00000
 800a1a0:	000fffff 	.word	0x000fffff
 800a1a4:	7ff00000 	.word	0x7ff00000
 800a1a8:	7fefffff 	.word	0x7fefffff
 800a1ac:	3ff00000 	.word	0x3ff00000
 800a1b0:	3fe00000 	.word	0x3fe00000
 800a1b4:	7fe00000 	.word	0x7fe00000
 800a1b8:	7c9fffff 	.word	0x7c9fffff
 800a1bc:	9b08      	ldr	r3, [sp, #32]
 800a1be:	b323      	cbz	r3, 800a20a <_strtod_l+0xb5a>
 800a1c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a1c4:	d821      	bhi.n	800a20a <_strtod_l+0xb5a>
 800a1c6:	a328      	add	r3, pc, #160	@ (adr r3, 800a268 <_strtod_l+0xbb8>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	f7f6 fcae 	bl	8000b30 <__aeabi_dcmple>
 800a1d4:	b1a0      	cbz	r0, 800a200 <_strtod_l+0xb50>
 800a1d6:	4639      	mov	r1, r7
 800a1d8:	4630      	mov	r0, r6
 800a1da:	f7f6 fd05 	bl	8000be8 <__aeabi_d2uiz>
 800a1de:	2801      	cmp	r0, #1
 800a1e0:	bf38      	it	cc
 800a1e2:	2001      	movcc	r0, #1
 800a1e4:	f7f6 f9ae 	bl	8000544 <__aeabi_ui2d>
 800a1e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	460f      	mov	r7, r1
 800a1ee:	b9fb      	cbnz	r3, 800a230 <_strtod_l+0xb80>
 800a1f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a1f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a1f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a1fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a200:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a202:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a206:	1b5b      	subs	r3, r3, r5
 800a208:	9311      	str	r3, [sp, #68]	@ 0x44
 800a20a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a20e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a212:	f7ff f8f1 	bl	80093f8 <__ulp>
 800a216:	4650      	mov	r0, sl
 800a218:	ec53 2b10 	vmov	r2, r3, d0
 800a21c:	4659      	mov	r1, fp
 800a21e:	f7f6 fa0b 	bl	8000638 <__aeabi_dmul>
 800a222:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a226:	f7f6 f851 	bl	80002cc <__adddf3>
 800a22a:	4682      	mov	sl, r0
 800a22c:	468b      	mov	fp, r1
 800a22e:	e770      	b.n	800a112 <_strtod_l+0xa62>
 800a230:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a234:	e7e0      	b.n	800a1f8 <_strtod_l+0xb48>
 800a236:	a30e      	add	r3, pc, #56	@ (adr r3, 800a270 <_strtod_l+0xbc0>)
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	f7f6 fc6e 	bl	8000b1c <__aeabi_dcmplt>
 800a240:	e798      	b.n	800a174 <_strtod_l+0xac4>
 800a242:	2300      	movs	r3, #0
 800a244:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a246:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a248:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a24a:	6013      	str	r3, [r2, #0]
 800a24c:	f7ff ba6d 	b.w	800972a <_strtod_l+0x7a>
 800a250:	2a65      	cmp	r2, #101	@ 0x65
 800a252:	f43f ab66 	beq.w	8009922 <_strtod_l+0x272>
 800a256:	2a45      	cmp	r2, #69	@ 0x45
 800a258:	f43f ab63 	beq.w	8009922 <_strtod_l+0x272>
 800a25c:	2301      	movs	r3, #1
 800a25e:	f7ff bb9e 	b.w	800999e <_strtod_l+0x2ee>
 800a262:	bf00      	nop
 800a264:	f3af 8000 	nop.w
 800a268:	ffc00000 	.word	0xffc00000
 800a26c:	41dfffff 	.word	0x41dfffff
 800a270:	94a03595 	.word	0x94a03595
 800a274:	3fcfffff 	.word	0x3fcfffff

0800a278 <_strtod_r>:
 800a278:	4b01      	ldr	r3, [pc, #4]	@ (800a280 <_strtod_r+0x8>)
 800a27a:	f7ff ba19 	b.w	80096b0 <_strtod_l>
 800a27e:	bf00      	nop
 800a280:	2000007c 	.word	0x2000007c

0800a284 <_strtol_l.constprop.0>:
 800a284:	2b24      	cmp	r3, #36	@ 0x24
 800a286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a28a:	4686      	mov	lr, r0
 800a28c:	4690      	mov	r8, r2
 800a28e:	d801      	bhi.n	800a294 <_strtol_l.constprop.0+0x10>
 800a290:	2b01      	cmp	r3, #1
 800a292:	d106      	bne.n	800a2a2 <_strtol_l.constprop.0+0x1e>
 800a294:	f7fd fdbc 	bl	8007e10 <__errno>
 800a298:	2316      	movs	r3, #22
 800a29a:	6003      	str	r3, [r0, #0]
 800a29c:	2000      	movs	r0, #0
 800a29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a2:	4834      	ldr	r0, [pc, #208]	@ (800a374 <_strtol_l.constprop.0+0xf0>)
 800a2a4:	460d      	mov	r5, r1
 800a2a6:	462a      	mov	r2, r5
 800a2a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2ac:	5d06      	ldrb	r6, [r0, r4]
 800a2ae:	f016 0608 	ands.w	r6, r6, #8
 800a2b2:	d1f8      	bne.n	800a2a6 <_strtol_l.constprop.0+0x22>
 800a2b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a2b6:	d12d      	bne.n	800a314 <_strtol_l.constprop.0+0x90>
 800a2b8:	782c      	ldrb	r4, [r5, #0]
 800a2ba:	2601      	movs	r6, #1
 800a2bc:	1c95      	adds	r5, r2, #2
 800a2be:	f033 0210 	bics.w	r2, r3, #16
 800a2c2:	d109      	bne.n	800a2d8 <_strtol_l.constprop.0+0x54>
 800a2c4:	2c30      	cmp	r4, #48	@ 0x30
 800a2c6:	d12a      	bne.n	800a31e <_strtol_l.constprop.0+0x9a>
 800a2c8:	782a      	ldrb	r2, [r5, #0]
 800a2ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a2ce:	2a58      	cmp	r2, #88	@ 0x58
 800a2d0:	d125      	bne.n	800a31e <_strtol_l.constprop.0+0x9a>
 800a2d2:	786c      	ldrb	r4, [r5, #1]
 800a2d4:	2310      	movs	r3, #16
 800a2d6:	3502      	adds	r5, #2
 800a2d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a2dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	fbbc f9f3 	udiv	r9, ip, r3
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a2ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a2f0:	2f09      	cmp	r7, #9
 800a2f2:	d81b      	bhi.n	800a32c <_strtol_l.constprop.0+0xa8>
 800a2f4:	463c      	mov	r4, r7
 800a2f6:	42a3      	cmp	r3, r4
 800a2f8:	dd27      	ble.n	800a34a <_strtol_l.constprop.0+0xc6>
 800a2fa:	1c57      	adds	r7, r2, #1
 800a2fc:	d007      	beq.n	800a30e <_strtol_l.constprop.0+0x8a>
 800a2fe:	4581      	cmp	r9, r0
 800a300:	d320      	bcc.n	800a344 <_strtol_l.constprop.0+0xc0>
 800a302:	d101      	bne.n	800a308 <_strtol_l.constprop.0+0x84>
 800a304:	45a2      	cmp	sl, r4
 800a306:	db1d      	blt.n	800a344 <_strtol_l.constprop.0+0xc0>
 800a308:	fb00 4003 	mla	r0, r0, r3, r4
 800a30c:	2201      	movs	r2, #1
 800a30e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a312:	e7eb      	b.n	800a2ec <_strtol_l.constprop.0+0x68>
 800a314:	2c2b      	cmp	r4, #43	@ 0x2b
 800a316:	bf04      	itt	eq
 800a318:	782c      	ldrbeq	r4, [r5, #0]
 800a31a:	1c95      	addeq	r5, r2, #2
 800a31c:	e7cf      	b.n	800a2be <_strtol_l.constprop.0+0x3a>
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1da      	bne.n	800a2d8 <_strtol_l.constprop.0+0x54>
 800a322:	2c30      	cmp	r4, #48	@ 0x30
 800a324:	bf0c      	ite	eq
 800a326:	2308      	moveq	r3, #8
 800a328:	230a      	movne	r3, #10
 800a32a:	e7d5      	b.n	800a2d8 <_strtol_l.constprop.0+0x54>
 800a32c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a330:	2f19      	cmp	r7, #25
 800a332:	d801      	bhi.n	800a338 <_strtol_l.constprop.0+0xb4>
 800a334:	3c37      	subs	r4, #55	@ 0x37
 800a336:	e7de      	b.n	800a2f6 <_strtol_l.constprop.0+0x72>
 800a338:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a33c:	2f19      	cmp	r7, #25
 800a33e:	d804      	bhi.n	800a34a <_strtol_l.constprop.0+0xc6>
 800a340:	3c57      	subs	r4, #87	@ 0x57
 800a342:	e7d8      	b.n	800a2f6 <_strtol_l.constprop.0+0x72>
 800a344:	f04f 32ff 	mov.w	r2, #4294967295
 800a348:	e7e1      	b.n	800a30e <_strtol_l.constprop.0+0x8a>
 800a34a:	1c53      	adds	r3, r2, #1
 800a34c:	d108      	bne.n	800a360 <_strtol_l.constprop.0+0xdc>
 800a34e:	2322      	movs	r3, #34	@ 0x22
 800a350:	f8ce 3000 	str.w	r3, [lr]
 800a354:	4660      	mov	r0, ip
 800a356:	f1b8 0f00 	cmp.w	r8, #0
 800a35a:	d0a0      	beq.n	800a29e <_strtol_l.constprop.0+0x1a>
 800a35c:	1e69      	subs	r1, r5, #1
 800a35e:	e006      	b.n	800a36e <_strtol_l.constprop.0+0xea>
 800a360:	b106      	cbz	r6, 800a364 <_strtol_l.constprop.0+0xe0>
 800a362:	4240      	negs	r0, r0
 800a364:	f1b8 0f00 	cmp.w	r8, #0
 800a368:	d099      	beq.n	800a29e <_strtol_l.constprop.0+0x1a>
 800a36a:	2a00      	cmp	r2, #0
 800a36c:	d1f6      	bne.n	800a35c <_strtol_l.constprop.0+0xd8>
 800a36e:	f8c8 1000 	str.w	r1, [r8]
 800a372:	e794      	b.n	800a29e <_strtol_l.constprop.0+0x1a>
 800a374:	0800b721 	.word	0x0800b721

0800a378 <_strtol_r>:
 800a378:	f7ff bf84 	b.w	800a284 <_strtol_l.constprop.0>

0800a37c <__ssputs_r>:
 800a37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a380:	688e      	ldr	r6, [r1, #8]
 800a382:	461f      	mov	r7, r3
 800a384:	42be      	cmp	r6, r7
 800a386:	680b      	ldr	r3, [r1, #0]
 800a388:	4682      	mov	sl, r0
 800a38a:	460c      	mov	r4, r1
 800a38c:	4690      	mov	r8, r2
 800a38e:	d82d      	bhi.n	800a3ec <__ssputs_r+0x70>
 800a390:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a394:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a398:	d026      	beq.n	800a3e8 <__ssputs_r+0x6c>
 800a39a:	6965      	ldr	r5, [r4, #20]
 800a39c:	6909      	ldr	r1, [r1, #16]
 800a39e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3a2:	eba3 0901 	sub.w	r9, r3, r1
 800a3a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3aa:	1c7b      	adds	r3, r7, #1
 800a3ac:	444b      	add	r3, r9
 800a3ae:	106d      	asrs	r5, r5, #1
 800a3b0:	429d      	cmp	r5, r3
 800a3b2:	bf38      	it	cc
 800a3b4:	461d      	movcc	r5, r3
 800a3b6:	0553      	lsls	r3, r2, #21
 800a3b8:	d527      	bpl.n	800a40a <__ssputs_r+0x8e>
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f7fe fc1c 	bl	8008bf8 <_malloc_r>
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	b360      	cbz	r0, 800a41e <__ssputs_r+0xa2>
 800a3c4:	6921      	ldr	r1, [r4, #16]
 800a3c6:	464a      	mov	r2, r9
 800a3c8:	f000 fbde 	bl	800ab88 <memcpy>
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a3d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3d6:	81a3      	strh	r3, [r4, #12]
 800a3d8:	6126      	str	r6, [r4, #16]
 800a3da:	6165      	str	r5, [r4, #20]
 800a3dc:	444e      	add	r6, r9
 800a3de:	eba5 0509 	sub.w	r5, r5, r9
 800a3e2:	6026      	str	r6, [r4, #0]
 800a3e4:	60a5      	str	r5, [r4, #8]
 800a3e6:	463e      	mov	r6, r7
 800a3e8:	42be      	cmp	r6, r7
 800a3ea:	d900      	bls.n	800a3ee <__ssputs_r+0x72>
 800a3ec:	463e      	mov	r6, r7
 800a3ee:	6820      	ldr	r0, [r4, #0]
 800a3f0:	4632      	mov	r2, r6
 800a3f2:	4641      	mov	r1, r8
 800a3f4:	f000 fb6a 	bl	800aacc <memmove>
 800a3f8:	68a3      	ldr	r3, [r4, #8]
 800a3fa:	1b9b      	subs	r3, r3, r6
 800a3fc:	60a3      	str	r3, [r4, #8]
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	4433      	add	r3, r6
 800a402:	6023      	str	r3, [r4, #0]
 800a404:	2000      	movs	r0, #0
 800a406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a40a:	462a      	mov	r2, r5
 800a40c:	f000 ff51 	bl	800b2b2 <_realloc_r>
 800a410:	4606      	mov	r6, r0
 800a412:	2800      	cmp	r0, #0
 800a414:	d1e0      	bne.n	800a3d8 <__ssputs_r+0x5c>
 800a416:	6921      	ldr	r1, [r4, #16]
 800a418:	4650      	mov	r0, sl
 800a41a:	f7fe fb79 	bl	8008b10 <_free_r>
 800a41e:	230c      	movs	r3, #12
 800a420:	f8ca 3000 	str.w	r3, [sl]
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a42a:	81a3      	strh	r3, [r4, #12]
 800a42c:	f04f 30ff 	mov.w	r0, #4294967295
 800a430:	e7e9      	b.n	800a406 <__ssputs_r+0x8a>
	...

0800a434 <_svfiprintf_r>:
 800a434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a438:	4698      	mov	r8, r3
 800a43a:	898b      	ldrh	r3, [r1, #12]
 800a43c:	061b      	lsls	r3, r3, #24
 800a43e:	b09d      	sub	sp, #116	@ 0x74
 800a440:	4607      	mov	r7, r0
 800a442:	460d      	mov	r5, r1
 800a444:	4614      	mov	r4, r2
 800a446:	d510      	bpl.n	800a46a <_svfiprintf_r+0x36>
 800a448:	690b      	ldr	r3, [r1, #16]
 800a44a:	b973      	cbnz	r3, 800a46a <_svfiprintf_r+0x36>
 800a44c:	2140      	movs	r1, #64	@ 0x40
 800a44e:	f7fe fbd3 	bl	8008bf8 <_malloc_r>
 800a452:	6028      	str	r0, [r5, #0]
 800a454:	6128      	str	r0, [r5, #16]
 800a456:	b930      	cbnz	r0, 800a466 <_svfiprintf_r+0x32>
 800a458:	230c      	movs	r3, #12
 800a45a:	603b      	str	r3, [r7, #0]
 800a45c:	f04f 30ff 	mov.w	r0, #4294967295
 800a460:	b01d      	add	sp, #116	@ 0x74
 800a462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a466:	2340      	movs	r3, #64	@ 0x40
 800a468:	616b      	str	r3, [r5, #20]
 800a46a:	2300      	movs	r3, #0
 800a46c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a46e:	2320      	movs	r3, #32
 800a470:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a474:	f8cd 800c 	str.w	r8, [sp, #12]
 800a478:	2330      	movs	r3, #48	@ 0x30
 800a47a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a618 <_svfiprintf_r+0x1e4>
 800a47e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a482:	f04f 0901 	mov.w	r9, #1
 800a486:	4623      	mov	r3, r4
 800a488:	469a      	mov	sl, r3
 800a48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a48e:	b10a      	cbz	r2, 800a494 <_svfiprintf_r+0x60>
 800a490:	2a25      	cmp	r2, #37	@ 0x25
 800a492:	d1f9      	bne.n	800a488 <_svfiprintf_r+0x54>
 800a494:	ebba 0b04 	subs.w	fp, sl, r4
 800a498:	d00b      	beq.n	800a4b2 <_svfiprintf_r+0x7e>
 800a49a:	465b      	mov	r3, fp
 800a49c:	4622      	mov	r2, r4
 800a49e:	4629      	mov	r1, r5
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f7ff ff6b 	bl	800a37c <__ssputs_r>
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	f000 80a7 	beq.w	800a5fa <_svfiprintf_r+0x1c6>
 800a4ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4ae:	445a      	add	r2, fp
 800a4b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f000 809f 	beq.w	800a5fa <_svfiprintf_r+0x1c6>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4c6:	f10a 0a01 	add.w	sl, sl, #1
 800a4ca:	9304      	str	r3, [sp, #16]
 800a4cc:	9307      	str	r3, [sp, #28]
 800a4ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4d4:	4654      	mov	r4, sl
 800a4d6:	2205      	movs	r2, #5
 800a4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4dc:	484e      	ldr	r0, [pc, #312]	@ (800a618 <_svfiprintf_r+0x1e4>)
 800a4de:	f7f5 fe97 	bl	8000210 <memchr>
 800a4e2:	9a04      	ldr	r2, [sp, #16]
 800a4e4:	b9d8      	cbnz	r0, 800a51e <_svfiprintf_r+0xea>
 800a4e6:	06d0      	lsls	r0, r2, #27
 800a4e8:	bf44      	itt	mi
 800a4ea:	2320      	movmi	r3, #32
 800a4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4f0:	0711      	lsls	r1, r2, #28
 800a4f2:	bf44      	itt	mi
 800a4f4:	232b      	movmi	r3, #43	@ 0x2b
 800a4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a4fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800a500:	d015      	beq.n	800a52e <_svfiprintf_r+0xfa>
 800a502:	9a07      	ldr	r2, [sp, #28]
 800a504:	4654      	mov	r4, sl
 800a506:	2000      	movs	r0, #0
 800a508:	f04f 0c0a 	mov.w	ip, #10
 800a50c:	4621      	mov	r1, r4
 800a50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a512:	3b30      	subs	r3, #48	@ 0x30
 800a514:	2b09      	cmp	r3, #9
 800a516:	d94b      	bls.n	800a5b0 <_svfiprintf_r+0x17c>
 800a518:	b1b0      	cbz	r0, 800a548 <_svfiprintf_r+0x114>
 800a51a:	9207      	str	r2, [sp, #28]
 800a51c:	e014      	b.n	800a548 <_svfiprintf_r+0x114>
 800a51e:	eba0 0308 	sub.w	r3, r0, r8
 800a522:	fa09 f303 	lsl.w	r3, r9, r3
 800a526:	4313      	orrs	r3, r2
 800a528:	9304      	str	r3, [sp, #16]
 800a52a:	46a2      	mov	sl, r4
 800a52c:	e7d2      	b.n	800a4d4 <_svfiprintf_r+0xa0>
 800a52e:	9b03      	ldr	r3, [sp, #12]
 800a530:	1d19      	adds	r1, r3, #4
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	9103      	str	r1, [sp, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	bfbb      	ittet	lt
 800a53a:	425b      	neglt	r3, r3
 800a53c:	f042 0202 	orrlt.w	r2, r2, #2
 800a540:	9307      	strge	r3, [sp, #28]
 800a542:	9307      	strlt	r3, [sp, #28]
 800a544:	bfb8      	it	lt
 800a546:	9204      	strlt	r2, [sp, #16]
 800a548:	7823      	ldrb	r3, [r4, #0]
 800a54a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a54c:	d10a      	bne.n	800a564 <_svfiprintf_r+0x130>
 800a54e:	7863      	ldrb	r3, [r4, #1]
 800a550:	2b2a      	cmp	r3, #42	@ 0x2a
 800a552:	d132      	bne.n	800a5ba <_svfiprintf_r+0x186>
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	1d1a      	adds	r2, r3, #4
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	9203      	str	r2, [sp, #12]
 800a55c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a560:	3402      	adds	r4, #2
 800a562:	9305      	str	r3, [sp, #20]
 800a564:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a628 <_svfiprintf_r+0x1f4>
 800a568:	7821      	ldrb	r1, [r4, #0]
 800a56a:	2203      	movs	r2, #3
 800a56c:	4650      	mov	r0, sl
 800a56e:	f7f5 fe4f 	bl	8000210 <memchr>
 800a572:	b138      	cbz	r0, 800a584 <_svfiprintf_r+0x150>
 800a574:	9b04      	ldr	r3, [sp, #16]
 800a576:	eba0 000a 	sub.w	r0, r0, sl
 800a57a:	2240      	movs	r2, #64	@ 0x40
 800a57c:	4082      	lsls	r2, r0
 800a57e:	4313      	orrs	r3, r2
 800a580:	3401      	adds	r4, #1
 800a582:	9304      	str	r3, [sp, #16]
 800a584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a588:	4824      	ldr	r0, [pc, #144]	@ (800a61c <_svfiprintf_r+0x1e8>)
 800a58a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a58e:	2206      	movs	r2, #6
 800a590:	f7f5 fe3e 	bl	8000210 <memchr>
 800a594:	2800      	cmp	r0, #0
 800a596:	d036      	beq.n	800a606 <_svfiprintf_r+0x1d2>
 800a598:	4b21      	ldr	r3, [pc, #132]	@ (800a620 <_svfiprintf_r+0x1ec>)
 800a59a:	bb1b      	cbnz	r3, 800a5e4 <_svfiprintf_r+0x1b0>
 800a59c:	9b03      	ldr	r3, [sp, #12]
 800a59e:	3307      	adds	r3, #7
 800a5a0:	f023 0307 	bic.w	r3, r3, #7
 800a5a4:	3308      	adds	r3, #8
 800a5a6:	9303      	str	r3, [sp, #12]
 800a5a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5aa:	4433      	add	r3, r6
 800a5ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5ae:	e76a      	b.n	800a486 <_svfiprintf_r+0x52>
 800a5b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5b4:	460c      	mov	r4, r1
 800a5b6:	2001      	movs	r0, #1
 800a5b8:	e7a8      	b.n	800a50c <_svfiprintf_r+0xd8>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	3401      	adds	r4, #1
 800a5be:	9305      	str	r3, [sp, #20]
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	f04f 0c0a 	mov.w	ip, #10
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5cc:	3a30      	subs	r2, #48	@ 0x30
 800a5ce:	2a09      	cmp	r2, #9
 800a5d0:	d903      	bls.n	800a5da <_svfiprintf_r+0x1a6>
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d0c6      	beq.n	800a564 <_svfiprintf_r+0x130>
 800a5d6:	9105      	str	r1, [sp, #20]
 800a5d8:	e7c4      	b.n	800a564 <_svfiprintf_r+0x130>
 800a5da:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5de:	4604      	mov	r4, r0
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e7f0      	b.n	800a5c6 <_svfiprintf_r+0x192>
 800a5e4:	ab03      	add	r3, sp, #12
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	462a      	mov	r2, r5
 800a5ea:	4b0e      	ldr	r3, [pc, #56]	@ (800a624 <_svfiprintf_r+0x1f0>)
 800a5ec:	a904      	add	r1, sp, #16
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f7fc fbc6 	bl	8006d80 <_printf_float>
 800a5f4:	1c42      	adds	r2, r0, #1
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	d1d6      	bne.n	800a5a8 <_svfiprintf_r+0x174>
 800a5fa:	89ab      	ldrh	r3, [r5, #12]
 800a5fc:	065b      	lsls	r3, r3, #25
 800a5fe:	f53f af2d 	bmi.w	800a45c <_svfiprintf_r+0x28>
 800a602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a604:	e72c      	b.n	800a460 <_svfiprintf_r+0x2c>
 800a606:	ab03      	add	r3, sp, #12
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	462a      	mov	r2, r5
 800a60c:	4b05      	ldr	r3, [pc, #20]	@ (800a624 <_svfiprintf_r+0x1f0>)
 800a60e:	a904      	add	r1, sp, #16
 800a610:	4638      	mov	r0, r7
 800a612:	f7fc fe4d 	bl	80072b0 <_printf_i>
 800a616:	e7ed      	b.n	800a5f4 <_svfiprintf_r+0x1c0>
 800a618:	0800b821 	.word	0x0800b821
 800a61c:	0800b82b 	.word	0x0800b82b
 800a620:	08006d81 	.word	0x08006d81
 800a624:	0800a37d 	.word	0x0800a37d
 800a628:	0800b827 	.word	0x0800b827

0800a62c <__sfputc_r>:
 800a62c:	6893      	ldr	r3, [r2, #8]
 800a62e:	3b01      	subs	r3, #1
 800a630:	2b00      	cmp	r3, #0
 800a632:	b410      	push	{r4}
 800a634:	6093      	str	r3, [r2, #8]
 800a636:	da08      	bge.n	800a64a <__sfputc_r+0x1e>
 800a638:	6994      	ldr	r4, [r2, #24]
 800a63a:	42a3      	cmp	r3, r4
 800a63c:	db01      	blt.n	800a642 <__sfputc_r+0x16>
 800a63e:	290a      	cmp	r1, #10
 800a640:	d103      	bne.n	800a64a <__sfputc_r+0x1e>
 800a642:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a646:	f7fd bafc 	b.w	8007c42 <__swbuf_r>
 800a64a:	6813      	ldr	r3, [r2, #0]
 800a64c:	1c58      	adds	r0, r3, #1
 800a64e:	6010      	str	r0, [r2, #0]
 800a650:	7019      	strb	r1, [r3, #0]
 800a652:	4608      	mov	r0, r1
 800a654:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <__sfputs_r>:
 800a65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65c:	4606      	mov	r6, r0
 800a65e:	460f      	mov	r7, r1
 800a660:	4614      	mov	r4, r2
 800a662:	18d5      	adds	r5, r2, r3
 800a664:	42ac      	cmp	r4, r5
 800a666:	d101      	bne.n	800a66c <__sfputs_r+0x12>
 800a668:	2000      	movs	r0, #0
 800a66a:	e007      	b.n	800a67c <__sfputs_r+0x22>
 800a66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a670:	463a      	mov	r2, r7
 800a672:	4630      	mov	r0, r6
 800a674:	f7ff ffda 	bl	800a62c <__sfputc_r>
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	d1f3      	bne.n	800a664 <__sfputs_r+0xa>
 800a67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a680 <_vfiprintf_r>:
 800a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	460d      	mov	r5, r1
 800a686:	b09d      	sub	sp, #116	@ 0x74
 800a688:	4614      	mov	r4, r2
 800a68a:	4698      	mov	r8, r3
 800a68c:	4606      	mov	r6, r0
 800a68e:	b118      	cbz	r0, 800a698 <_vfiprintf_r+0x18>
 800a690:	6a03      	ldr	r3, [r0, #32]
 800a692:	b90b      	cbnz	r3, 800a698 <_vfiprintf_r+0x18>
 800a694:	f7fd f9cc 	bl	8007a30 <__sinit>
 800a698:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a69a:	07d9      	lsls	r1, r3, #31
 800a69c:	d405      	bmi.n	800a6aa <_vfiprintf_r+0x2a>
 800a69e:	89ab      	ldrh	r3, [r5, #12]
 800a6a0:	059a      	lsls	r2, r3, #22
 800a6a2:	d402      	bmi.n	800a6aa <_vfiprintf_r+0x2a>
 800a6a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6a6:	f7fd fbde 	bl	8007e66 <__retarget_lock_acquire_recursive>
 800a6aa:	89ab      	ldrh	r3, [r5, #12]
 800a6ac:	071b      	lsls	r3, r3, #28
 800a6ae:	d501      	bpl.n	800a6b4 <_vfiprintf_r+0x34>
 800a6b0:	692b      	ldr	r3, [r5, #16]
 800a6b2:	b99b      	cbnz	r3, 800a6dc <_vfiprintf_r+0x5c>
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f7fd fb02 	bl	8007cc0 <__swsetup_r>
 800a6bc:	b170      	cbz	r0, 800a6dc <_vfiprintf_r+0x5c>
 800a6be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6c0:	07dc      	lsls	r4, r3, #31
 800a6c2:	d504      	bpl.n	800a6ce <_vfiprintf_r+0x4e>
 800a6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c8:	b01d      	add	sp, #116	@ 0x74
 800a6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ce:	89ab      	ldrh	r3, [r5, #12]
 800a6d0:	0598      	lsls	r0, r3, #22
 800a6d2:	d4f7      	bmi.n	800a6c4 <_vfiprintf_r+0x44>
 800a6d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6d6:	f7fd fbc7 	bl	8007e68 <__retarget_lock_release_recursive>
 800a6da:	e7f3      	b.n	800a6c4 <_vfiprintf_r+0x44>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6e0:	2320      	movs	r3, #32
 800a6e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6ea:	2330      	movs	r3, #48	@ 0x30
 800a6ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a89c <_vfiprintf_r+0x21c>
 800a6f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6f4:	f04f 0901 	mov.w	r9, #1
 800a6f8:	4623      	mov	r3, r4
 800a6fa:	469a      	mov	sl, r3
 800a6fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a700:	b10a      	cbz	r2, 800a706 <_vfiprintf_r+0x86>
 800a702:	2a25      	cmp	r2, #37	@ 0x25
 800a704:	d1f9      	bne.n	800a6fa <_vfiprintf_r+0x7a>
 800a706:	ebba 0b04 	subs.w	fp, sl, r4
 800a70a:	d00b      	beq.n	800a724 <_vfiprintf_r+0xa4>
 800a70c:	465b      	mov	r3, fp
 800a70e:	4622      	mov	r2, r4
 800a710:	4629      	mov	r1, r5
 800a712:	4630      	mov	r0, r6
 800a714:	f7ff ffa1 	bl	800a65a <__sfputs_r>
 800a718:	3001      	adds	r0, #1
 800a71a:	f000 80a7 	beq.w	800a86c <_vfiprintf_r+0x1ec>
 800a71e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a720:	445a      	add	r2, fp
 800a722:	9209      	str	r2, [sp, #36]	@ 0x24
 800a724:	f89a 3000 	ldrb.w	r3, [sl]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 809f 	beq.w	800a86c <_vfiprintf_r+0x1ec>
 800a72e:	2300      	movs	r3, #0
 800a730:	f04f 32ff 	mov.w	r2, #4294967295
 800a734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a738:	f10a 0a01 	add.w	sl, sl, #1
 800a73c:	9304      	str	r3, [sp, #16]
 800a73e:	9307      	str	r3, [sp, #28]
 800a740:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a744:	931a      	str	r3, [sp, #104]	@ 0x68
 800a746:	4654      	mov	r4, sl
 800a748:	2205      	movs	r2, #5
 800a74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a74e:	4853      	ldr	r0, [pc, #332]	@ (800a89c <_vfiprintf_r+0x21c>)
 800a750:	f7f5 fd5e 	bl	8000210 <memchr>
 800a754:	9a04      	ldr	r2, [sp, #16]
 800a756:	b9d8      	cbnz	r0, 800a790 <_vfiprintf_r+0x110>
 800a758:	06d1      	lsls	r1, r2, #27
 800a75a:	bf44      	itt	mi
 800a75c:	2320      	movmi	r3, #32
 800a75e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a762:	0713      	lsls	r3, r2, #28
 800a764:	bf44      	itt	mi
 800a766:	232b      	movmi	r3, #43	@ 0x2b
 800a768:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a76c:	f89a 3000 	ldrb.w	r3, [sl]
 800a770:	2b2a      	cmp	r3, #42	@ 0x2a
 800a772:	d015      	beq.n	800a7a0 <_vfiprintf_r+0x120>
 800a774:	9a07      	ldr	r2, [sp, #28]
 800a776:	4654      	mov	r4, sl
 800a778:	2000      	movs	r0, #0
 800a77a:	f04f 0c0a 	mov.w	ip, #10
 800a77e:	4621      	mov	r1, r4
 800a780:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a784:	3b30      	subs	r3, #48	@ 0x30
 800a786:	2b09      	cmp	r3, #9
 800a788:	d94b      	bls.n	800a822 <_vfiprintf_r+0x1a2>
 800a78a:	b1b0      	cbz	r0, 800a7ba <_vfiprintf_r+0x13a>
 800a78c:	9207      	str	r2, [sp, #28]
 800a78e:	e014      	b.n	800a7ba <_vfiprintf_r+0x13a>
 800a790:	eba0 0308 	sub.w	r3, r0, r8
 800a794:	fa09 f303 	lsl.w	r3, r9, r3
 800a798:	4313      	orrs	r3, r2
 800a79a:	9304      	str	r3, [sp, #16]
 800a79c:	46a2      	mov	sl, r4
 800a79e:	e7d2      	b.n	800a746 <_vfiprintf_r+0xc6>
 800a7a0:	9b03      	ldr	r3, [sp, #12]
 800a7a2:	1d19      	adds	r1, r3, #4
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	9103      	str	r1, [sp, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	bfbb      	ittet	lt
 800a7ac:	425b      	neglt	r3, r3
 800a7ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a7b2:	9307      	strge	r3, [sp, #28]
 800a7b4:	9307      	strlt	r3, [sp, #28]
 800a7b6:	bfb8      	it	lt
 800a7b8:	9204      	strlt	r2, [sp, #16]
 800a7ba:	7823      	ldrb	r3, [r4, #0]
 800a7bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7be:	d10a      	bne.n	800a7d6 <_vfiprintf_r+0x156>
 800a7c0:	7863      	ldrb	r3, [r4, #1]
 800a7c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7c4:	d132      	bne.n	800a82c <_vfiprintf_r+0x1ac>
 800a7c6:	9b03      	ldr	r3, [sp, #12]
 800a7c8:	1d1a      	adds	r2, r3, #4
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	9203      	str	r2, [sp, #12]
 800a7ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7d2:	3402      	adds	r4, #2
 800a7d4:	9305      	str	r3, [sp, #20]
 800a7d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a8ac <_vfiprintf_r+0x22c>
 800a7da:	7821      	ldrb	r1, [r4, #0]
 800a7dc:	2203      	movs	r2, #3
 800a7de:	4650      	mov	r0, sl
 800a7e0:	f7f5 fd16 	bl	8000210 <memchr>
 800a7e4:	b138      	cbz	r0, 800a7f6 <_vfiprintf_r+0x176>
 800a7e6:	9b04      	ldr	r3, [sp, #16]
 800a7e8:	eba0 000a 	sub.w	r0, r0, sl
 800a7ec:	2240      	movs	r2, #64	@ 0x40
 800a7ee:	4082      	lsls	r2, r0
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	3401      	adds	r4, #1
 800a7f4:	9304      	str	r3, [sp, #16]
 800a7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7fa:	4829      	ldr	r0, [pc, #164]	@ (800a8a0 <_vfiprintf_r+0x220>)
 800a7fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a800:	2206      	movs	r2, #6
 800a802:	f7f5 fd05 	bl	8000210 <memchr>
 800a806:	2800      	cmp	r0, #0
 800a808:	d03f      	beq.n	800a88a <_vfiprintf_r+0x20a>
 800a80a:	4b26      	ldr	r3, [pc, #152]	@ (800a8a4 <_vfiprintf_r+0x224>)
 800a80c:	bb1b      	cbnz	r3, 800a856 <_vfiprintf_r+0x1d6>
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	3307      	adds	r3, #7
 800a812:	f023 0307 	bic.w	r3, r3, #7
 800a816:	3308      	adds	r3, #8
 800a818:	9303      	str	r3, [sp, #12]
 800a81a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a81c:	443b      	add	r3, r7
 800a81e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a820:	e76a      	b.n	800a6f8 <_vfiprintf_r+0x78>
 800a822:	fb0c 3202 	mla	r2, ip, r2, r3
 800a826:	460c      	mov	r4, r1
 800a828:	2001      	movs	r0, #1
 800a82a:	e7a8      	b.n	800a77e <_vfiprintf_r+0xfe>
 800a82c:	2300      	movs	r3, #0
 800a82e:	3401      	adds	r4, #1
 800a830:	9305      	str	r3, [sp, #20]
 800a832:	4619      	mov	r1, r3
 800a834:	f04f 0c0a 	mov.w	ip, #10
 800a838:	4620      	mov	r0, r4
 800a83a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a83e:	3a30      	subs	r2, #48	@ 0x30
 800a840:	2a09      	cmp	r2, #9
 800a842:	d903      	bls.n	800a84c <_vfiprintf_r+0x1cc>
 800a844:	2b00      	cmp	r3, #0
 800a846:	d0c6      	beq.n	800a7d6 <_vfiprintf_r+0x156>
 800a848:	9105      	str	r1, [sp, #20]
 800a84a:	e7c4      	b.n	800a7d6 <_vfiprintf_r+0x156>
 800a84c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a850:	4604      	mov	r4, r0
 800a852:	2301      	movs	r3, #1
 800a854:	e7f0      	b.n	800a838 <_vfiprintf_r+0x1b8>
 800a856:	ab03      	add	r3, sp, #12
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	462a      	mov	r2, r5
 800a85c:	4b12      	ldr	r3, [pc, #72]	@ (800a8a8 <_vfiprintf_r+0x228>)
 800a85e:	a904      	add	r1, sp, #16
 800a860:	4630      	mov	r0, r6
 800a862:	f7fc fa8d 	bl	8006d80 <_printf_float>
 800a866:	4607      	mov	r7, r0
 800a868:	1c78      	adds	r0, r7, #1
 800a86a:	d1d6      	bne.n	800a81a <_vfiprintf_r+0x19a>
 800a86c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a86e:	07d9      	lsls	r1, r3, #31
 800a870:	d405      	bmi.n	800a87e <_vfiprintf_r+0x1fe>
 800a872:	89ab      	ldrh	r3, [r5, #12]
 800a874:	059a      	lsls	r2, r3, #22
 800a876:	d402      	bmi.n	800a87e <_vfiprintf_r+0x1fe>
 800a878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a87a:	f7fd faf5 	bl	8007e68 <__retarget_lock_release_recursive>
 800a87e:	89ab      	ldrh	r3, [r5, #12]
 800a880:	065b      	lsls	r3, r3, #25
 800a882:	f53f af1f 	bmi.w	800a6c4 <_vfiprintf_r+0x44>
 800a886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a888:	e71e      	b.n	800a6c8 <_vfiprintf_r+0x48>
 800a88a:	ab03      	add	r3, sp, #12
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	462a      	mov	r2, r5
 800a890:	4b05      	ldr	r3, [pc, #20]	@ (800a8a8 <_vfiprintf_r+0x228>)
 800a892:	a904      	add	r1, sp, #16
 800a894:	4630      	mov	r0, r6
 800a896:	f7fc fd0b 	bl	80072b0 <_printf_i>
 800a89a:	e7e4      	b.n	800a866 <_vfiprintf_r+0x1e6>
 800a89c:	0800b821 	.word	0x0800b821
 800a8a0:	0800b82b 	.word	0x0800b82b
 800a8a4:	08006d81 	.word	0x08006d81
 800a8a8:	0800a65b 	.word	0x0800a65b
 800a8ac:	0800b827 	.word	0x0800b827

0800a8b0 <__sflush_r>:
 800a8b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b8:	0716      	lsls	r6, r2, #28
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	460c      	mov	r4, r1
 800a8be:	d454      	bmi.n	800a96a <__sflush_r+0xba>
 800a8c0:	684b      	ldr	r3, [r1, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	dc02      	bgt.n	800a8cc <__sflush_r+0x1c>
 800a8c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	dd48      	ble.n	800a95e <__sflush_r+0xae>
 800a8cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8ce:	2e00      	cmp	r6, #0
 800a8d0:	d045      	beq.n	800a95e <__sflush_r+0xae>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8d8:	682f      	ldr	r7, [r5, #0]
 800a8da:	6a21      	ldr	r1, [r4, #32]
 800a8dc:	602b      	str	r3, [r5, #0]
 800a8de:	d030      	beq.n	800a942 <__sflush_r+0x92>
 800a8e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	0759      	lsls	r1, r3, #29
 800a8e6:	d505      	bpl.n	800a8f4 <__sflush_r+0x44>
 800a8e8:	6863      	ldr	r3, [r4, #4]
 800a8ea:	1ad2      	subs	r2, r2, r3
 800a8ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8ee:	b10b      	cbz	r3, 800a8f4 <__sflush_r+0x44>
 800a8f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8f2:	1ad2      	subs	r2, r2, r3
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8f8:	6a21      	ldr	r1, [r4, #32]
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b0      	blx	r6
 800a8fe:	1c43      	adds	r3, r0, #1
 800a900:	89a3      	ldrh	r3, [r4, #12]
 800a902:	d106      	bne.n	800a912 <__sflush_r+0x62>
 800a904:	6829      	ldr	r1, [r5, #0]
 800a906:	291d      	cmp	r1, #29
 800a908:	d82b      	bhi.n	800a962 <__sflush_r+0xb2>
 800a90a:	4a2a      	ldr	r2, [pc, #168]	@ (800a9b4 <__sflush_r+0x104>)
 800a90c:	410a      	asrs	r2, r1
 800a90e:	07d6      	lsls	r6, r2, #31
 800a910:	d427      	bmi.n	800a962 <__sflush_r+0xb2>
 800a912:	2200      	movs	r2, #0
 800a914:	6062      	str	r2, [r4, #4]
 800a916:	04d9      	lsls	r1, r3, #19
 800a918:	6922      	ldr	r2, [r4, #16]
 800a91a:	6022      	str	r2, [r4, #0]
 800a91c:	d504      	bpl.n	800a928 <__sflush_r+0x78>
 800a91e:	1c42      	adds	r2, r0, #1
 800a920:	d101      	bne.n	800a926 <__sflush_r+0x76>
 800a922:	682b      	ldr	r3, [r5, #0]
 800a924:	b903      	cbnz	r3, 800a928 <__sflush_r+0x78>
 800a926:	6560      	str	r0, [r4, #84]	@ 0x54
 800a928:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a92a:	602f      	str	r7, [r5, #0]
 800a92c:	b1b9      	cbz	r1, 800a95e <__sflush_r+0xae>
 800a92e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a932:	4299      	cmp	r1, r3
 800a934:	d002      	beq.n	800a93c <__sflush_r+0x8c>
 800a936:	4628      	mov	r0, r5
 800a938:	f7fe f8ea 	bl	8008b10 <_free_r>
 800a93c:	2300      	movs	r3, #0
 800a93e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a940:	e00d      	b.n	800a95e <__sflush_r+0xae>
 800a942:	2301      	movs	r3, #1
 800a944:	4628      	mov	r0, r5
 800a946:	47b0      	blx	r6
 800a948:	4602      	mov	r2, r0
 800a94a:	1c50      	adds	r0, r2, #1
 800a94c:	d1c9      	bne.n	800a8e2 <__sflush_r+0x32>
 800a94e:	682b      	ldr	r3, [r5, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d0c6      	beq.n	800a8e2 <__sflush_r+0x32>
 800a954:	2b1d      	cmp	r3, #29
 800a956:	d001      	beq.n	800a95c <__sflush_r+0xac>
 800a958:	2b16      	cmp	r3, #22
 800a95a:	d11e      	bne.n	800a99a <__sflush_r+0xea>
 800a95c:	602f      	str	r7, [r5, #0]
 800a95e:	2000      	movs	r0, #0
 800a960:	e022      	b.n	800a9a8 <__sflush_r+0xf8>
 800a962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a966:	b21b      	sxth	r3, r3
 800a968:	e01b      	b.n	800a9a2 <__sflush_r+0xf2>
 800a96a:	690f      	ldr	r7, [r1, #16]
 800a96c:	2f00      	cmp	r7, #0
 800a96e:	d0f6      	beq.n	800a95e <__sflush_r+0xae>
 800a970:	0793      	lsls	r3, r2, #30
 800a972:	680e      	ldr	r6, [r1, #0]
 800a974:	bf08      	it	eq
 800a976:	694b      	ldreq	r3, [r1, #20]
 800a978:	600f      	str	r7, [r1, #0]
 800a97a:	bf18      	it	ne
 800a97c:	2300      	movne	r3, #0
 800a97e:	eba6 0807 	sub.w	r8, r6, r7
 800a982:	608b      	str	r3, [r1, #8]
 800a984:	f1b8 0f00 	cmp.w	r8, #0
 800a988:	dde9      	ble.n	800a95e <__sflush_r+0xae>
 800a98a:	6a21      	ldr	r1, [r4, #32]
 800a98c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a98e:	4643      	mov	r3, r8
 800a990:	463a      	mov	r2, r7
 800a992:	4628      	mov	r0, r5
 800a994:	47b0      	blx	r6
 800a996:	2800      	cmp	r0, #0
 800a998:	dc08      	bgt.n	800a9ac <__sflush_r+0xfc>
 800a99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a99e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9a2:	81a3      	strh	r3, [r4, #12]
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ac:	4407      	add	r7, r0
 800a9ae:	eba8 0800 	sub.w	r8, r8, r0
 800a9b2:	e7e7      	b.n	800a984 <__sflush_r+0xd4>
 800a9b4:	dfbffffe 	.word	0xdfbffffe

0800a9b8 <_fflush_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	690b      	ldr	r3, [r1, #16]
 800a9bc:	4605      	mov	r5, r0
 800a9be:	460c      	mov	r4, r1
 800a9c0:	b913      	cbnz	r3, 800a9c8 <_fflush_r+0x10>
 800a9c2:	2500      	movs	r5, #0
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	b118      	cbz	r0, 800a9d2 <_fflush_r+0x1a>
 800a9ca:	6a03      	ldr	r3, [r0, #32]
 800a9cc:	b90b      	cbnz	r3, 800a9d2 <_fflush_r+0x1a>
 800a9ce:	f7fd f82f 	bl	8007a30 <__sinit>
 800a9d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d0f3      	beq.n	800a9c2 <_fflush_r+0xa>
 800a9da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9dc:	07d0      	lsls	r0, r2, #31
 800a9de:	d404      	bmi.n	800a9ea <_fflush_r+0x32>
 800a9e0:	0599      	lsls	r1, r3, #22
 800a9e2:	d402      	bmi.n	800a9ea <_fflush_r+0x32>
 800a9e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9e6:	f7fd fa3e 	bl	8007e66 <__retarget_lock_acquire_recursive>
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	f7ff ff5f 	bl	800a8b0 <__sflush_r>
 800a9f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9f4:	07da      	lsls	r2, r3, #31
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	d4e4      	bmi.n	800a9c4 <_fflush_r+0xc>
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	059b      	lsls	r3, r3, #22
 800a9fe:	d4e1      	bmi.n	800a9c4 <_fflush_r+0xc>
 800aa00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa02:	f7fd fa31 	bl	8007e68 <__retarget_lock_release_recursive>
 800aa06:	e7dd      	b.n	800a9c4 <_fflush_r+0xc>

0800aa08 <__swhatbuf_r>:
 800aa08:	b570      	push	{r4, r5, r6, lr}
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa10:	2900      	cmp	r1, #0
 800aa12:	b096      	sub	sp, #88	@ 0x58
 800aa14:	4615      	mov	r5, r2
 800aa16:	461e      	mov	r6, r3
 800aa18:	da0d      	bge.n	800aa36 <__swhatbuf_r+0x2e>
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa20:	f04f 0100 	mov.w	r1, #0
 800aa24:	bf14      	ite	ne
 800aa26:	2340      	movne	r3, #64	@ 0x40
 800aa28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	6031      	str	r1, [r6, #0]
 800aa30:	602b      	str	r3, [r5, #0]
 800aa32:	b016      	add	sp, #88	@ 0x58
 800aa34:	bd70      	pop	{r4, r5, r6, pc}
 800aa36:	466a      	mov	r2, sp
 800aa38:	f000 f874 	bl	800ab24 <_fstat_r>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	dbec      	blt.n	800aa1a <__swhatbuf_r+0x12>
 800aa40:	9901      	ldr	r1, [sp, #4]
 800aa42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa4a:	4259      	negs	r1, r3
 800aa4c:	4159      	adcs	r1, r3
 800aa4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa52:	e7eb      	b.n	800aa2c <__swhatbuf_r+0x24>

0800aa54 <__smakebuf_r>:
 800aa54:	898b      	ldrh	r3, [r1, #12]
 800aa56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa58:	079d      	lsls	r5, r3, #30
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	460c      	mov	r4, r1
 800aa5e:	d507      	bpl.n	800aa70 <__smakebuf_r+0x1c>
 800aa60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	6123      	str	r3, [r4, #16]
 800aa68:	2301      	movs	r3, #1
 800aa6a:	6163      	str	r3, [r4, #20]
 800aa6c:	b003      	add	sp, #12
 800aa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa70:	ab01      	add	r3, sp, #4
 800aa72:	466a      	mov	r2, sp
 800aa74:	f7ff ffc8 	bl	800aa08 <__swhatbuf_r>
 800aa78:	9f00      	ldr	r7, [sp, #0]
 800aa7a:	4605      	mov	r5, r0
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f7fe f8ba 	bl	8008bf8 <_malloc_r>
 800aa84:	b948      	cbnz	r0, 800aa9a <__smakebuf_r+0x46>
 800aa86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa8a:	059a      	lsls	r2, r3, #22
 800aa8c:	d4ee      	bmi.n	800aa6c <__smakebuf_r+0x18>
 800aa8e:	f023 0303 	bic.w	r3, r3, #3
 800aa92:	f043 0302 	orr.w	r3, r3, #2
 800aa96:	81a3      	strh	r3, [r4, #12]
 800aa98:	e7e2      	b.n	800aa60 <__smakebuf_r+0xc>
 800aa9a:	89a3      	ldrh	r3, [r4, #12]
 800aa9c:	6020      	str	r0, [r4, #0]
 800aa9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaa2:	81a3      	strh	r3, [r4, #12]
 800aaa4:	9b01      	ldr	r3, [sp, #4]
 800aaa6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aaaa:	b15b      	cbz	r3, 800aac4 <__smakebuf_r+0x70>
 800aaac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aab0:	4630      	mov	r0, r6
 800aab2:	f000 f849 	bl	800ab48 <_isatty_r>
 800aab6:	b128      	cbz	r0, 800aac4 <__smakebuf_r+0x70>
 800aab8:	89a3      	ldrh	r3, [r4, #12]
 800aaba:	f023 0303 	bic.w	r3, r3, #3
 800aabe:	f043 0301 	orr.w	r3, r3, #1
 800aac2:	81a3      	strh	r3, [r4, #12]
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	431d      	orrs	r5, r3
 800aac8:	81a5      	strh	r5, [r4, #12]
 800aaca:	e7cf      	b.n	800aa6c <__smakebuf_r+0x18>

0800aacc <memmove>:
 800aacc:	4288      	cmp	r0, r1
 800aace:	b510      	push	{r4, lr}
 800aad0:	eb01 0402 	add.w	r4, r1, r2
 800aad4:	d902      	bls.n	800aadc <memmove+0x10>
 800aad6:	4284      	cmp	r4, r0
 800aad8:	4623      	mov	r3, r4
 800aada:	d807      	bhi.n	800aaec <memmove+0x20>
 800aadc:	1e43      	subs	r3, r0, #1
 800aade:	42a1      	cmp	r1, r4
 800aae0:	d008      	beq.n	800aaf4 <memmove+0x28>
 800aae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aaea:	e7f8      	b.n	800aade <memmove+0x12>
 800aaec:	4402      	add	r2, r0
 800aaee:	4601      	mov	r1, r0
 800aaf0:	428a      	cmp	r2, r1
 800aaf2:	d100      	bne.n	800aaf6 <memmove+0x2a>
 800aaf4:	bd10      	pop	{r4, pc}
 800aaf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aafa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aafe:	e7f7      	b.n	800aaf0 <memmove+0x24>

0800ab00 <strncmp>:
 800ab00:	b510      	push	{r4, lr}
 800ab02:	b16a      	cbz	r2, 800ab20 <strncmp+0x20>
 800ab04:	3901      	subs	r1, #1
 800ab06:	1884      	adds	r4, r0, r2
 800ab08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d103      	bne.n	800ab1c <strncmp+0x1c>
 800ab14:	42a0      	cmp	r0, r4
 800ab16:	d001      	beq.n	800ab1c <strncmp+0x1c>
 800ab18:	2a00      	cmp	r2, #0
 800ab1a:	d1f5      	bne.n	800ab08 <strncmp+0x8>
 800ab1c:	1ad0      	subs	r0, r2, r3
 800ab1e:	bd10      	pop	{r4, pc}
 800ab20:	4610      	mov	r0, r2
 800ab22:	e7fc      	b.n	800ab1e <strncmp+0x1e>

0800ab24 <_fstat_r>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4d07      	ldr	r5, [pc, #28]	@ (800ab44 <_fstat_r+0x20>)
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	4608      	mov	r0, r1
 800ab2e:	4611      	mov	r1, r2
 800ab30:	602b      	str	r3, [r5, #0]
 800ab32:	f7f8 f815 	bl	8002b60 <_fstat>
 800ab36:	1c43      	adds	r3, r0, #1
 800ab38:	d102      	bne.n	800ab40 <_fstat_r+0x1c>
 800ab3a:	682b      	ldr	r3, [r5, #0]
 800ab3c:	b103      	cbz	r3, 800ab40 <_fstat_r+0x1c>
 800ab3e:	6023      	str	r3, [r4, #0]
 800ab40:	bd38      	pop	{r3, r4, r5, pc}
 800ab42:	bf00      	nop
 800ab44:	200006ac 	.word	0x200006ac

0800ab48 <_isatty_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	4d06      	ldr	r5, [pc, #24]	@ (800ab64 <_isatty_r+0x1c>)
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4604      	mov	r4, r0
 800ab50:	4608      	mov	r0, r1
 800ab52:	602b      	str	r3, [r5, #0]
 800ab54:	f7f8 f814 	bl	8002b80 <_isatty>
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	d102      	bne.n	800ab62 <_isatty_r+0x1a>
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	b103      	cbz	r3, 800ab62 <_isatty_r+0x1a>
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	200006ac 	.word	0x200006ac

0800ab68 <_sbrk_r>:
 800ab68:	b538      	push	{r3, r4, r5, lr}
 800ab6a:	4d06      	ldr	r5, [pc, #24]	@ (800ab84 <_sbrk_r+0x1c>)
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	4604      	mov	r4, r0
 800ab70:	4608      	mov	r0, r1
 800ab72:	602b      	str	r3, [r5, #0]
 800ab74:	f7f8 f81c 	bl	8002bb0 <_sbrk>
 800ab78:	1c43      	adds	r3, r0, #1
 800ab7a:	d102      	bne.n	800ab82 <_sbrk_r+0x1a>
 800ab7c:	682b      	ldr	r3, [r5, #0]
 800ab7e:	b103      	cbz	r3, 800ab82 <_sbrk_r+0x1a>
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	bd38      	pop	{r3, r4, r5, pc}
 800ab84:	200006ac 	.word	0x200006ac

0800ab88 <memcpy>:
 800ab88:	440a      	add	r2, r1
 800ab8a:	4291      	cmp	r1, r2
 800ab8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab90:	d100      	bne.n	800ab94 <memcpy+0xc>
 800ab92:	4770      	bx	lr
 800ab94:	b510      	push	{r4, lr}
 800ab96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab9e:	4291      	cmp	r1, r2
 800aba0:	d1f9      	bne.n	800ab96 <memcpy+0xe>
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	0000      	movs	r0, r0
	...

0800aba8 <nan>:
 800aba8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800abb0 <nan+0x8>
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	00000000 	.word	0x00000000
 800abb4:	7ff80000 	.word	0x7ff80000

0800abb8 <__assert_func>:
 800abb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abba:	4614      	mov	r4, r2
 800abbc:	461a      	mov	r2, r3
 800abbe:	4b09      	ldr	r3, [pc, #36]	@ (800abe4 <__assert_func+0x2c>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4605      	mov	r5, r0
 800abc4:	68d8      	ldr	r0, [r3, #12]
 800abc6:	b954      	cbnz	r4, 800abde <__assert_func+0x26>
 800abc8:	4b07      	ldr	r3, [pc, #28]	@ (800abe8 <__assert_func+0x30>)
 800abca:	461c      	mov	r4, r3
 800abcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abd0:	9100      	str	r1, [sp, #0]
 800abd2:	462b      	mov	r3, r5
 800abd4:	4905      	ldr	r1, [pc, #20]	@ (800abec <__assert_func+0x34>)
 800abd6:	f000 fba7 	bl	800b328 <fiprintf>
 800abda:	f000 fbb7 	bl	800b34c <abort>
 800abde:	4b04      	ldr	r3, [pc, #16]	@ (800abf0 <__assert_func+0x38>)
 800abe0:	e7f4      	b.n	800abcc <__assert_func+0x14>
 800abe2:	bf00      	nop
 800abe4:	2000002c 	.word	0x2000002c
 800abe8:	0800b875 	.word	0x0800b875
 800abec:	0800b847 	.word	0x0800b847
 800abf0:	0800b83a 	.word	0x0800b83a

0800abf4 <_calloc_r>:
 800abf4:	b570      	push	{r4, r5, r6, lr}
 800abf6:	fba1 5402 	umull	r5, r4, r1, r2
 800abfa:	b93c      	cbnz	r4, 800ac0c <_calloc_r+0x18>
 800abfc:	4629      	mov	r1, r5
 800abfe:	f7fd fffb 	bl	8008bf8 <_malloc_r>
 800ac02:	4606      	mov	r6, r0
 800ac04:	b928      	cbnz	r0, 800ac12 <_calloc_r+0x1e>
 800ac06:	2600      	movs	r6, #0
 800ac08:	4630      	mov	r0, r6
 800ac0a:	bd70      	pop	{r4, r5, r6, pc}
 800ac0c:	220c      	movs	r2, #12
 800ac0e:	6002      	str	r2, [r0, #0]
 800ac10:	e7f9      	b.n	800ac06 <_calloc_r+0x12>
 800ac12:	462a      	mov	r2, r5
 800ac14:	4621      	mov	r1, r4
 800ac16:	f7fd f8a9 	bl	8007d6c <memset>
 800ac1a:	e7f5      	b.n	800ac08 <_calloc_r+0x14>

0800ac1c <rshift>:
 800ac1c:	6903      	ldr	r3, [r0, #16]
 800ac1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ac22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac26:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ac2a:	f100 0414 	add.w	r4, r0, #20
 800ac2e:	dd45      	ble.n	800acbc <rshift+0xa0>
 800ac30:	f011 011f 	ands.w	r1, r1, #31
 800ac34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ac38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ac3c:	d10c      	bne.n	800ac58 <rshift+0x3c>
 800ac3e:	f100 0710 	add.w	r7, r0, #16
 800ac42:	4629      	mov	r1, r5
 800ac44:	42b1      	cmp	r1, r6
 800ac46:	d334      	bcc.n	800acb2 <rshift+0x96>
 800ac48:	1a9b      	subs	r3, r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	1eea      	subs	r2, r5, #3
 800ac4e:	4296      	cmp	r6, r2
 800ac50:	bf38      	it	cc
 800ac52:	2300      	movcc	r3, #0
 800ac54:	4423      	add	r3, r4
 800ac56:	e015      	b.n	800ac84 <rshift+0x68>
 800ac58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ac5c:	f1c1 0820 	rsb	r8, r1, #32
 800ac60:	40cf      	lsrs	r7, r1
 800ac62:	f105 0e04 	add.w	lr, r5, #4
 800ac66:	46a1      	mov	r9, r4
 800ac68:	4576      	cmp	r6, lr
 800ac6a:	46f4      	mov	ip, lr
 800ac6c:	d815      	bhi.n	800ac9a <rshift+0x7e>
 800ac6e:	1a9a      	subs	r2, r3, r2
 800ac70:	0092      	lsls	r2, r2, #2
 800ac72:	3a04      	subs	r2, #4
 800ac74:	3501      	adds	r5, #1
 800ac76:	42ae      	cmp	r6, r5
 800ac78:	bf38      	it	cc
 800ac7a:	2200      	movcc	r2, #0
 800ac7c:	18a3      	adds	r3, r4, r2
 800ac7e:	50a7      	str	r7, [r4, r2]
 800ac80:	b107      	cbz	r7, 800ac84 <rshift+0x68>
 800ac82:	3304      	adds	r3, #4
 800ac84:	1b1a      	subs	r2, r3, r4
 800ac86:	42a3      	cmp	r3, r4
 800ac88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac8c:	bf08      	it	eq
 800ac8e:	2300      	moveq	r3, #0
 800ac90:	6102      	str	r2, [r0, #16]
 800ac92:	bf08      	it	eq
 800ac94:	6143      	streq	r3, [r0, #20]
 800ac96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac9a:	f8dc c000 	ldr.w	ip, [ip]
 800ac9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800aca2:	ea4c 0707 	orr.w	r7, ip, r7
 800aca6:	f849 7b04 	str.w	r7, [r9], #4
 800acaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800acae:	40cf      	lsrs	r7, r1
 800acb0:	e7da      	b.n	800ac68 <rshift+0x4c>
 800acb2:	f851 cb04 	ldr.w	ip, [r1], #4
 800acb6:	f847 cf04 	str.w	ip, [r7, #4]!
 800acba:	e7c3      	b.n	800ac44 <rshift+0x28>
 800acbc:	4623      	mov	r3, r4
 800acbe:	e7e1      	b.n	800ac84 <rshift+0x68>

0800acc0 <__hexdig_fun>:
 800acc0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800acc4:	2b09      	cmp	r3, #9
 800acc6:	d802      	bhi.n	800acce <__hexdig_fun+0xe>
 800acc8:	3820      	subs	r0, #32
 800acca:	b2c0      	uxtb	r0, r0
 800accc:	4770      	bx	lr
 800acce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800acd2:	2b05      	cmp	r3, #5
 800acd4:	d801      	bhi.n	800acda <__hexdig_fun+0x1a>
 800acd6:	3847      	subs	r0, #71	@ 0x47
 800acd8:	e7f7      	b.n	800acca <__hexdig_fun+0xa>
 800acda:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800acde:	2b05      	cmp	r3, #5
 800ace0:	d801      	bhi.n	800ace6 <__hexdig_fun+0x26>
 800ace2:	3827      	subs	r0, #39	@ 0x27
 800ace4:	e7f1      	b.n	800acca <__hexdig_fun+0xa>
 800ace6:	2000      	movs	r0, #0
 800ace8:	4770      	bx	lr
	...

0800acec <__gethex>:
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	b085      	sub	sp, #20
 800acf2:	468a      	mov	sl, r1
 800acf4:	9302      	str	r3, [sp, #8]
 800acf6:	680b      	ldr	r3, [r1, #0]
 800acf8:	9001      	str	r0, [sp, #4]
 800acfa:	4690      	mov	r8, r2
 800acfc:	1c9c      	adds	r4, r3, #2
 800acfe:	46a1      	mov	r9, r4
 800ad00:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ad04:	2830      	cmp	r0, #48	@ 0x30
 800ad06:	d0fa      	beq.n	800acfe <__gethex+0x12>
 800ad08:	eba9 0303 	sub.w	r3, r9, r3
 800ad0c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ad10:	f7ff ffd6 	bl	800acc0 <__hexdig_fun>
 800ad14:	4605      	mov	r5, r0
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d168      	bne.n	800adec <__gethex+0x100>
 800ad1a:	49a0      	ldr	r1, [pc, #640]	@ (800af9c <__gethex+0x2b0>)
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	4648      	mov	r0, r9
 800ad20:	f7ff feee 	bl	800ab00 <strncmp>
 800ad24:	4607      	mov	r7, r0
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d167      	bne.n	800adfa <__gethex+0x10e>
 800ad2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ad2e:	4626      	mov	r6, r4
 800ad30:	f7ff ffc6 	bl	800acc0 <__hexdig_fun>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d062      	beq.n	800adfe <__gethex+0x112>
 800ad38:	4623      	mov	r3, r4
 800ad3a:	7818      	ldrb	r0, [r3, #0]
 800ad3c:	2830      	cmp	r0, #48	@ 0x30
 800ad3e:	4699      	mov	r9, r3
 800ad40:	f103 0301 	add.w	r3, r3, #1
 800ad44:	d0f9      	beq.n	800ad3a <__gethex+0x4e>
 800ad46:	f7ff ffbb 	bl	800acc0 <__hexdig_fun>
 800ad4a:	fab0 f580 	clz	r5, r0
 800ad4e:	096d      	lsrs	r5, r5, #5
 800ad50:	f04f 0b01 	mov.w	fp, #1
 800ad54:	464a      	mov	r2, r9
 800ad56:	4616      	mov	r6, r2
 800ad58:	3201      	adds	r2, #1
 800ad5a:	7830      	ldrb	r0, [r6, #0]
 800ad5c:	f7ff ffb0 	bl	800acc0 <__hexdig_fun>
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d1f8      	bne.n	800ad56 <__gethex+0x6a>
 800ad64:	498d      	ldr	r1, [pc, #564]	@ (800af9c <__gethex+0x2b0>)
 800ad66:	2201      	movs	r2, #1
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f7ff fec9 	bl	800ab00 <strncmp>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d13f      	bne.n	800adf2 <__gethex+0x106>
 800ad72:	b944      	cbnz	r4, 800ad86 <__gethex+0x9a>
 800ad74:	1c74      	adds	r4, r6, #1
 800ad76:	4622      	mov	r2, r4
 800ad78:	4616      	mov	r6, r2
 800ad7a:	3201      	adds	r2, #1
 800ad7c:	7830      	ldrb	r0, [r6, #0]
 800ad7e:	f7ff ff9f 	bl	800acc0 <__hexdig_fun>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d1f8      	bne.n	800ad78 <__gethex+0x8c>
 800ad86:	1ba4      	subs	r4, r4, r6
 800ad88:	00a7      	lsls	r7, r4, #2
 800ad8a:	7833      	ldrb	r3, [r6, #0]
 800ad8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ad90:	2b50      	cmp	r3, #80	@ 0x50
 800ad92:	d13e      	bne.n	800ae12 <__gethex+0x126>
 800ad94:	7873      	ldrb	r3, [r6, #1]
 800ad96:	2b2b      	cmp	r3, #43	@ 0x2b
 800ad98:	d033      	beq.n	800ae02 <__gethex+0x116>
 800ad9a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ad9c:	d034      	beq.n	800ae08 <__gethex+0x11c>
 800ad9e:	1c71      	adds	r1, r6, #1
 800ada0:	2400      	movs	r4, #0
 800ada2:	7808      	ldrb	r0, [r1, #0]
 800ada4:	f7ff ff8c 	bl	800acc0 <__hexdig_fun>
 800ada8:	1e43      	subs	r3, r0, #1
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b18      	cmp	r3, #24
 800adae:	d830      	bhi.n	800ae12 <__gethex+0x126>
 800adb0:	f1a0 0210 	sub.w	r2, r0, #16
 800adb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800adb8:	f7ff ff82 	bl	800acc0 <__hexdig_fun>
 800adbc:	f100 3cff 	add.w	ip, r0, #4294967295
 800adc0:	fa5f fc8c 	uxtb.w	ip, ip
 800adc4:	f1bc 0f18 	cmp.w	ip, #24
 800adc8:	f04f 030a 	mov.w	r3, #10
 800adcc:	d91e      	bls.n	800ae0c <__gethex+0x120>
 800adce:	b104      	cbz	r4, 800add2 <__gethex+0xe6>
 800add0:	4252      	negs	r2, r2
 800add2:	4417      	add	r7, r2
 800add4:	f8ca 1000 	str.w	r1, [sl]
 800add8:	b1ed      	cbz	r5, 800ae16 <__gethex+0x12a>
 800adda:	f1bb 0f00 	cmp.w	fp, #0
 800adde:	bf0c      	ite	eq
 800ade0:	2506      	moveq	r5, #6
 800ade2:	2500      	movne	r5, #0
 800ade4:	4628      	mov	r0, r5
 800ade6:	b005      	add	sp, #20
 800ade8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adec:	2500      	movs	r5, #0
 800adee:	462c      	mov	r4, r5
 800adf0:	e7b0      	b.n	800ad54 <__gethex+0x68>
 800adf2:	2c00      	cmp	r4, #0
 800adf4:	d1c7      	bne.n	800ad86 <__gethex+0x9a>
 800adf6:	4627      	mov	r7, r4
 800adf8:	e7c7      	b.n	800ad8a <__gethex+0x9e>
 800adfa:	464e      	mov	r6, r9
 800adfc:	462f      	mov	r7, r5
 800adfe:	2501      	movs	r5, #1
 800ae00:	e7c3      	b.n	800ad8a <__gethex+0x9e>
 800ae02:	2400      	movs	r4, #0
 800ae04:	1cb1      	adds	r1, r6, #2
 800ae06:	e7cc      	b.n	800ada2 <__gethex+0xb6>
 800ae08:	2401      	movs	r4, #1
 800ae0a:	e7fb      	b.n	800ae04 <__gethex+0x118>
 800ae0c:	fb03 0002 	mla	r0, r3, r2, r0
 800ae10:	e7ce      	b.n	800adb0 <__gethex+0xc4>
 800ae12:	4631      	mov	r1, r6
 800ae14:	e7de      	b.n	800add4 <__gethex+0xe8>
 800ae16:	eba6 0309 	sub.w	r3, r6, r9
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	2b07      	cmp	r3, #7
 800ae20:	dc0a      	bgt.n	800ae38 <__gethex+0x14c>
 800ae22:	9801      	ldr	r0, [sp, #4]
 800ae24:	f7fd ff74 	bl	8008d10 <_Balloc>
 800ae28:	4604      	mov	r4, r0
 800ae2a:	b940      	cbnz	r0, 800ae3e <__gethex+0x152>
 800ae2c:	4b5c      	ldr	r3, [pc, #368]	@ (800afa0 <__gethex+0x2b4>)
 800ae2e:	4602      	mov	r2, r0
 800ae30:	21e4      	movs	r1, #228	@ 0xe4
 800ae32:	485c      	ldr	r0, [pc, #368]	@ (800afa4 <__gethex+0x2b8>)
 800ae34:	f7ff fec0 	bl	800abb8 <__assert_func>
 800ae38:	3101      	adds	r1, #1
 800ae3a:	105b      	asrs	r3, r3, #1
 800ae3c:	e7ef      	b.n	800ae1e <__gethex+0x132>
 800ae3e:	f100 0a14 	add.w	sl, r0, #20
 800ae42:	2300      	movs	r3, #0
 800ae44:	4655      	mov	r5, sl
 800ae46:	469b      	mov	fp, r3
 800ae48:	45b1      	cmp	r9, r6
 800ae4a:	d337      	bcc.n	800aebc <__gethex+0x1d0>
 800ae4c:	f845 bb04 	str.w	fp, [r5], #4
 800ae50:	eba5 050a 	sub.w	r5, r5, sl
 800ae54:	10ad      	asrs	r5, r5, #2
 800ae56:	6125      	str	r5, [r4, #16]
 800ae58:	4658      	mov	r0, fp
 800ae5a:	f7fe f84b 	bl	8008ef4 <__hi0bits>
 800ae5e:	016d      	lsls	r5, r5, #5
 800ae60:	f8d8 6000 	ldr.w	r6, [r8]
 800ae64:	1a2d      	subs	r5, r5, r0
 800ae66:	42b5      	cmp	r5, r6
 800ae68:	dd54      	ble.n	800af14 <__gethex+0x228>
 800ae6a:	1bad      	subs	r5, r5, r6
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f7fe fbdf 	bl	8009632 <__any_on>
 800ae74:	4681      	mov	r9, r0
 800ae76:	b178      	cbz	r0, 800ae98 <__gethex+0x1ac>
 800ae78:	1e6b      	subs	r3, r5, #1
 800ae7a:	1159      	asrs	r1, r3, #5
 800ae7c:	f003 021f 	and.w	r2, r3, #31
 800ae80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ae84:	f04f 0901 	mov.w	r9, #1
 800ae88:	fa09 f202 	lsl.w	r2, r9, r2
 800ae8c:	420a      	tst	r2, r1
 800ae8e:	d003      	beq.n	800ae98 <__gethex+0x1ac>
 800ae90:	454b      	cmp	r3, r9
 800ae92:	dc36      	bgt.n	800af02 <__gethex+0x216>
 800ae94:	f04f 0902 	mov.w	r9, #2
 800ae98:	4629      	mov	r1, r5
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f7ff febe 	bl	800ac1c <rshift>
 800aea0:	442f      	add	r7, r5
 800aea2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aea6:	42bb      	cmp	r3, r7
 800aea8:	da42      	bge.n	800af30 <__gethex+0x244>
 800aeaa:	9801      	ldr	r0, [sp, #4]
 800aeac:	4621      	mov	r1, r4
 800aeae:	f7fd ff6f 	bl	8008d90 <_Bfree>
 800aeb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	6013      	str	r3, [r2, #0]
 800aeb8:	25a3      	movs	r5, #163	@ 0xa3
 800aeba:	e793      	b.n	800ade4 <__gethex+0xf8>
 800aebc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aec0:	2a2e      	cmp	r2, #46	@ 0x2e
 800aec2:	d012      	beq.n	800aeea <__gethex+0x1fe>
 800aec4:	2b20      	cmp	r3, #32
 800aec6:	d104      	bne.n	800aed2 <__gethex+0x1e6>
 800aec8:	f845 bb04 	str.w	fp, [r5], #4
 800aecc:	f04f 0b00 	mov.w	fp, #0
 800aed0:	465b      	mov	r3, fp
 800aed2:	7830      	ldrb	r0, [r6, #0]
 800aed4:	9303      	str	r3, [sp, #12]
 800aed6:	f7ff fef3 	bl	800acc0 <__hexdig_fun>
 800aeda:	9b03      	ldr	r3, [sp, #12]
 800aedc:	f000 000f 	and.w	r0, r0, #15
 800aee0:	4098      	lsls	r0, r3
 800aee2:	ea4b 0b00 	orr.w	fp, fp, r0
 800aee6:	3304      	adds	r3, #4
 800aee8:	e7ae      	b.n	800ae48 <__gethex+0x15c>
 800aeea:	45b1      	cmp	r9, r6
 800aeec:	d8ea      	bhi.n	800aec4 <__gethex+0x1d8>
 800aeee:	492b      	ldr	r1, [pc, #172]	@ (800af9c <__gethex+0x2b0>)
 800aef0:	9303      	str	r3, [sp, #12]
 800aef2:	2201      	movs	r2, #1
 800aef4:	4630      	mov	r0, r6
 800aef6:	f7ff fe03 	bl	800ab00 <strncmp>
 800aefa:	9b03      	ldr	r3, [sp, #12]
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d1e1      	bne.n	800aec4 <__gethex+0x1d8>
 800af00:	e7a2      	b.n	800ae48 <__gethex+0x15c>
 800af02:	1ea9      	subs	r1, r5, #2
 800af04:	4620      	mov	r0, r4
 800af06:	f7fe fb94 	bl	8009632 <__any_on>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d0c2      	beq.n	800ae94 <__gethex+0x1a8>
 800af0e:	f04f 0903 	mov.w	r9, #3
 800af12:	e7c1      	b.n	800ae98 <__gethex+0x1ac>
 800af14:	da09      	bge.n	800af2a <__gethex+0x23e>
 800af16:	1b75      	subs	r5, r6, r5
 800af18:	4621      	mov	r1, r4
 800af1a:	9801      	ldr	r0, [sp, #4]
 800af1c:	462a      	mov	r2, r5
 800af1e:	f7fe f94f 	bl	80091c0 <__lshift>
 800af22:	1b7f      	subs	r7, r7, r5
 800af24:	4604      	mov	r4, r0
 800af26:	f100 0a14 	add.w	sl, r0, #20
 800af2a:	f04f 0900 	mov.w	r9, #0
 800af2e:	e7b8      	b.n	800aea2 <__gethex+0x1b6>
 800af30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800af34:	42bd      	cmp	r5, r7
 800af36:	dd6f      	ble.n	800b018 <__gethex+0x32c>
 800af38:	1bed      	subs	r5, r5, r7
 800af3a:	42ae      	cmp	r6, r5
 800af3c:	dc34      	bgt.n	800afa8 <__gethex+0x2bc>
 800af3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af42:	2b02      	cmp	r3, #2
 800af44:	d022      	beq.n	800af8c <__gethex+0x2a0>
 800af46:	2b03      	cmp	r3, #3
 800af48:	d024      	beq.n	800af94 <__gethex+0x2a8>
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d115      	bne.n	800af7a <__gethex+0x28e>
 800af4e:	42ae      	cmp	r6, r5
 800af50:	d113      	bne.n	800af7a <__gethex+0x28e>
 800af52:	2e01      	cmp	r6, #1
 800af54:	d10b      	bne.n	800af6e <__gethex+0x282>
 800af56:	9a02      	ldr	r2, [sp, #8]
 800af58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af5c:	6013      	str	r3, [r2, #0]
 800af5e:	2301      	movs	r3, #1
 800af60:	6123      	str	r3, [r4, #16]
 800af62:	f8ca 3000 	str.w	r3, [sl]
 800af66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af68:	2562      	movs	r5, #98	@ 0x62
 800af6a:	601c      	str	r4, [r3, #0]
 800af6c:	e73a      	b.n	800ade4 <__gethex+0xf8>
 800af6e:	1e71      	subs	r1, r6, #1
 800af70:	4620      	mov	r0, r4
 800af72:	f7fe fb5e 	bl	8009632 <__any_on>
 800af76:	2800      	cmp	r0, #0
 800af78:	d1ed      	bne.n	800af56 <__gethex+0x26a>
 800af7a:	9801      	ldr	r0, [sp, #4]
 800af7c:	4621      	mov	r1, r4
 800af7e:	f7fd ff07 	bl	8008d90 <_Bfree>
 800af82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af84:	2300      	movs	r3, #0
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	2550      	movs	r5, #80	@ 0x50
 800af8a:	e72b      	b.n	800ade4 <__gethex+0xf8>
 800af8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1f3      	bne.n	800af7a <__gethex+0x28e>
 800af92:	e7e0      	b.n	800af56 <__gethex+0x26a>
 800af94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1dd      	bne.n	800af56 <__gethex+0x26a>
 800af9a:	e7ee      	b.n	800af7a <__gethex+0x28e>
 800af9c:	0800b6c8 	.word	0x0800b6c8
 800afa0:	0800b561 	.word	0x0800b561
 800afa4:	0800b876 	.word	0x0800b876
 800afa8:	1e6f      	subs	r7, r5, #1
 800afaa:	f1b9 0f00 	cmp.w	r9, #0
 800afae:	d130      	bne.n	800b012 <__gethex+0x326>
 800afb0:	b127      	cbz	r7, 800afbc <__gethex+0x2d0>
 800afb2:	4639      	mov	r1, r7
 800afb4:	4620      	mov	r0, r4
 800afb6:	f7fe fb3c 	bl	8009632 <__any_on>
 800afba:	4681      	mov	r9, r0
 800afbc:	117a      	asrs	r2, r7, #5
 800afbe:	2301      	movs	r3, #1
 800afc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800afc4:	f007 071f 	and.w	r7, r7, #31
 800afc8:	40bb      	lsls	r3, r7
 800afca:	4213      	tst	r3, r2
 800afcc:	4629      	mov	r1, r5
 800afce:	4620      	mov	r0, r4
 800afd0:	bf18      	it	ne
 800afd2:	f049 0902 	orrne.w	r9, r9, #2
 800afd6:	f7ff fe21 	bl	800ac1c <rshift>
 800afda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800afde:	1b76      	subs	r6, r6, r5
 800afe0:	2502      	movs	r5, #2
 800afe2:	f1b9 0f00 	cmp.w	r9, #0
 800afe6:	d047      	beq.n	800b078 <__gethex+0x38c>
 800afe8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800afec:	2b02      	cmp	r3, #2
 800afee:	d015      	beq.n	800b01c <__gethex+0x330>
 800aff0:	2b03      	cmp	r3, #3
 800aff2:	d017      	beq.n	800b024 <__gethex+0x338>
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d109      	bne.n	800b00c <__gethex+0x320>
 800aff8:	f019 0f02 	tst.w	r9, #2
 800affc:	d006      	beq.n	800b00c <__gethex+0x320>
 800affe:	f8da 3000 	ldr.w	r3, [sl]
 800b002:	ea49 0903 	orr.w	r9, r9, r3
 800b006:	f019 0f01 	tst.w	r9, #1
 800b00a:	d10e      	bne.n	800b02a <__gethex+0x33e>
 800b00c:	f045 0510 	orr.w	r5, r5, #16
 800b010:	e032      	b.n	800b078 <__gethex+0x38c>
 800b012:	f04f 0901 	mov.w	r9, #1
 800b016:	e7d1      	b.n	800afbc <__gethex+0x2d0>
 800b018:	2501      	movs	r5, #1
 800b01a:	e7e2      	b.n	800afe2 <__gethex+0x2f6>
 800b01c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b01e:	f1c3 0301 	rsb	r3, r3, #1
 800b022:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b026:	2b00      	cmp	r3, #0
 800b028:	d0f0      	beq.n	800b00c <__gethex+0x320>
 800b02a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b02e:	f104 0314 	add.w	r3, r4, #20
 800b032:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b036:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b03a:	f04f 0c00 	mov.w	ip, #0
 800b03e:	4618      	mov	r0, r3
 800b040:	f853 2b04 	ldr.w	r2, [r3], #4
 800b044:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b048:	d01b      	beq.n	800b082 <__gethex+0x396>
 800b04a:	3201      	adds	r2, #1
 800b04c:	6002      	str	r2, [r0, #0]
 800b04e:	2d02      	cmp	r5, #2
 800b050:	f104 0314 	add.w	r3, r4, #20
 800b054:	d13c      	bne.n	800b0d0 <__gethex+0x3e4>
 800b056:	f8d8 2000 	ldr.w	r2, [r8]
 800b05a:	3a01      	subs	r2, #1
 800b05c:	42b2      	cmp	r2, r6
 800b05e:	d109      	bne.n	800b074 <__gethex+0x388>
 800b060:	1171      	asrs	r1, r6, #5
 800b062:	2201      	movs	r2, #1
 800b064:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b068:	f006 061f 	and.w	r6, r6, #31
 800b06c:	fa02 f606 	lsl.w	r6, r2, r6
 800b070:	421e      	tst	r6, r3
 800b072:	d13a      	bne.n	800b0ea <__gethex+0x3fe>
 800b074:	f045 0520 	orr.w	r5, r5, #32
 800b078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b07a:	601c      	str	r4, [r3, #0]
 800b07c:	9b02      	ldr	r3, [sp, #8]
 800b07e:	601f      	str	r7, [r3, #0]
 800b080:	e6b0      	b.n	800ade4 <__gethex+0xf8>
 800b082:	4299      	cmp	r1, r3
 800b084:	f843 cc04 	str.w	ip, [r3, #-4]
 800b088:	d8d9      	bhi.n	800b03e <__gethex+0x352>
 800b08a:	68a3      	ldr	r3, [r4, #8]
 800b08c:	459b      	cmp	fp, r3
 800b08e:	db17      	blt.n	800b0c0 <__gethex+0x3d4>
 800b090:	6861      	ldr	r1, [r4, #4]
 800b092:	9801      	ldr	r0, [sp, #4]
 800b094:	3101      	adds	r1, #1
 800b096:	f7fd fe3b 	bl	8008d10 <_Balloc>
 800b09a:	4681      	mov	r9, r0
 800b09c:	b918      	cbnz	r0, 800b0a6 <__gethex+0x3ba>
 800b09e:	4b1a      	ldr	r3, [pc, #104]	@ (800b108 <__gethex+0x41c>)
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	2184      	movs	r1, #132	@ 0x84
 800b0a4:	e6c5      	b.n	800ae32 <__gethex+0x146>
 800b0a6:	6922      	ldr	r2, [r4, #16]
 800b0a8:	3202      	adds	r2, #2
 800b0aa:	f104 010c 	add.w	r1, r4, #12
 800b0ae:	0092      	lsls	r2, r2, #2
 800b0b0:	300c      	adds	r0, #12
 800b0b2:	f7ff fd69 	bl	800ab88 <memcpy>
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	9801      	ldr	r0, [sp, #4]
 800b0ba:	f7fd fe69 	bl	8008d90 <_Bfree>
 800b0be:	464c      	mov	r4, r9
 800b0c0:	6923      	ldr	r3, [r4, #16]
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0c8:	6122      	str	r2, [r4, #16]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	615a      	str	r2, [r3, #20]
 800b0ce:	e7be      	b.n	800b04e <__gethex+0x362>
 800b0d0:	6922      	ldr	r2, [r4, #16]
 800b0d2:	455a      	cmp	r2, fp
 800b0d4:	dd0b      	ble.n	800b0ee <__gethex+0x402>
 800b0d6:	2101      	movs	r1, #1
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f7ff fd9f 	bl	800ac1c <rshift>
 800b0de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0e2:	3701      	adds	r7, #1
 800b0e4:	42bb      	cmp	r3, r7
 800b0e6:	f6ff aee0 	blt.w	800aeaa <__gethex+0x1be>
 800b0ea:	2501      	movs	r5, #1
 800b0ec:	e7c2      	b.n	800b074 <__gethex+0x388>
 800b0ee:	f016 061f 	ands.w	r6, r6, #31
 800b0f2:	d0fa      	beq.n	800b0ea <__gethex+0x3fe>
 800b0f4:	4453      	add	r3, sl
 800b0f6:	f1c6 0620 	rsb	r6, r6, #32
 800b0fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b0fe:	f7fd fef9 	bl	8008ef4 <__hi0bits>
 800b102:	42b0      	cmp	r0, r6
 800b104:	dbe7      	blt.n	800b0d6 <__gethex+0x3ea>
 800b106:	e7f0      	b.n	800b0ea <__gethex+0x3fe>
 800b108:	0800b561 	.word	0x0800b561

0800b10c <L_shift>:
 800b10c:	f1c2 0208 	rsb	r2, r2, #8
 800b110:	0092      	lsls	r2, r2, #2
 800b112:	b570      	push	{r4, r5, r6, lr}
 800b114:	f1c2 0620 	rsb	r6, r2, #32
 800b118:	6843      	ldr	r3, [r0, #4]
 800b11a:	6804      	ldr	r4, [r0, #0]
 800b11c:	fa03 f506 	lsl.w	r5, r3, r6
 800b120:	432c      	orrs	r4, r5
 800b122:	40d3      	lsrs	r3, r2
 800b124:	6004      	str	r4, [r0, #0]
 800b126:	f840 3f04 	str.w	r3, [r0, #4]!
 800b12a:	4288      	cmp	r0, r1
 800b12c:	d3f4      	bcc.n	800b118 <L_shift+0xc>
 800b12e:	bd70      	pop	{r4, r5, r6, pc}

0800b130 <__match>:
 800b130:	b530      	push	{r4, r5, lr}
 800b132:	6803      	ldr	r3, [r0, #0]
 800b134:	3301      	adds	r3, #1
 800b136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b13a:	b914      	cbnz	r4, 800b142 <__match+0x12>
 800b13c:	6003      	str	r3, [r0, #0]
 800b13e:	2001      	movs	r0, #1
 800b140:	bd30      	pop	{r4, r5, pc}
 800b142:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b146:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b14a:	2d19      	cmp	r5, #25
 800b14c:	bf98      	it	ls
 800b14e:	3220      	addls	r2, #32
 800b150:	42a2      	cmp	r2, r4
 800b152:	d0f0      	beq.n	800b136 <__match+0x6>
 800b154:	2000      	movs	r0, #0
 800b156:	e7f3      	b.n	800b140 <__match+0x10>

0800b158 <__hexnan>:
 800b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	680b      	ldr	r3, [r1, #0]
 800b15e:	6801      	ldr	r1, [r0, #0]
 800b160:	115e      	asrs	r6, r3, #5
 800b162:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b166:	f013 031f 	ands.w	r3, r3, #31
 800b16a:	b087      	sub	sp, #28
 800b16c:	bf18      	it	ne
 800b16e:	3604      	addne	r6, #4
 800b170:	2500      	movs	r5, #0
 800b172:	1f37      	subs	r7, r6, #4
 800b174:	4682      	mov	sl, r0
 800b176:	4690      	mov	r8, r2
 800b178:	9301      	str	r3, [sp, #4]
 800b17a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b17e:	46b9      	mov	r9, r7
 800b180:	463c      	mov	r4, r7
 800b182:	9502      	str	r5, [sp, #8]
 800b184:	46ab      	mov	fp, r5
 800b186:	784a      	ldrb	r2, [r1, #1]
 800b188:	1c4b      	adds	r3, r1, #1
 800b18a:	9303      	str	r3, [sp, #12]
 800b18c:	b342      	cbz	r2, 800b1e0 <__hexnan+0x88>
 800b18e:	4610      	mov	r0, r2
 800b190:	9105      	str	r1, [sp, #20]
 800b192:	9204      	str	r2, [sp, #16]
 800b194:	f7ff fd94 	bl	800acc0 <__hexdig_fun>
 800b198:	2800      	cmp	r0, #0
 800b19a:	d151      	bne.n	800b240 <__hexnan+0xe8>
 800b19c:	9a04      	ldr	r2, [sp, #16]
 800b19e:	9905      	ldr	r1, [sp, #20]
 800b1a0:	2a20      	cmp	r2, #32
 800b1a2:	d818      	bhi.n	800b1d6 <__hexnan+0x7e>
 800b1a4:	9b02      	ldr	r3, [sp, #8]
 800b1a6:	459b      	cmp	fp, r3
 800b1a8:	dd13      	ble.n	800b1d2 <__hexnan+0x7a>
 800b1aa:	454c      	cmp	r4, r9
 800b1ac:	d206      	bcs.n	800b1bc <__hexnan+0x64>
 800b1ae:	2d07      	cmp	r5, #7
 800b1b0:	dc04      	bgt.n	800b1bc <__hexnan+0x64>
 800b1b2:	462a      	mov	r2, r5
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f7ff ffa8 	bl	800b10c <L_shift>
 800b1bc:	4544      	cmp	r4, r8
 800b1be:	d952      	bls.n	800b266 <__hexnan+0x10e>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	f1a4 0904 	sub.w	r9, r4, #4
 800b1c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1ca:	f8cd b008 	str.w	fp, [sp, #8]
 800b1ce:	464c      	mov	r4, r9
 800b1d0:	461d      	mov	r5, r3
 800b1d2:	9903      	ldr	r1, [sp, #12]
 800b1d4:	e7d7      	b.n	800b186 <__hexnan+0x2e>
 800b1d6:	2a29      	cmp	r2, #41	@ 0x29
 800b1d8:	d157      	bne.n	800b28a <__hexnan+0x132>
 800b1da:	3102      	adds	r1, #2
 800b1dc:	f8ca 1000 	str.w	r1, [sl]
 800b1e0:	f1bb 0f00 	cmp.w	fp, #0
 800b1e4:	d051      	beq.n	800b28a <__hexnan+0x132>
 800b1e6:	454c      	cmp	r4, r9
 800b1e8:	d206      	bcs.n	800b1f8 <__hexnan+0xa0>
 800b1ea:	2d07      	cmp	r5, #7
 800b1ec:	dc04      	bgt.n	800b1f8 <__hexnan+0xa0>
 800b1ee:	462a      	mov	r2, r5
 800b1f0:	4649      	mov	r1, r9
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f7ff ff8a 	bl	800b10c <L_shift>
 800b1f8:	4544      	cmp	r4, r8
 800b1fa:	d936      	bls.n	800b26a <__hexnan+0x112>
 800b1fc:	f1a8 0204 	sub.w	r2, r8, #4
 800b200:	4623      	mov	r3, r4
 800b202:	f853 1b04 	ldr.w	r1, [r3], #4
 800b206:	f842 1f04 	str.w	r1, [r2, #4]!
 800b20a:	429f      	cmp	r7, r3
 800b20c:	d2f9      	bcs.n	800b202 <__hexnan+0xaa>
 800b20e:	1b3b      	subs	r3, r7, r4
 800b210:	f023 0303 	bic.w	r3, r3, #3
 800b214:	3304      	adds	r3, #4
 800b216:	3401      	adds	r4, #1
 800b218:	3e03      	subs	r6, #3
 800b21a:	42b4      	cmp	r4, r6
 800b21c:	bf88      	it	hi
 800b21e:	2304      	movhi	r3, #4
 800b220:	4443      	add	r3, r8
 800b222:	2200      	movs	r2, #0
 800b224:	f843 2b04 	str.w	r2, [r3], #4
 800b228:	429f      	cmp	r7, r3
 800b22a:	d2fb      	bcs.n	800b224 <__hexnan+0xcc>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	b91b      	cbnz	r3, 800b238 <__hexnan+0xe0>
 800b230:	4547      	cmp	r7, r8
 800b232:	d128      	bne.n	800b286 <__hexnan+0x12e>
 800b234:	2301      	movs	r3, #1
 800b236:	603b      	str	r3, [r7, #0]
 800b238:	2005      	movs	r0, #5
 800b23a:	b007      	add	sp, #28
 800b23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b240:	3501      	adds	r5, #1
 800b242:	2d08      	cmp	r5, #8
 800b244:	f10b 0b01 	add.w	fp, fp, #1
 800b248:	dd06      	ble.n	800b258 <__hexnan+0x100>
 800b24a:	4544      	cmp	r4, r8
 800b24c:	d9c1      	bls.n	800b1d2 <__hexnan+0x7a>
 800b24e:	2300      	movs	r3, #0
 800b250:	f844 3c04 	str.w	r3, [r4, #-4]
 800b254:	2501      	movs	r5, #1
 800b256:	3c04      	subs	r4, #4
 800b258:	6822      	ldr	r2, [r4, #0]
 800b25a:	f000 000f 	and.w	r0, r0, #15
 800b25e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b262:	6020      	str	r0, [r4, #0]
 800b264:	e7b5      	b.n	800b1d2 <__hexnan+0x7a>
 800b266:	2508      	movs	r5, #8
 800b268:	e7b3      	b.n	800b1d2 <__hexnan+0x7a>
 800b26a:	9b01      	ldr	r3, [sp, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d0dd      	beq.n	800b22c <__hexnan+0xd4>
 800b270:	f1c3 0320 	rsb	r3, r3, #32
 800b274:	f04f 32ff 	mov.w	r2, #4294967295
 800b278:	40da      	lsrs	r2, r3
 800b27a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b27e:	4013      	ands	r3, r2
 800b280:	f846 3c04 	str.w	r3, [r6, #-4]
 800b284:	e7d2      	b.n	800b22c <__hexnan+0xd4>
 800b286:	3f04      	subs	r7, #4
 800b288:	e7d0      	b.n	800b22c <__hexnan+0xd4>
 800b28a:	2004      	movs	r0, #4
 800b28c:	e7d5      	b.n	800b23a <__hexnan+0xe2>

0800b28e <__ascii_mbtowc>:
 800b28e:	b082      	sub	sp, #8
 800b290:	b901      	cbnz	r1, 800b294 <__ascii_mbtowc+0x6>
 800b292:	a901      	add	r1, sp, #4
 800b294:	b142      	cbz	r2, 800b2a8 <__ascii_mbtowc+0x1a>
 800b296:	b14b      	cbz	r3, 800b2ac <__ascii_mbtowc+0x1e>
 800b298:	7813      	ldrb	r3, [r2, #0]
 800b29a:	600b      	str	r3, [r1, #0]
 800b29c:	7812      	ldrb	r2, [r2, #0]
 800b29e:	1e10      	subs	r0, r2, #0
 800b2a0:	bf18      	it	ne
 800b2a2:	2001      	movne	r0, #1
 800b2a4:	b002      	add	sp, #8
 800b2a6:	4770      	bx	lr
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	e7fb      	b.n	800b2a4 <__ascii_mbtowc+0x16>
 800b2ac:	f06f 0001 	mvn.w	r0, #1
 800b2b0:	e7f8      	b.n	800b2a4 <__ascii_mbtowc+0x16>

0800b2b2 <_realloc_r>:
 800b2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b6:	4680      	mov	r8, r0
 800b2b8:	4615      	mov	r5, r2
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	b921      	cbnz	r1, 800b2c8 <_realloc_r+0x16>
 800b2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	f7fd bc98 	b.w	8008bf8 <_malloc_r>
 800b2c8:	b92a      	cbnz	r2, 800b2d6 <_realloc_r+0x24>
 800b2ca:	f7fd fc21 	bl	8008b10 <_free_r>
 800b2ce:	2400      	movs	r4, #0
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d6:	f000 f840 	bl	800b35a <_malloc_usable_size_r>
 800b2da:	4285      	cmp	r5, r0
 800b2dc:	4606      	mov	r6, r0
 800b2de:	d802      	bhi.n	800b2e6 <_realloc_r+0x34>
 800b2e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b2e4:	d8f4      	bhi.n	800b2d0 <_realloc_r+0x1e>
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	4640      	mov	r0, r8
 800b2ea:	f7fd fc85 	bl	8008bf8 <_malloc_r>
 800b2ee:	4607      	mov	r7, r0
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d0ec      	beq.n	800b2ce <_realloc_r+0x1c>
 800b2f4:	42b5      	cmp	r5, r6
 800b2f6:	462a      	mov	r2, r5
 800b2f8:	4621      	mov	r1, r4
 800b2fa:	bf28      	it	cs
 800b2fc:	4632      	movcs	r2, r6
 800b2fe:	f7ff fc43 	bl	800ab88 <memcpy>
 800b302:	4621      	mov	r1, r4
 800b304:	4640      	mov	r0, r8
 800b306:	f7fd fc03 	bl	8008b10 <_free_r>
 800b30a:	463c      	mov	r4, r7
 800b30c:	e7e0      	b.n	800b2d0 <_realloc_r+0x1e>

0800b30e <__ascii_wctomb>:
 800b30e:	4603      	mov	r3, r0
 800b310:	4608      	mov	r0, r1
 800b312:	b141      	cbz	r1, 800b326 <__ascii_wctomb+0x18>
 800b314:	2aff      	cmp	r2, #255	@ 0xff
 800b316:	d904      	bls.n	800b322 <__ascii_wctomb+0x14>
 800b318:	228a      	movs	r2, #138	@ 0x8a
 800b31a:	601a      	str	r2, [r3, #0]
 800b31c:	f04f 30ff 	mov.w	r0, #4294967295
 800b320:	4770      	bx	lr
 800b322:	700a      	strb	r2, [r1, #0]
 800b324:	2001      	movs	r0, #1
 800b326:	4770      	bx	lr

0800b328 <fiprintf>:
 800b328:	b40e      	push	{r1, r2, r3}
 800b32a:	b503      	push	{r0, r1, lr}
 800b32c:	4601      	mov	r1, r0
 800b32e:	ab03      	add	r3, sp, #12
 800b330:	4805      	ldr	r0, [pc, #20]	@ (800b348 <fiprintf+0x20>)
 800b332:	f853 2b04 	ldr.w	r2, [r3], #4
 800b336:	6800      	ldr	r0, [r0, #0]
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	f7ff f9a1 	bl	800a680 <_vfiprintf_r>
 800b33e:	b002      	add	sp, #8
 800b340:	f85d eb04 	ldr.w	lr, [sp], #4
 800b344:	b003      	add	sp, #12
 800b346:	4770      	bx	lr
 800b348:	2000002c 	.word	0x2000002c

0800b34c <abort>:
 800b34c:	b508      	push	{r3, lr}
 800b34e:	2006      	movs	r0, #6
 800b350:	f000 f834 	bl	800b3bc <raise>
 800b354:	2001      	movs	r0, #1
 800b356:	f7f7 fbb3 	bl	8002ac0 <_exit>

0800b35a <_malloc_usable_size_r>:
 800b35a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b35e:	1f18      	subs	r0, r3, #4
 800b360:	2b00      	cmp	r3, #0
 800b362:	bfbc      	itt	lt
 800b364:	580b      	ldrlt	r3, [r1, r0]
 800b366:	18c0      	addlt	r0, r0, r3
 800b368:	4770      	bx	lr

0800b36a <_raise_r>:
 800b36a:	291f      	cmp	r1, #31
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4605      	mov	r5, r0
 800b370:	460c      	mov	r4, r1
 800b372:	d904      	bls.n	800b37e <_raise_r+0x14>
 800b374:	2316      	movs	r3, #22
 800b376:	6003      	str	r3, [r0, #0]
 800b378:	f04f 30ff 	mov.w	r0, #4294967295
 800b37c:	bd38      	pop	{r3, r4, r5, pc}
 800b37e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b380:	b112      	cbz	r2, 800b388 <_raise_r+0x1e>
 800b382:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b386:	b94b      	cbnz	r3, 800b39c <_raise_r+0x32>
 800b388:	4628      	mov	r0, r5
 800b38a:	f000 f831 	bl	800b3f0 <_getpid_r>
 800b38e:	4622      	mov	r2, r4
 800b390:	4601      	mov	r1, r0
 800b392:	4628      	mov	r0, r5
 800b394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b398:	f000 b818 	b.w	800b3cc <_kill_r>
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d00a      	beq.n	800b3b6 <_raise_r+0x4c>
 800b3a0:	1c59      	adds	r1, r3, #1
 800b3a2:	d103      	bne.n	800b3ac <_raise_r+0x42>
 800b3a4:	2316      	movs	r3, #22
 800b3a6:	6003      	str	r3, [r0, #0]
 800b3a8:	2001      	movs	r0, #1
 800b3aa:	e7e7      	b.n	800b37c <_raise_r+0x12>
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	4798      	blx	r3
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	e7e0      	b.n	800b37c <_raise_r+0x12>
	...

0800b3bc <raise>:
 800b3bc:	4b02      	ldr	r3, [pc, #8]	@ (800b3c8 <raise+0xc>)
 800b3be:	4601      	mov	r1, r0
 800b3c0:	6818      	ldr	r0, [r3, #0]
 800b3c2:	f7ff bfd2 	b.w	800b36a <_raise_r>
 800b3c6:	bf00      	nop
 800b3c8:	2000002c 	.word	0x2000002c

0800b3cc <_kill_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	4d07      	ldr	r5, [pc, #28]	@ (800b3ec <_kill_r+0x20>)
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	4608      	mov	r0, r1
 800b3d6:	4611      	mov	r1, r2
 800b3d8:	602b      	str	r3, [r5, #0]
 800b3da:	f7f7 fb61 	bl	8002aa0 <_kill>
 800b3de:	1c43      	adds	r3, r0, #1
 800b3e0:	d102      	bne.n	800b3e8 <_kill_r+0x1c>
 800b3e2:	682b      	ldr	r3, [r5, #0]
 800b3e4:	b103      	cbz	r3, 800b3e8 <_kill_r+0x1c>
 800b3e6:	6023      	str	r3, [r4, #0]
 800b3e8:	bd38      	pop	{r3, r4, r5, pc}
 800b3ea:	bf00      	nop
 800b3ec:	200006ac 	.word	0x200006ac

0800b3f0 <_getpid_r>:
 800b3f0:	f7f7 bb4e 	b.w	8002a90 <_getpid>

0800b3f4 <_init>:
 800b3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f6:	bf00      	nop
 800b3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3fa:	bc08      	pop	{r3}
 800b3fc:	469e      	mov	lr, r3
 800b3fe:	4770      	bx	lr

0800b400 <_fini>:
 800b400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b402:	bf00      	nop
 800b404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b406:	bc08      	pop	{r3}
 800b408:	469e      	mov	lr, r3
 800b40a:	4770      	bx	lr
