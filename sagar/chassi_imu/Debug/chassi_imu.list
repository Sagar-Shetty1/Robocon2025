
chassi_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af64  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800b138  0800b138  0000c138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b658  0800b658  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b658  0800b658  0000c658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b660  0800b660  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b660  0800b660  0000c660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b664  0800b664  0000c664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b668  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200001e8  0800b850  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  0800b850  0000d598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c11  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d9  00000000  00000000  0001ee29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00021508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d68  00000000  00000000  00022600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a81  00000000  00000000  00023368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158ec  00000000  00000000  00046de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6760  00000000  00000000  0005c6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132e35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005df8  00000000  00000000  00132e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00138c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b11c 	.word	0x0800b11c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800b11c 	.word	0x0800b11c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <BNO055_Read>:
    uint8_t buf[2] = {reg, data};
    return HAL_I2C_Master_Transmit(hi2c, BNO055_I2C_ADDR, buf, 2, HAL_MAX_DELAY);
}

static HAL_StatusTypeDef BNO055_Read(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *data, uint8_t len)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af02      	add	r7, sp, #8
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	461a      	mov	r2, r3
 8001030:	460b      	mov	r3, r1
 8001032:	72fb      	strb	r3, [r7, #11]
 8001034:	4613      	mov	r3, r2
 8001036:	72bb      	strb	r3, [r7, #10]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Master_Transmit(hi2c, BNO055_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
 8001038:	f107 020b 	add.w	r2, r7, #11
 800103c:	f04f 33ff 	mov.w	r3, #4294967295
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2150      	movs	r1, #80	@ 0x50
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f002 f8fe 	bl	8003248 <HAL_I2C_Master_Transmit>
 800104c:	4603      	mov	r3, r0
 800104e:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <BNO055_Read+0x36>
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	e00a      	b.n	8001070 <BNO055_Read+0x4c>

    return HAL_I2C_Master_Receive(hi2c, BNO055_I2C_ADDR, data, len, HAL_MAX_DELAY);
 800105a:	7abb      	ldrb	r3, [r7, #10]
 800105c:	b29b      	uxth	r3, r3
 800105e:	f04f 32ff 	mov.w	r2, #4294967295
 8001062:	9200      	str	r2, [sp, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	2150      	movs	r1, #80	@ 0x50
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f002 f9eb 	bl	8003444 <HAL_I2C_Master_Receive>
 800106e:	4603      	mov	r3, r0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <BNO055_GetAccelerometer>:

    return HAL_OK;
}

HAL_StatusTypeDef BNO055_GetAccelerometer(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];
    HAL_StatusTypeDef status;

    status = BNO055_Read(hi2c, BNO055_ACCEL_DATA_X_LSB, buf, 6);
 8001082:	f107 0208 	add.w	r2, r7, #8
 8001086:	2306      	movs	r3, #6
 8001088:	2108      	movs	r1, #8
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffca 	bl	8001024 <BNO055_Read>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <BNO055_GetAccelerometer+0x26>
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	e036      	b.n	800110c <BNO055_GetAccelerometer+0x94>

    // Convert to m/s^2 (BNO055 accelerometer LSB = 1/100 m/s^2)
    data->accel_x = (int16_t)((buf[1] << 8) | buf[0]) / 100.0f;
 800109e:	7a7b      	ldrb	r3, [r7, #9]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7a3b      	ldrb	r3, [r7, #8]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b4:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001114 <BNO055_GetAccelerometer+0x9c>
 80010b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	edc3 7a00 	vstr	s15, [r3]
    data->accel_y = (int16_t)((buf[3] << 8) | buf[2]) / 100.0f;
 80010c2:	7afb      	ldrb	r3, [r7, #11]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7abb      	ldrb	r3, [r7, #10]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d8:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001114 <BNO055_GetAccelerometer+0x9c>
 80010dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	edc3 7a01 	vstr	s15, [r3, #4]
    data->accel_z = (int16_t)((buf[5] << 8) | buf[4]) / 100.0f;
 80010e6:	7b7b      	ldrb	r3, [r7, #13]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010fc:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001114 <BNO055_GetAccelerometer+0x9c>
 8001100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	edc3 7a02 	vstr	s15, [r3, #8]

    return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	42c80000 	.word	0x42c80000

08001118 <BNO055_GetGyroscope>:

HAL_StatusTypeDef BNO055_GetGyroscope(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];
    HAL_StatusTypeDef status;

    status = BNO055_Read(hi2c, BNO055_GYRO_DATA_X_LSB, buf, 6);
 8001122:	f107 0208 	add.w	r2, r7, #8
 8001126:	2306      	movs	r3, #6
 8001128:	2114      	movs	r1, #20
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ff7a 	bl	8001024 <BNO055_Read>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <BNO055_GetGyroscope+0x26>
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	e036      	b.n	80011ac <BNO055_GetGyroscope+0x94>

    // Convert to degrees/s (BNO055 gyroscope LSB = 1/16 degree/s)
    data->gyro_x = (int16_t)((buf[1] << 8) | buf[0]) / 16.0f;
 800113e:	7a7b      	ldrb	r3, [r7, #9]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21a      	sxth	r2, r3
 8001144:	7a3b      	ldrb	r3, [r7, #8]
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b21b      	sxth	r3, r3
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001154:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
    data->gyro_y = (int16_t)((buf[3] << 8) | buf[2]) / 16.0f;
 8001162:	7afb      	ldrb	r3, [r7, #11]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	7abb      	ldrb	r3, [r7, #10]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001178:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800117c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	edc3 7a04 	vstr	s15, [r3, #16]
    data->gyro_z = (int16_t)((buf[5] << 8) | buf[4]) / 16.0f;
 8001186:	7b7b      	ldrb	r3, [r7, #13]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	7b3b      	ldrb	r3, [r7, #12]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21b      	sxth	r3, r3
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80011a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	edc3 7a05 	vstr	s15, [r3, #20]

    return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <BNO055_GetEulerAngles>:

HAL_StatusTypeDef BNO055_GetEulerAngles(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];
    HAL_StatusTypeDef status;

    status = BNO055_Read(hi2c, BNO055_EULER_H_LSB, buf, 6);
 80011be:	f107 0208 	add.w	r2, r7, #8
 80011c2:	2306      	movs	r3, #6
 80011c4:	211a      	movs	r1, #26
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff2c 	bl	8001024 <BNO055_Read>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <BNO055_GetEulerAngles+0x26>
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	e036      	b.n	8001248 <BNO055_GetEulerAngles+0x94>

    // Convert to degrees (BNO055 euler angles are in degrees * 16)
    data->euler_h = (int16_t)((buf[1] << 8) | buf[0]) / 16.0f;
 80011da:	7a7b      	ldrb	r3, [r7, #9]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21a      	sxth	r2, r3
 80011e0:	7a3b      	ldrb	r3, [r7, #8]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80011f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	edc3 7a06 	vstr	s15, [r3, #24]
    data->euler_r = (int16_t)((buf[3] << 8) | buf[2]) / 16.0f;
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7abb      	ldrb	r3, [r7, #10]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21b      	sxth	r3, r3
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001214:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	edc3 7a07 	vstr	s15, [r3, #28]
    data->euler_p = (int16_t)((buf[5] << 8) | buf[4]) / 16.0f;
 8001222:	7b7b      	ldrb	r3, [r7, #13]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7b3b      	ldrb	r3, [r7, #12]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21b      	sxth	r3, r3
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001238:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800123c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	edc3 7a08 	vstr	s15, [r3, #32]

    return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <BNO055_GetQuaternion>:

HAL_StatusTypeDef BNO055_GetQuaternion(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
    uint8_t buf[8];
    HAL_StatusTypeDef status;

    status = BNO055_Read(hi2c, BNO055_QUATERNION_DATA_W_LSB, buf, 8);
 800125a:	f107 020c 	add.w	r2, r7, #12
 800125e:	2308      	movs	r3, #8
 8001260:	2120      	movs	r1, #32
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fede 	bl	8001024 <BNO055_Read>
 8001268:	4603      	mov	r3, r0
 800126a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <BNO055_GetQuaternion+0x26>
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	e048      	b.n	8001308 <BNO055_GetQuaternion+0xb8>

    // Convert to float (BNO055 quaternion values are scaled by 2^14)
    data->quat_w = (int16_t)((buf[1] << 8) | buf[0]) / 16384.0f;
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21a      	sxth	r2, r3
 800127c:	7b3b      	ldrb	r3, [r7, #12]
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21b      	sxth	r3, r3
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001310 <BNO055_GetQuaternion+0xc0>
 8001290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    data->quat_x = (int16_t)((buf[3] << 8) | buf[2]) / 16384.0f;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	b21a      	sxth	r2, r3
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b0:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001310 <BNO055_GetQuaternion+0xc0>
 80012b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    data->quat_y = (int16_t)((buf[5] << 8) | buf[4]) / 16384.0f;
 80012be:	7c7b      	ldrb	r3, [r7, #17]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	7c3b      	ldrb	r3, [r7, #16]
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d4:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001310 <BNO055_GetQuaternion+0xc0>
 80012d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    data->quat_z = (int16_t)((buf[7] << 8) | buf[6]) / 16384.0f;
 80012e2:	7cfb      	ldrb	r3, [r7, #19]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	7cbb      	ldrb	r3, [r7, #18]
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f8:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001310 <BNO055_GetQuaternion+0xc0>
 80012fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	46800000 	.word	0x46800000

08001314 <BNO055_GetAllData>:

HAL_StatusTypeDef BNO055_GetAllData(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;

    status = BNO055_GetAccelerometer(hi2c, data);
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fea9 	bl	8001078 <BNO055_GetAccelerometer>
 8001326:	4603      	mov	r3, r0
 8001328:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <BNO055_GetAllData+0x20>
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	e021      	b.n	8001378 <BNO055_GetAllData+0x64>

    status = BNO055_GetGyroscope(hi2c, data);
 8001334:	6839      	ldr	r1, [r7, #0]
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff feee 	bl	8001118 <BNO055_GetGyroscope>
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <BNO055_GetAllData+0x36>
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	e016      	b.n	8001378 <BNO055_GetAllData+0x64>

    status = BNO055_GetEulerAngles(hi2c, data);
 800134a:	6839      	ldr	r1, [r7, #0]
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff31 	bl	80011b4 <BNO055_GetEulerAngles>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <BNO055_GetAllData+0x4c>
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	e00b      	b.n	8001378 <BNO055_GetAllData+0x64>

    status = BNO055_GetQuaternion(hi2c, data);
 8001360:	6839      	ldr	r1, [r7, #0]
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff74 	bl	8001250 <BNO055_GetQuaternion>
 8001368:	4603      	mov	r3, r0
 800136a:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <BNO055_GetAllData+0x62>
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	e000      	b.n	8001378 <BNO055_GetAllData+0x64>

    return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	69b9      	ldr	r1, [r7, #24]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	1a8a      	subs	r2, r1, r2
 800139a:	fb03 f202 	mul.w	r2, r3, r2
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1acb      	subs	r3, r1, r3
 80013a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4413      	add	r3, r2
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c0:	f001 fa16 	bl	80027f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c4:	f000 fc7a 	bl	8001cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c8:	f000 fed8 	bl	800217c <MX_GPIO_Init>
  MX_TIM2_Init();
 80013cc:	f000 fd66 	bl	8001e9c <MX_TIM2_Init>
  MX_TIM3_Init();
 80013d0:	f000 fdda 	bl	8001f88 <MX_TIM3_Init>
  MX_UART4_Init();
 80013d4:	f000 fea8 	bl	8002128 <MX_UART4_Init>
  MX_TIM5_Init();
 80013d8:	f000 fe58 	bl	800208c <MX_TIM5_Init>
  MX_TIM1_Init();
 80013dc:	f000 fd0e 	bl	8001dfc <MX_TIM1_Init>
  MX_I2C1_Init();
 80013e0:	f000 fcde 	bl	8001da0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive(&huart4, rxbuff, 64,500);
 80013e4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80013e8:	2240      	movs	r2, #64	@ 0x40
 80013ea:	4984      	ldr	r1, [pc, #528]	@ (80015fc <main+0x244>)
 80013ec:	4884      	ldr	r0, [pc, #528]	@ (8001600 <main+0x248>)
 80013ee:	f004 fafb 	bl	80059e8 <HAL_UART_Receive>



   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013f2:	2100      	movs	r1, #0
 80013f4:	4883      	ldr	r0, [pc, #524]	@ (8001604 <main+0x24c>)
 80013f6:	f003 fcbd 	bl	8004d74 <HAL_TIM_PWM_Start>
 //  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013fa:	2100      	movs	r1, #0
 80013fc:	4882      	ldr	r0, [pc, #520]	@ (8001608 <main+0x250>)
 80013fe:	f003 fcb9 	bl	8004d74 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001402:	2104      	movs	r1, #4
 8001404:	4880      	ldr	r0, [pc, #512]	@ (8001608 <main+0x250>)
 8001406:	f003 fcb5 	bl	8004d74 <HAL_TIM_PWM_Start>
	  //MAIN CODE


	  	  	HAL_StatusTypeDef status;

	  	  	status=HAL_UART_Receive(&huart4, rxbuff,64,500);
 800140a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800140e:	2240      	movs	r2, #64	@ 0x40
 8001410:	497a      	ldr	r1, [pc, #488]	@ (80015fc <main+0x244>)
 8001412:	487b      	ldr	r0, [pc, #492]	@ (8001600 <main+0x248>)
 8001414:	f004 fae8 	bl	80059e8 <HAL_UART_Receive>
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]



	  	  	if (status == HAL_OK)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d17b      	bne.n	800151a <main+0x162>

	  	   // Convert the received bytes to signed integers



	  	   lx = (rxbuff[1] & 0x80) ? (int32_t)rxbuff[1] - 256 : (int32_t)rxbuff[1];
 8001422:	4b76      	ldr	r3, [pc, #472]	@ (80015fc <main+0x244>)
 8001424:	785b      	ldrb	r3, [r3, #1]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	da04      	bge.n	8001436 <main+0x7e>
 800142c:	4b73      	ldr	r3, [pc, #460]	@ (80015fc <main+0x244>)
 800142e:	785b      	ldrb	r3, [r3, #1]
 8001430:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001434:	e001      	b.n	800143a <main+0x82>
 8001436:	4b71      	ldr	r3, [pc, #452]	@ (80015fc <main+0x244>)
 8001438:	785b      	ldrb	r3, [r3, #1]
 800143a:	4a74      	ldr	r2, [pc, #464]	@ (800160c <main+0x254>)
 800143c:	6013      	str	r3, [r2, #0]

	  	   ly = (rxbuff[2] & 0x80) ? (int32_t)rxbuff[2] - 256 : (int32_t)rxbuff[2];
 800143e:	4b6f      	ldr	r3, [pc, #444]	@ (80015fc <main+0x244>)
 8001440:	789b      	ldrb	r3, [r3, #2]
 8001442:	b25b      	sxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	da04      	bge.n	8001452 <main+0x9a>
 8001448:	4b6c      	ldr	r3, [pc, #432]	@ (80015fc <main+0x244>)
 800144a:	789b      	ldrb	r3, [r3, #2]
 800144c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001450:	e001      	b.n	8001456 <main+0x9e>
 8001452:	4b6a      	ldr	r3, [pc, #424]	@ (80015fc <main+0x244>)
 8001454:	789b      	ldrb	r3, [r3, #2]
 8001456:	4a6e      	ldr	r2, [pc, #440]	@ (8001610 <main+0x258>)
 8001458:	6013      	str	r3, [r2, #0]

	  	   rx = (rxbuff[3] & 0x80) ? (int32_t)rxbuff[3] - 256 : (int32_t)rxbuff[3];
 800145a:	4b68      	ldr	r3, [pc, #416]	@ (80015fc <main+0x244>)
 800145c:	78db      	ldrb	r3, [r3, #3]
 800145e:	b25b      	sxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	da04      	bge.n	800146e <main+0xb6>
 8001464:	4b65      	ldr	r3, [pc, #404]	@ (80015fc <main+0x244>)
 8001466:	78db      	ldrb	r3, [r3, #3]
 8001468:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800146c:	e001      	b.n	8001472 <main+0xba>
 800146e:	4b63      	ldr	r3, [pc, #396]	@ (80015fc <main+0x244>)
 8001470:	78db      	ldrb	r3, [r3, #3]
 8001472:	4a68      	ldr	r2, [pc, #416]	@ (8001614 <main+0x25c>)
 8001474:	6013      	str	r3, [r2, #0]

	  	   ry = (rxbuff[4] & 0x80) ? (int32_t)rxbuff[4] - 256 : (int32_t)rxbuff[4];
 8001476:	4b61      	ldr	r3, [pc, #388]	@ (80015fc <main+0x244>)
 8001478:	791b      	ldrb	r3, [r3, #4]
 800147a:	b25b      	sxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	da04      	bge.n	800148a <main+0xd2>
 8001480:	4b5e      	ldr	r3, [pc, #376]	@ (80015fc <main+0x244>)
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001488:	e001      	b.n	800148e <main+0xd6>
 800148a:	4b5c      	ldr	r3, [pc, #368]	@ (80015fc <main+0x244>)
 800148c:	791b      	ldrb	r3, [r3, #4]
 800148e:	4a62      	ldr	r2, [pc, #392]	@ (8001618 <main+0x260>)
 8001490:	6013      	str	r3, [r2, #0]



	  	   cro= (rxbuff[5] & 0x80) ? (int32_t)rxbuff[5] - 256 : (int32_t)rxbuff[5];
 8001492:	4b5a      	ldr	r3, [pc, #360]	@ (80015fc <main+0x244>)
 8001494:	795b      	ldrb	r3, [r3, #5]
 8001496:	b25b      	sxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	da04      	bge.n	80014a6 <main+0xee>
 800149c:	4b57      	ldr	r3, [pc, #348]	@ (80015fc <main+0x244>)
 800149e:	795b      	ldrb	r3, [r3, #5]
 80014a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014a4:	e001      	b.n	80014aa <main+0xf2>
 80014a6:	4b55      	ldr	r3, [pc, #340]	@ (80015fc <main+0x244>)
 80014a8:	795b      	ldrb	r3, [r3, #5]
 80014aa:	4a5c      	ldr	r2, [pc, #368]	@ (800161c <main+0x264>)
 80014ac:	6013      	str	r3, [r2, #0]
	  //
	  	   squ= (rxbuff[6] & 0x80) ? (int32_t)rxbuff[6] - 256 : (int32_t)rxbuff[6];
 80014ae:	4b53      	ldr	r3, [pc, #332]	@ (80015fc <main+0x244>)
 80014b0:	799b      	ldrb	r3, [r3, #6]
 80014b2:	b25b      	sxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da04      	bge.n	80014c2 <main+0x10a>
 80014b8:	4b50      	ldr	r3, [pc, #320]	@ (80015fc <main+0x244>)
 80014ba:	799b      	ldrb	r3, [r3, #6]
 80014bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014c0:	e001      	b.n	80014c6 <main+0x10e>
 80014c2:	4b4e      	ldr	r3, [pc, #312]	@ (80015fc <main+0x244>)
 80014c4:	799b      	ldrb	r3, [r3, #6]
 80014c6:	4a56      	ldr	r2, [pc, #344]	@ (8001620 <main+0x268>)
 80014c8:	6013      	str	r3, [r2, #0]



	  	   // Print the received values

	  	   printf("Received Integers:\n");
 80014ca:	4856      	ldr	r0, [pc, #344]	@ (8001624 <main+0x26c>)
 80014cc:	f006 f9e0 	bl	8007890 <puts>

	  	   printf("lx: %ld ", lx);
 80014d0:	4b4e      	ldr	r3, [pc, #312]	@ (800160c <main+0x254>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4854      	ldr	r0, [pc, #336]	@ (8001628 <main+0x270>)
 80014d8:	f006 f972 	bl	80077c0 <iprintf>

	  	   printf("ly: %ld ", ly);
 80014dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001610 <main+0x258>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4852      	ldr	r0, [pc, #328]	@ (800162c <main+0x274>)
 80014e4:	f006 f96c 	bl	80077c0 <iprintf>

	  	   printf("rx: %ld ", rx);
 80014e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001614 <main+0x25c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4850      	ldr	r0, [pc, #320]	@ (8001630 <main+0x278>)
 80014f0:	f006 f966 	bl	80077c0 <iprintf>

	  	   printf("ry: %ld \n", ry);
 80014f4:	4b48      	ldr	r3, [pc, #288]	@ (8001618 <main+0x260>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	484e      	ldr	r0, [pc, #312]	@ (8001634 <main+0x27c>)
 80014fc:	f006 f960 	bl	80077c0 <iprintf>


	  //
	  	   printf("cro: %ld\n", cro);
 8001500:	4b46      	ldr	r3, [pc, #280]	@ (800161c <main+0x264>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	484c      	ldr	r0, [pc, #304]	@ (8001638 <main+0x280>)
 8001508:	f006 f95a 	bl	80077c0 <iprintf>
	  //
	  	   printf("squ: %ld\n", squ);
 800150c:	4b44      	ldr	r3, [pc, #272]	@ (8001620 <main+0x268>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	484a      	ldr	r0, [pc, #296]	@ (800163c <main+0x284>)
 8001514:	f006 f954 	bl	80077c0 <iprintf>
 8001518:	e02f      	b.n	800157a <main+0x1c2>
	  	   }

	  	   else
	  	   {

	  	   ry = 0;
 800151a:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <main+0x260>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

	  	   rx = 0;
 8001520:	4b3c      	ldr	r3, [pc, #240]	@ (8001614 <main+0x25c>)
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]

	  	   lx = 0;
 8001526:	4b39      	ldr	r3, [pc, #228]	@ (800160c <main+0x254>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

	  	   ly = 0;
 800152c:	4b38      	ldr	r3, [pc, #224]	@ (8001610 <main+0x258>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]

	  	   cro = 0;
 8001532:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <main+0x264>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

	  	   squ = 0;
 8001538:	4b39      	ldr	r3, [pc, #228]	@ (8001620 <main+0x268>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

	  	   tri = 0;
 800153e:	4b40      	ldr	r3, [pc, #256]	@ (8001640 <main+0x288>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

	  	   cir = 0;
 8001544:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <main+0x28c>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]

	  	   up = 0;
 800154a:	4b3f      	ldr	r3, [pc, #252]	@ (8001648 <main+0x290>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

	  	   down = 0;
 8001550:	4b3e      	ldr	r3, [pc, #248]	@ (800164c <main+0x294>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]

	  	   left = 0;
 8001556:	4b3e      	ldr	r3, [pc, #248]	@ (8001650 <main+0x298>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

	  	   right = 0;
 800155c:	4b3d      	ldr	r3, [pc, #244]	@ (8001654 <main+0x29c>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

	  	   ll1=0;
 8001562:	4b3d      	ldr	r3, [pc, #244]	@ (8001658 <main+0x2a0>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]

	  	   ll2=0;
 8001568:	4b3c      	ldr	r3, [pc, #240]	@ (800165c <main+0x2a4>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]

	  	   rr1=0;
 800156e:	4b3c      	ldr	r3, [pc, #240]	@ (8001660 <main+0x2a8>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

	  	   rr2=0;
 8001574:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <main+0x2ac>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]




	  	  	//stop
	  	  	if(ly>=Buff2 && ly<=Buff1 && lx>=Buff2 && lx<=Buff1 && rx>=Buff2 && rx<=Buff1){
 800157a:	4b25      	ldr	r3, [pc, #148]	@ (8001610 <main+0x258>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4b3a      	ldr	r3, [pc, #232]	@ (8001668 <main+0x2b0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	db76      	blt.n	8001674 <main+0x2bc>
 8001586:	4b22      	ldr	r3, [pc, #136]	@ (8001610 <main+0x258>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4b38      	ldr	r3, [pc, #224]	@ (800166c <main+0x2b4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	dc70      	bgt.n	8001674 <main+0x2bc>
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <main+0x254>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4b34      	ldr	r3, [pc, #208]	@ (8001668 <main+0x2b0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	db6a      	blt.n	8001674 <main+0x2bc>
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <main+0x254>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b32      	ldr	r3, [pc, #200]	@ (800166c <main+0x2b4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dc64      	bgt.n	8001674 <main+0x2bc>
 80015aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <main+0x25c>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001668 <main+0x2b0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	db5e      	blt.n	8001674 <main+0x2bc>
 80015b6:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <main+0x25c>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4b2c      	ldr	r3, [pc, #176]	@ (800166c <main+0x2b4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	dc58      	bgt.n	8001674 <main+0x2bc>

	  			//motor 1
	  		   HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2104      	movs	r1, #4
 80015c6:	482a      	ldr	r0, [pc, #168]	@ (8001670 <main+0x2b8>)
 80015c8:	f001 fce0 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 80015cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <main+0x250>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2200      	movs	r2, #0
 80015d2:	639a      	str	r2, [r3, #56]	@ 0x38

	  		   //motor 2
	  		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2108      	movs	r1, #8
 80015d8:	4825      	ldr	r0, [pc, #148]	@ (8001670 <main+0x2b8>)
 80015da:	f001 fcd7 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <main+0x24c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2200      	movs	r2, #0
 80015e4:	635a      	str	r2, [r3, #52]	@ 0x34

	  		   //motor 3
	  		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2102      	movs	r1, #2
 80015ea:	4821      	ldr	r0, [pc, #132]	@ (8001670 <main+0x2b8>)
 80015ec:	f001 fcce 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 80015f0:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <main+0x250>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80015f8:	e2d4      	b.n	8001ba4 <main+0x7ec>
 80015fa:	bf00      	nop
 80015fc:	20000204 	.word	0x20000204
 8001600:	200003c8 	.word	0x200003c8
 8001604:	200002f0 	.word	0x200002f0
 8001608:	20000338 	.word	0x20000338
 800160c:	20000214 	.word	0x20000214
 8001610:	20000218 	.word	0x20000218
 8001614:	2000021c 	.word	0x2000021c
 8001618:	20000220 	.word	0x20000220
 800161c:	20000224 	.word	0x20000224
 8001620:	20000228 	.word	0x20000228
 8001624:	0800b138 	.word	0x0800b138
 8001628:	0800b14c 	.word	0x0800b14c
 800162c:	0800b158 	.word	0x0800b158
 8001630:	0800b164 	.word	0x0800b164
 8001634:	0800b170 	.word	0x0800b170
 8001638:	0800b17c 	.word	0x0800b17c
 800163c:	0800b188 	.word	0x0800b188
 8001640:	2000022c 	.word	0x2000022c
 8001644:	20000230 	.word	0x20000230
 8001648:	20000234 	.word	0x20000234
 800164c:	20000238 	.word	0x20000238
 8001650:	2000023c 	.word	0x2000023c
 8001654:	20000240 	.word	0x20000240
 8001658:	20000244 	.word	0x20000244
 800165c:	2000024c 	.word	0x2000024c
 8001660:	20000248 	.word	0x20000248
 8001664:	20000250 	.word	0x20000250
 8001668:	20000008 	.word	0x20000008
 800166c:	20000004 	.word	0x20000004
 8001670:	40020800 	.word	0x40020800

	  	  	}

	  	  	//forward
	  	  	else if( ly>=Buff1 && (lx<=BuffP && lx>=BuffN) ){
 8001674:	4b96      	ldr	r3, [pc, #600]	@ (80018d0 <main+0x518>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b96      	ldr	r3, [pc, #600]	@ (80018d4 <main+0x51c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	db34      	blt.n	80016ea <main+0x332>
 8001680:	4b95      	ldr	r3, [pc, #596]	@ (80018d8 <main+0x520>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b95      	ldr	r3, [pc, #596]	@ (80018dc <main+0x524>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	dc2e      	bgt.n	80016ea <main+0x332>
 800168c:	4b92      	ldr	r3, [pc, #584]	@ (80018d8 <main+0x520>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b93      	ldr	r3, [pc, #588]	@ (80018e0 <main+0x528>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	db28      	blt.n	80016ea <main+0x332>

	  //	  		long map(long x, long in_min, long in_max, long out_min, long out_max)
	  //	  		{
	  //	  		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	  //	  		}
	  	  		dutycycle=map(ly,Buff1,127,0,fast);
 8001698:	4b8d      	ldr	r3, [pc, #564]	@ (80018d0 <main+0x518>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	4b8d      	ldr	r3, [pc, #564]	@ (80018d4 <main+0x51c>)
 800169e:	6819      	ldr	r1, [r3, #0]
 80016a0:	4b90      	ldr	r3, [pc, #576]	@ (80018e4 <main+0x52c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2300      	movs	r3, #0
 80016a8:	227f      	movs	r2, #127	@ 0x7f
 80016aa:	f7ff fe69 	bl	8001380 <map>
 80016ae:	4603      	mov	r3, r0
 80016b0:	80bb      	strh	r3, [r7, #4]
	  //	  		int Buff2=-20;
	  //	  		int BuffP=40;
	  //	  		int BuffN=-40;

	  	  		//motor 1
	  	  		HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2104      	movs	r1, #4
 80016b6:	488c      	ldr	r0, [pc, #560]	@ (80018e8 <main+0x530>)
 80016b8:	f001 fc68 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 80016bc:	4b8b      	ldr	r3, [pc, #556]	@ (80018ec <main+0x534>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2200      	movs	r2, #0
 80016c2:	639a      	str	r2, [r3, #56]	@ 0x38

	  		   //motor 2
	  		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2108      	movs	r1, #8
 80016c8:	4887      	ldr	r0, [pc, #540]	@ (80018e8 <main+0x530>)
 80016ca:	f001 fc5f 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, dutycycle);
 80016ce:	4b88      	ldr	r3, [pc, #544]	@ (80018f0 <main+0x538>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	88ba      	ldrh	r2, [r7, #4]
 80016d4:	635a      	str	r2, [r3, #52]	@ 0x34

	  		   //motor 3
	  		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2102      	movs	r1, #2
 80016da:	4883      	ldr	r0, [pc, #524]	@ (80018e8 <main+0x530>)
 80016dc:	f001 fc56 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, dutycycle);
 80016e0:	4b82      	ldr	r3, [pc, #520]	@ (80018ec <main+0x534>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	88ba      	ldrh	r2, [r7, #4]
 80016e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80016e8:	e25c      	b.n	8001ba4 <main+0x7ec>


	  	  	}
	  	  	//backward
	  	  	else if(ly<=Buff2 && (lx<=BuffP && lx>=BuffN) )
 80016ea:	4b79      	ldr	r3, [pc, #484]	@ (80018d0 <main+0x518>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	4b81      	ldr	r3, [pc, #516]	@ (80018f4 <main+0x53c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dc35      	bgt.n	8001762 <main+0x3aa>
 80016f6:	4b78      	ldr	r3, [pc, #480]	@ (80018d8 <main+0x520>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b78      	ldr	r3, [pc, #480]	@ (80018dc <main+0x524>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	dc2f      	bgt.n	8001762 <main+0x3aa>
 8001702:	4b75      	ldr	r3, [pc, #468]	@ (80018d8 <main+0x520>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b76      	ldr	r3, [pc, #472]	@ (80018e0 <main+0x528>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	db29      	blt.n	8001762 <main+0x3aa>

	  	   {

	  			 dutycycle=map(ly,-128,Buff2,fast,0);
 800170e:	4b70      	ldr	r3, [pc, #448]	@ (80018d0 <main+0x518>)
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	4b78      	ldr	r3, [pc, #480]	@ (80018f4 <main+0x53c>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b73      	ldr	r3, [pc, #460]	@ (80018e4 <main+0x52c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2100      	movs	r1, #0
 800171c:	9100      	str	r1, [sp, #0]
 800171e:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001722:	f7ff fe2d 	bl	8001380 <map>
 8001726:	4603      	mov	r3, r0
 8001728:	80bb      	strh	r3, [r7, #4]

	  			 //motor 1
	  			   HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, SET);
 800172a:	2201      	movs	r2, #1
 800172c:	2104      	movs	r1, #4
 800172e:	486e      	ldr	r0, [pc, #440]	@ (80018e8 <main+0x530>)
 8001730:	f001 fc2c 	bl	8002f8c <HAL_GPIO_WritePin>
	  			   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 0);
 8001734:	4b6d      	ldr	r3, [pc, #436]	@ (80018ec <main+0x534>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2200      	movs	r2, #0
 800173a:	639a      	str	r2, [r3, #56]	@ 0x38

	  			   //motor 2
	  			   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, SET);
 800173c:	2201      	movs	r2, #1
 800173e:	2108      	movs	r1, #8
 8001740:	4869      	ldr	r0, [pc, #420]	@ (80018e8 <main+0x530>)
 8001742:	f001 fc23 	bl	8002f8c <HAL_GPIO_WritePin>
	  			   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, dutycycle);
 8001746:	4b6a      	ldr	r3, [pc, #424]	@ (80018f0 <main+0x538>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	88ba      	ldrh	r2, [r7, #4]
 800174c:	635a      	str	r2, [r3, #52]	@ 0x34

	  			   //motor 3
	  			   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2102      	movs	r1, #2
 8001752:	4865      	ldr	r0, [pc, #404]	@ (80018e8 <main+0x530>)
 8001754:	f001 fc1a 	bl	8002f8c <HAL_GPIO_WritePin>
	  			   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, dutycycle);
 8001758:	4b64      	ldr	r3, [pc, #400]	@ (80018ec <main+0x534>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	88ba      	ldrh	r2, [r7, #4]
 800175e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001760:	e220      	b.n	8001ba4 <main+0x7ec>


	  	   }

	  	  	//RIGHT
	  	  	else if(lx>=Buff1 && (ly<=BuffP && ly>=BuffN))
 8001762:	4b5d      	ldr	r3, [pc, #372]	@ (80018d8 <main+0x520>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b5b      	ldr	r3, [pc, #364]	@ (80018d4 <main+0x51c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	db52      	blt.n	8001814 <main+0x45c>
 800176e:	4b58      	ldr	r3, [pc, #352]	@ (80018d0 <main+0x518>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b5a      	ldr	r3, [pc, #360]	@ (80018dc <main+0x524>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	dc4c      	bgt.n	8001814 <main+0x45c>
 800177a:	4b55      	ldr	r3, [pc, #340]	@ (80018d0 <main+0x518>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b58      	ldr	r3, [pc, #352]	@ (80018e0 <main+0x528>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	db46      	blt.n	8001814 <main+0x45c>

	  	   {

	  	  		dutycycle=map(lx,Buff1,127,0,fast);
 8001786:	4b54      	ldr	r3, [pc, #336]	@ (80018d8 <main+0x520>)
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	4b52      	ldr	r3, [pc, #328]	@ (80018d4 <main+0x51c>)
 800178c:	6819      	ldr	r1, [r3, #0]
 800178e:	4b55      	ldr	r3, [pc, #340]	@ (80018e4 <main+0x52c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2300      	movs	r3, #0
 8001796:	227f      	movs	r2, #127	@ 0x7f
 8001798:	f7ff fdf2 	bl	8001380 <map>
 800179c:	4603      	mov	r3, r0
 800179e:	80bb      	strh	r3, [r7, #4]

	  	  		//motor 1
	  	  		HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2104      	movs	r1, #4
 80017a4:	4850      	ldr	r0, [pc, #320]	@ (80018e8 <main+0x530>)
 80017a6:	f001 fbf1 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 80017aa:	4b50      	ldr	r3, [pc, #320]	@ (80018ec <main+0x534>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	88ba      	ldrh	r2, [r7, #4]
 80017b0:	639a      	str	r2, [r3, #56]	@ 0x38

	  		   //motor 2
	  		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, RESET);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2108      	movs	r1, #8
 80017b6:	484c      	ldr	r0, [pc, #304]	@ (80018e8 <main+0x530>)
 80017b8:	f001 fbe8 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, (0.86 * dutycycle));
 80017bc:	88bb      	ldrh	r3, [r7, #4]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fed0 	bl	8000564 <__aeabi_i2d>
 80017c4:	a340      	add	r3, pc, #256	@ (adr r3, 80018c8 <main+0x510>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f7fe ff35 	bl	8000638 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4947      	ldr	r1, [pc, #284]	@ (80018f0 <main+0x538>)
 80017d4:	680c      	ldr	r4, [r1, #0]
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f7ff fa05 	bl	8000be8 <__aeabi_d2uiz>
 80017de:	4603      	mov	r3, r0
 80017e0:	6363      	str	r3, [r4, #52]	@ 0x34

	  		   //motor 3
	  		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2102      	movs	r1, #2
 80017e6:	4840      	ldr	r0, [pc, #256]	@ (80018e8 <main+0x530>)
 80017e8:	f001 fbd0 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (0.86 * dutycycle));
 80017ec:	88bb      	ldrh	r3, [r7, #4]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe feb8 	bl	8000564 <__aeabi_i2d>
 80017f4:	a334      	add	r3, pc, #208	@ (adr r3, 80018c8 <main+0x510>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe ff1d 	bl	8000638 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	493a      	ldr	r1, [pc, #232]	@ (80018ec <main+0x534>)
 8001804:	680c      	ldr	r4, [r1, #0]
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f9ed 	bl	8000be8 <__aeabi_d2uiz>
 800180e:	4603      	mov	r3, r0
 8001810:	6363      	str	r3, [r4, #52]	@ 0x34
 8001812:	e1c7      	b.n	8001ba4 <main+0x7ec>


	  	   }
	  	  	//left

	  	  	else if(lx<=Buff2 && (ly<=BuffP && ly>=BuffN) )
 8001814:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <main+0x520>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b36      	ldr	r3, [pc, #216]	@ (80018f4 <main+0x53c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	dc6b      	bgt.n	80018f8 <main+0x540>
 8001820:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <main+0x518>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <main+0x524>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	dc65      	bgt.n	80018f8 <main+0x540>
 800182c:	4b28      	ldr	r3, [pc, #160]	@ (80018d0 <main+0x518>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <main+0x528>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	db5f      	blt.n	80018f8 <main+0x540>

	  	   {

	  	  		dutycycle=map(lx,-128,Buff2,fast,0);
 8001838:	4b27      	ldr	r3, [pc, #156]	@ (80018d8 <main+0x520>)
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	4b2d      	ldr	r3, [pc, #180]	@ (80018f4 <main+0x53c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <main+0x52c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2100      	movs	r1, #0
 8001846:	9100      	str	r1, [sp, #0]
 8001848:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800184c:	f7ff fd98 	bl	8001380 <map>
 8001850:	4603      	mov	r3, r0
 8001852:	80bb      	strh	r3, [r7, #4]
	  	  		//motor 1
	  	  		HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	2104      	movs	r1, #4
 8001858:	4823      	ldr	r0, [pc, #140]	@ (80018e8 <main+0x530>)
 800185a:	f001 fb97 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 800185e:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <main+0x534>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	88ba      	ldrh	r2, [r7, #4]
 8001864:	639a      	str	r2, [r3, #56]	@ 0x38

	  		   //motor 2
	  		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, SET);
 8001866:	2201      	movs	r2, #1
 8001868:	2108      	movs	r1, #8
 800186a:	481f      	ldr	r0, [pc, #124]	@ (80018e8 <main+0x530>)
 800186c:	f001 fb8e 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, (0.86 * dutycycle));
 8001870:	88bb      	ldrh	r3, [r7, #4]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe76 	bl	8000564 <__aeabi_i2d>
 8001878:	a313      	add	r3, pc, #76	@ (adr r3, 80018c8 <main+0x510>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe fedb 	bl	8000638 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	491a      	ldr	r1, [pc, #104]	@ (80018f0 <main+0x538>)
 8001888:	680c      	ldr	r4, [r1, #0]
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f9ab 	bl	8000be8 <__aeabi_d2uiz>
 8001892:	4603      	mov	r3, r0
 8001894:	6363      	str	r3, [r4, #52]	@ 0x34

	  		   //motor 3
	  		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, SET);
 8001896:	2201      	movs	r2, #1
 8001898:	2102      	movs	r1, #2
 800189a:	4813      	ldr	r0, [pc, #76]	@ (80018e8 <main+0x530>)
 800189c:	f001 fb76 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, (0.86 * dutycycle));
 80018a0:	88bb      	ldrh	r3, [r7, #4]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe5e 	bl	8000564 <__aeabi_i2d>
 80018a8:	a307      	add	r3, pc, #28	@ (adr r3, 80018c8 <main+0x510>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe fec3 	bl	8000638 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	490d      	ldr	r1, [pc, #52]	@ (80018ec <main+0x534>)
 80018b8:	680c      	ldr	r4, [r1, #0]
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f993 	bl	8000be8 <__aeabi_d2uiz>
 80018c2:	4603      	mov	r3, r0
 80018c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80018c6:	e16d      	b.n	8001ba4 <main+0x7ec>
 80018c8:	b851eb85 	.word	0xb851eb85
 80018cc:	3feb851e 	.word	0x3feb851e
 80018d0:	20000218 	.word	0x20000218
 80018d4:	20000004 	.word	0x20000004
 80018d8:	20000214 	.word	0x20000214
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	20000010 	.word	0x20000010
 80018e4:	20000000 	.word	0x20000000
 80018e8:	40020800 	.word	0x40020800
 80018ec:	20000338 	.word	0x20000338
 80018f0:	200002f0 	.word	0x200002f0
 80018f4:	20000008 	.word	0x20000008


	  	   }

	  	  //top-right
	  	    else if(lx>70 && ly>70)
 80018f8:	4b83      	ldr	r3, [pc, #524]	@ (8001b08 <main+0x750>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b46      	cmp	r3, #70	@ 0x46
 80018fe:	dd2d      	ble.n	800195c <main+0x5a4>
 8001900:	4b82      	ldr	r3, [pc, #520]	@ (8001b0c <main+0x754>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b46      	cmp	r3, #70	@ 0x46
 8001906:	dd29      	ble.n	800195c <main+0x5a4>
	  	  	  	  	{

	  	  	  	  		dutycycle=map(rx,-128,Buff2,400,0);
 8001908:	4b81      	ldr	r3, [pc, #516]	@ (8001b10 <main+0x758>)
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	4b81      	ldr	r3, [pc, #516]	@ (8001b14 <main+0x75c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2300      	movs	r3, #0
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001918:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800191c:	f7ff fd30 	bl	8001380 <map>
 8001920:	4603      	mov	r3, r0
 8001922:	80bb      	strh	r3, [r7, #4]

	  	  	  	  		//motor 1
	  	  	  	  		HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, SET);
 8001924:	2201      	movs	r2, #1
 8001926:	2104      	movs	r1, #4
 8001928:	487b      	ldr	r0, [pc, #492]	@ (8001b18 <main+0x760>)
 800192a:	f001 fb2f 	bl	8002f8c <HAL_GPIO_WritePin>
	  	  	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 800192e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b1c <main+0x764>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	88ba      	ldrh	r2, [r7, #4]
 8001934:	639a      	str	r2, [r3, #56]	@ 0x38

	  	  	  		   //motor 2
	  	  	  		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2108      	movs	r1, #8
 800193a:	4877      	ldr	r0, [pc, #476]	@ (8001b18 <main+0x760>)
 800193c:	f001 fb26 	bl	8002f8c <HAL_GPIO_WritePin>
	  	  	  		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, dutycycle);
 8001940:	4b77      	ldr	r3, [pc, #476]	@ (8001b20 <main+0x768>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	88ba      	ldrh	r2, [r7, #4]
 8001946:	635a      	str	r2, [r3, #52]	@ 0x34

	  	  	  		   //motor 3
	  	  	  		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, SET);
 8001948:	2201      	movs	r2, #1
 800194a:	2102      	movs	r1, #2
 800194c:	4872      	ldr	r0, [pc, #456]	@ (8001b18 <main+0x760>)
 800194e:	f001 fb1d 	bl	8002f8c <HAL_GPIO_WritePin>
	  	  	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 8001952:	4b72      	ldr	r3, [pc, #456]	@ (8001b1c <main+0x764>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2200      	movs	r2, #0
 8001958:	635a      	str	r2, [r3, #52]	@ 0x34
 800195a:	e123      	b.n	8001ba4 <main+0x7ec>

	  	  	  	   }
	  	  	//top-left
	  	  else if(lx < -70 && ly > 70)
 800195c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <main+0x750>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 8001964:	da2d      	bge.n	80019c2 <main+0x60a>
 8001966:	4b69      	ldr	r3, [pc, #420]	@ (8001b0c <main+0x754>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b46      	cmp	r3, #70	@ 0x46
 800196c:	dd29      	ble.n	80019c2 <main+0x60a>
	  		  	  	{

	  		  	  		dutycycle=map(rx,-128,Buff2,400,0);
 800196e:	4b68      	ldr	r3, [pc, #416]	@ (8001b10 <main+0x758>)
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	4b68      	ldr	r3, [pc, #416]	@ (8001b14 <main+0x75c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	2300      	movs	r3, #0
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800197e:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001982:	f7ff fcfd 	bl	8001380 <map>
 8001986:	4603      	mov	r3, r0
 8001988:	80bb      	strh	r3, [r7, #4]

	  		  	  		//motor 1
	  		  	  		HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	2104      	movs	r1, #4
 800198e:	4862      	ldr	r0, [pc, #392]	@ (8001b18 <main+0x760>)
 8001990:	f001 fafc 	bl	8002f8c <HAL_GPIO_WritePin>
	  		  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 8001994:	4b61      	ldr	r3, [pc, #388]	@ (8001b1c <main+0x764>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	88ba      	ldrh	r2, [r7, #4]
 800199a:	639a      	str	r2, [r3, #56]	@ 0x38

	  		  		   //motor 2
	  		  		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, SET);
 800199c:	2201      	movs	r2, #1
 800199e:	2108      	movs	r1, #8
 80019a0:	485d      	ldr	r0, [pc, #372]	@ (8001b18 <main+0x760>)
 80019a2:	f001 faf3 	bl	8002f8c <HAL_GPIO_WritePin>
	  		  		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 80019a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001b20 <main+0x768>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2200      	movs	r2, #0
 80019ac:	635a      	str	r2, [r3, #52]	@ 0x34

	  		  		   //motor 3
	  		  		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, SET);
 80019ae:	2201      	movs	r2, #1
 80019b0:	2102      	movs	r1, #2
 80019b2:	4859      	ldr	r0, [pc, #356]	@ (8001b18 <main+0x760>)
 80019b4:	f001 faea 	bl	8002f8c <HAL_GPIO_WritePin>
	  		  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, dutycycle);
 80019b8:	4b58      	ldr	r3, [pc, #352]	@ (8001b1c <main+0x764>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	88ba      	ldrh	r2, [r7, #4]
 80019be:	635a      	str	r2, [r3, #52]	@ 0x34
 80019c0:	e0f0      	b.n	8001ba4 <main+0x7ec>

	  		  	   }
	  	  //bottom-right
	  	    else if(lx > 70 && ly < -70)
 80019c2:	4b51      	ldr	r3, [pc, #324]	@ (8001b08 <main+0x750>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b46      	cmp	r3, #70	@ 0x46
 80019c8:	dd2e      	ble.n	8001a28 <main+0x670>
 80019ca:	4b50      	ldr	r3, [pc, #320]	@ (8001b0c <main+0x754>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 80019d2:	da29      	bge.n	8001a28 <main+0x670>
	  		  	  	{

	  		  	  		dutycycle=map(rx,-128,Buff2,400,0);
 80019d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001b10 <main+0x758>)
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001b14 <main+0x75c>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2300      	movs	r3, #0
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80019e4:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80019e8:	f7ff fcca 	bl	8001380 <map>
 80019ec:	4603      	mov	r3, r0
 80019ee:	80bb      	strh	r3, [r7, #4]

	  		  	  		//motor 1
	  		  	  		HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2104      	movs	r1, #4
 80019f4:	4848      	ldr	r0, [pc, #288]	@ (8001b18 <main+0x760>)
 80019f6:	f001 fac9 	bl	8002f8c <HAL_GPIO_WritePin>
	  		  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 80019fa:	4b48      	ldr	r3, [pc, #288]	@ (8001b1c <main+0x764>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	88ba      	ldrh	r2, [r7, #4]
 8001a00:	639a      	str	r2, [r3, #56]	@ 0x38

	  		  		   //motor 2
	  		  		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2108      	movs	r1, #8
 8001a06:	4844      	ldr	r0, [pc, #272]	@ (8001b18 <main+0x760>)
 8001a08:	f001 fac0 	bl	8002f8c <HAL_GPIO_WritePin>
	  		  		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 8001a0c:	4b44      	ldr	r3, [pc, #272]	@ (8001b20 <main+0x768>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	635a      	str	r2, [r3, #52]	@ 0x34

	  		  		   //motor 3
	  		  		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2102      	movs	r1, #2
 8001a18:	483f      	ldr	r0, [pc, #252]	@ (8001b18 <main+0x760>)
 8001a1a:	f001 fab7 	bl	8002f8c <HAL_GPIO_WritePin>
	  		  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, dutycycle);
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b1c <main+0x764>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	88ba      	ldrh	r2, [r7, #4]
 8001a24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a26:	e0bd      	b.n	8001ba4 <main+0x7ec>

	  		  	   }
	  	  //bottom-left
	  	    else if(lx < -70 && ly < -70)
 8001a28:	4b37      	ldr	r3, [pc, #220]	@ (8001b08 <main+0x750>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 8001a30:	da2e      	bge.n	8001a90 <main+0x6d8>
 8001a32:	4b36      	ldr	r3, [pc, #216]	@ (8001b0c <main+0x754>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f113 0f46 	cmn.w	r3, #70	@ 0x46
 8001a3a:	da29      	bge.n	8001a90 <main+0x6d8>
	  		  	  	{

	  		  	  		dutycycle=map(rx,-128,Buff2,400,0);
 8001a3c:	4b34      	ldr	r3, [pc, #208]	@ (8001b10 <main+0x758>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <main+0x75c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2300      	movs	r3, #0
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001a4c:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001a50:	f7ff fc96 	bl	8001380 <map>
 8001a54:	4603      	mov	r3, r0
 8001a56:	80bb      	strh	r3, [r7, #4]

	  		  	  		//motor 1
	  		  	  		HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	482e      	ldr	r0, [pc, #184]	@ (8001b18 <main+0x760>)
 8001a5e:	f001 fa95 	bl	8002f8c <HAL_GPIO_WritePin>
	  		  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 8001a62:	4b2e      	ldr	r3, [pc, #184]	@ (8001b1c <main+0x764>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	88ba      	ldrh	r2, [r7, #4]
 8001a68:	639a      	str	r2, [r3, #56]	@ 0x38

	  		  		   //motor 2
	  		  		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2108      	movs	r1, #8
 8001a6e:	482a      	ldr	r0, [pc, #168]	@ (8001b18 <main+0x760>)
 8001a70:	f001 fa8c 	bl	8002f8c <HAL_GPIO_WritePin>
	  		  		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, dutycycle);
 8001a74:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <main+0x768>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	88ba      	ldrh	r2, [r7, #4]
 8001a7a:	635a      	str	r2, [r3, #52]	@ 0x34

	  		  		   //motor 3
	  		  		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2102      	movs	r1, #2
 8001a80:	4825      	ldr	r0, [pc, #148]	@ (8001b18 <main+0x760>)
 8001a82:	f001 fa83 	bl	8002f8c <HAL_GPIO_WritePin>
	  		  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 8001a86:	4b25      	ldr	r3, [pc, #148]	@ (8001b1c <main+0x764>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a8e:	e089      	b.n	8001ba4 <main+0x7ec>

	  		  	   }

	  	  	//ANTICLOCKWISE
	  	  	else if(rx<=Buff2 && (ry<=BuffP && ry>=BuffN) )
 8001a90:	4b1f      	ldr	r3, [pc, #124]	@ (8001b10 <main+0x758>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <main+0x75c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dc49      	bgt.n	8001b30 <main+0x778>
 8001a9c:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <main+0x76c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b21      	ldr	r3, [pc, #132]	@ (8001b28 <main+0x770>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	dc43      	bgt.n	8001b30 <main+0x778>
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <main+0x76c>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <main+0x774>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	db3d      	blt.n	8001b30 <main+0x778>
	  	  	{

	  	  		dutycycle=map(rx,-128,Buff2,400,0);
 8001ab4:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <main+0x758>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <main+0x75c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2300      	movs	r3, #0
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001ac4:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8001ac8:	f7ff fc5a 	bl	8001380 <map>
 8001acc:	4603      	mov	r3, r0
 8001ace:	80bb      	strh	r3, [r7, #4]

	  	  		//motor 1
	  	  		HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	4810      	ldr	r0, [pc, #64]	@ (8001b18 <main+0x760>)
 8001ad6:	f001 fa59 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <main+0x764>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	88ba      	ldrh	r2, [r7, #4]
 8001ae0:	639a      	str	r2, [r3, #56]	@ 0x38

	  		   //motor 2
	  		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2108      	movs	r1, #8
 8001ae6:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <main+0x760>)
 8001ae8:	f001 fa50 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, dutycycle);
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <main+0x768>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	88ba      	ldrh	r2, [r7, #4]
 8001af2:	635a      	str	r2, [r3, #52]	@ 0x34

	  		   //motor 3
	  		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2102      	movs	r1, #2
 8001af8:	4807      	ldr	r0, [pc, #28]	@ (8001b18 <main+0x760>)
 8001afa:	f001 fa47 	bl	8002f8c <HAL_GPIO_WritePin>
	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, dutycycle);
 8001afe:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <main+0x764>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	88ba      	ldrh	r2, [r7, #4]
 8001b04:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b06:	e04d      	b.n	8001ba4 <main+0x7ec>
 8001b08:	20000214 	.word	0x20000214
 8001b0c:	20000218 	.word	0x20000218
 8001b10:	2000021c 	.word	0x2000021c
 8001b14:	20000008 	.word	0x20000008
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	20000338 	.word	0x20000338
 8001b20:	200002f0 	.word	0x200002f0
 8001b24:	20000220 	.word	0x20000220
 8001b28:	2000000c 	.word	0x2000000c
 8001b2c:	20000010 	.word	0x20000010

	  	   }
	  	  //CLOCKWISE
	  	  	  	  	else if(rx>=Buff1 && (ry<=BuffP && ry>=BuffN) )
 8001b30:	4b54      	ldr	r3, [pc, #336]	@ (8001c84 <main+0x8cc>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b54      	ldr	r3, [pc, #336]	@ (8001c88 <main+0x8d0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	db33      	blt.n	8001ba4 <main+0x7ec>
 8001b3c:	4b53      	ldr	r3, [pc, #332]	@ (8001c8c <main+0x8d4>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b53      	ldr	r3, [pc, #332]	@ (8001c90 <main+0x8d8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dc2d      	bgt.n	8001ba4 <main+0x7ec>
 8001b48:	4b50      	ldr	r3, [pc, #320]	@ (8001c8c <main+0x8d4>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b51      	ldr	r3, [pc, #324]	@ (8001c94 <main+0x8dc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	db27      	blt.n	8001ba4 <main+0x7ec>
	  	  	  	  	{

	  	  	  	  		dutycycle=map(rx,Buff1,127,0,400);
 8001b54:	4b4b      	ldr	r3, [pc, #300]	@ (8001c84 <main+0x8cc>)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	4b4b      	ldr	r3, [pc, #300]	@ (8001c88 <main+0x8d0>)
 8001b5a:	6819      	ldr	r1, [r3, #0]
 8001b5c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2300      	movs	r3, #0
 8001b64:	227f      	movs	r2, #127	@ 0x7f
 8001b66:	f7ff fc0b 	bl	8001380 <map>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80bb      	strh	r3, [r7, #4]
	  	  	  	  		//motor 1
	  	  	  	  		HAL_GPIO_WritePin(motor_1_GPIO_Port, motor_1_Pin, SET);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2104      	movs	r1, #4
 8001b72:	4849      	ldr	r0, [pc, #292]	@ (8001c98 <main+0x8e0>)
 8001b74:	f001 fa0a 	bl	8002f8c <HAL_GPIO_WritePin>
	  	  	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, dutycycle);
 8001b78:	4b48      	ldr	r3, [pc, #288]	@ (8001c9c <main+0x8e4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	88ba      	ldrh	r2, [r7, #4]
 8001b7e:	639a      	str	r2, [r3, #56]	@ 0x38

	  	  	  		   //motor 2
	  	  	  		   HAL_GPIO_WritePin(motor_2_GPIO_Port, motor_2_Pin, SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	2108      	movs	r1, #8
 8001b84:	4844      	ldr	r0, [pc, #272]	@ (8001c98 <main+0x8e0>)
 8001b86:	f001 fa01 	bl	8002f8c <HAL_GPIO_WritePin>
	  	  	  		   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, dutycycle);
 8001b8a:	4b45      	ldr	r3, [pc, #276]	@ (8001ca0 <main+0x8e8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	88ba      	ldrh	r2, [r7, #4]
 8001b90:	635a      	str	r2, [r3, #52]	@ 0x34

	  	  	  		   //motor 3
	  	  	  		   HAL_GPIO_WritePin(motor_3_GPIO_Port, motor_3_Pin, SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	2102      	movs	r1, #2
 8001b96:	4840      	ldr	r0, [pc, #256]	@ (8001c98 <main+0x8e0>)
 8001b98:	f001 f9f8 	bl	8002f8c <HAL_GPIO_WritePin>
	  	  	  		   __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, dutycycle);
 8001b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c9c <main+0x8e4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	88ba      	ldrh	r2, [r7, #4]
 8001ba2:	635a      	str	r2, [r3, #52]	@ 0x34

	  	  	  	   }



	  	  if (BNO055_GetAllData(&hi2c1, &imu_data) == HAL_OK) {
 8001ba4:	493f      	ldr	r1, [pc, #252]	@ (8001ca4 <main+0x8ec>)
 8001ba6:	4840      	ldr	r0, [pc, #256]	@ (8001ca8 <main+0x8f0>)
 8001ba8:	f7ff fbb4 	bl	8001314 <BNO055_GetAllData>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d15f      	bne.n	8001c72 <main+0x8ba>
//	  	  	  		   Print accelerometer data (m/s^2)
	  	  	  		  printf("Accel: X=%.2f, Y=%.2f, Z=%.2f m/s^2\n",
	  	  	  				 imu_data.accel_x, imu_data.accel_y, imu_data.accel_z);
 8001bb2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ca4 <main+0x8ec>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
	  	  	  		  printf("Accel: X=%.2f, Y=%.2f, Z=%.2f m/s^2\n",
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fce6 	bl	8000588 <__aeabi_f2d>
 8001bbc:	4680      	mov	r8, r0
 8001bbe:	4689      	mov	r9, r1
	  	  	  				 imu_data.accel_x, imu_data.accel_y, imu_data.accel_z);
 8001bc0:	4b38      	ldr	r3, [pc, #224]	@ (8001ca4 <main+0x8ec>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
	  	  	  		  printf("Accel: X=%.2f, Y=%.2f, Z=%.2f m/s^2\n",
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcdf 	bl	8000588 <__aeabi_f2d>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	460d      	mov	r5, r1
	  	  	  				 imu_data.accel_x, imu_data.accel_y, imu_data.accel_z);
 8001bce:	4b35      	ldr	r3, [pc, #212]	@ (8001ca4 <main+0x8ec>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
	  	  	  		  printf("Accel: X=%.2f, Y=%.2f, Z=%.2f m/s^2\n",
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fcd8 	bl	8000588 <__aeabi_f2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001be0:	e9cd 4500 	strd	r4, r5, [sp]
 8001be4:	4642      	mov	r2, r8
 8001be6:	464b      	mov	r3, r9
 8001be8:	4830      	ldr	r0, [pc, #192]	@ (8001cac <main+0x8f4>)
 8001bea:	f005 fde9 	bl	80077c0 <iprintf>

//	  	  	  		   Print gyroscope data (degrees/s)
	  	  	  		  printf("Gyro: X=%.2f, Y=%.2f, Z=%.2f deg/s\n",
	  	  	  				 imu_data.gyro_x, imu_data.gyro_y, imu_data.gyro_z);
 8001bee:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca4 <main+0x8ec>)
 8001bf0:	68db      	ldr	r3, [r3, #12]
	  	  	  		  printf("Gyro: X=%.2f, Y=%.2f, Z=%.2f deg/s\n",
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fcc8 	bl	8000588 <__aeabi_f2d>
 8001bf8:	4680      	mov	r8, r0
 8001bfa:	4689      	mov	r9, r1
	  	  	  				 imu_data.gyro_x, imu_data.gyro_y, imu_data.gyro_z);
 8001bfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <main+0x8ec>)
 8001bfe:	691b      	ldr	r3, [r3, #16]
	  	  	  		  printf("Gyro: X=%.2f, Y=%.2f, Z=%.2f deg/s\n",
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fcc1 	bl	8000588 <__aeabi_f2d>
 8001c06:	4604      	mov	r4, r0
 8001c08:	460d      	mov	r5, r1
	  	  	  				 imu_data.gyro_x, imu_data.gyro_y, imu_data.gyro_z);
 8001c0a:	4b26      	ldr	r3, [pc, #152]	@ (8001ca4 <main+0x8ec>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
	  	  	  		  printf("Gyro: X=%.2f, Y=%.2f, Z=%.2f deg/s\n",
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fcba 	bl	8000588 <__aeabi_f2d>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c1c:	e9cd 4500 	strd	r4, r5, [sp]
 8001c20:	4642      	mov	r2, r8
 8001c22:	464b      	mov	r3, r9
 8001c24:	4822      	ldr	r0, [pc, #136]	@ (8001cb0 <main+0x8f8>)
 8001c26:	f005 fdcb 	bl	80077c0 <iprintf>
	  	  	  		  printf("\n\n");
 8001c2a:	4822      	ldr	r0, [pc, #136]	@ (8001cb4 <main+0x8fc>)
 8001c2c:	f005 fe30 	bl	8007890 <puts>
//	  	  	  		   Print orientation data
	  	  	  		  printf("Euler: Yaw=%.2f, Roll=%.2f, Pitch=%.2f deg\n",
	  	  	  				 imu_data.euler_h, imu_data.euler_r, imu_data.euler_p);
 8001c30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <main+0x8ec>)
 8001c32:	699b      	ldr	r3, [r3, #24]
	  	  	  		  printf("Euler: Yaw=%.2f, Roll=%.2f, Pitch=%.2f deg\n",
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fca7 	bl	8000588 <__aeabi_f2d>
 8001c3a:	4680      	mov	r8, r0
 8001c3c:	4689      	mov	r9, r1
	  	  	  				 imu_data.euler_h, imu_data.euler_r, imu_data.euler_p);
 8001c3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <main+0x8ec>)
 8001c40:	69db      	ldr	r3, [r3, #28]
	  	  	  		  printf("Euler: Yaw=%.2f, Roll=%.2f, Pitch=%.2f deg\n",
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fca0 	bl	8000588 <__aeabi_f2d>
 8001c48:	4604      	mov	r4, r0
 8001c4a:	460d      	mov	r5, r1
	  	  	  				 imu_data.euler_h, imu_data.euler_r, imu_data.euler_p);
 8001c4c:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <main+0x8ec>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
	  	  	  		  printf("Euler: Yaw=%.2f, Roll=%.2f, Pitch=%.2f deg\n",
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc99 	bl	8000588 <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c5e:	e9cd 4500 	strd	r4, r5, [sp]
 8001c62:	4642      	mov	r2, r8
 8001c64:	464b      	mov	r3, r9
 8001c66:	4814      	ldr	r0, [pc, #80]	@ (8001cb8 <main+0x900>)
 8001c68:	f005 fdaa 	bl	80077c0 <iprintf>
	  	  	  		  printf("\n\n");
 8001c6c:	4811      	ldr	r0, [pc, #68]	@ (8001cb4 <main+0x8fc>)
 8001c6e:	f005 fe0f 	bl	8007890 <puts>
	  	  	  	  }

	  	  	  	  HAL_Delay(100); // Read at 10Hz
 8001c72:	2064      	movs	r0, #100	@ 0x64
 8001c74:	f000 fe2e 	bl	80028d4 <HAL_Delay>
	  	  	  HAL_Delay(10);
 8001c78:	200a      	movs	r0, #10
 8001c7a:	f000 fe2b 	bl	80028d4 <HAL_Delay>
  {
 8001c7e:	f7ff bbc4 	b.w	800140a <main+0x52>
 8001c82:	bf00      	nop
 8001c84:	2000021c 	.word	0x2000021c
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	20000220 	.word	0x20000220
 8001c90:	2000000c 	.word	0x2000000c
 8001c94:	20000010 	.word	0x20000010
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	20000338 	.word	0x20000338
 8001ca0:	200002f0 	.word	0x200002f0
 8001ca4:	20000410 	.word	0x20000410
 8001ca8:	20000254 	.word	0x20000254
 8001cac:	0800b194 	.word	0x0800b194
 8001cb0:	0800b1bc 	.word	0x0800b1bc
 8001cb4:	0800b1e0 	.word	0x0800b1e0
 8001cb8:	0800b1e4 	.word	0x0800b1e4

08001cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b094      	sub	sp, #80	@ 0x50
 8001cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	2234      	movs	r2, #52	@ 0x34
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f005 fee0 	bl	8007a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd0:	f107 0308 	add.w	r3, r7, #8
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d98 <SystemClock_Config+0xdc>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d98 <SystemClock_Config+0xdc>)
 8001cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf0:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <SystemClock_Config+0xdc>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	4b26      	ldr	r3, [pc, #152]	@ (8001d9c <SystemClock_Config+0xe0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a25      	ldr	r2, [pc, #148]	@ (8001d9c <SystemClock_Config+0xe0>)
 8001d06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b23      	ldr	r3, [pc, #140]	@ (8001d9c <SystemClock_Config+0xe0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d20:	2310      	movs	r3, #16
 8001d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d24:	2302      	movs	r3, #2
 8001d26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d30:	23b4      	movs	r3, #180	@ 0xb4
 8001d32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d34:	2302      	movs	r3, #2
 8001d36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 fccf 	bl	80046e8 <HAL_RCC_OscConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d50:	f000 fa64 	bl	800221c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d54:	f002 f92e 	bl	8003fb4 <HAL_PWREx_EnableOverDrive>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001d5e:	f000 fa5d 	bl	800221c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d62:	230f      	movs	r3, #15
 8001d64:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d66:	2302      	movs	r3, #2
 8001d68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d6e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d78:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d7a:	f107 0308 	add.w	r3, r7, #8
 8001d7e:	2105      	movs	r1, #5
 8001d80:	4618      	mov	r0, r3
 8001d82:	f002 f967 	bl	8004054 <HAL_RCC_ClockConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001d8c:	f000 fa46 	bl	800221c <Error_Handler>
  }
}
 8001d90:	bf00      	nop
 8001d92:	3750      	adds	r7, #80	@ 0x50
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40007000 	.word	0x40007000

08001da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001da6:	4a13      	ldr	r2, [pc, #76]	@ (8001df4 <MX_I2C1_Init+0x54>)
 8001da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001daa:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dac:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <MX_I2C1_Init+0x58>)
 8001dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dca:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dd0:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ddc:	4804      	ldr	r0, [pc, #16]	@ (8001df0 <MX_I2C1_Init+0x50>)
 8001dde:	f001 f8ef 	bl	8002fc0 <HAL_I2C_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001de8:	f000 fa18 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000254 	.word	0x20000254
 8001df4:	40005400 	.word	0x40005400
 8001df8:	00061a80 	.word	0x00061a80

08001dfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e02:	f107 0308 	add.w	r3, r7, #8
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e10:	463b      	mov	r3, r7
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e18:	4b1e      	ldr	r3, [pc, #120]	@ (8001e94 <MX_TIM1_Init+0x98>)
 8001e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001e98 <MX_TIM1_Init+0x9c>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <MX_TIM1_Init+0x98>)
 8001e20:	22b3      	movs	r2, #179	@ 0xb3
 8001e22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <MX_TIM1_Init+0x98>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <MX_TIM1_Init+0x98>)
 8001e2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b18      	ldr	r3, [pc, #96]	@ (8001e94 <MX_TIM1_Init+0x98>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e38:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <MX_TIM1_Init+0x98>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <MX_TIM1_Init+0x98>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e44:	4813      	ldr	r0, [pc, #76]	@ (8001e94 <MX_TIM1_Init+0x98>)
 8001e46:	f002 feed 	bl	8004c24 <HAL_TIM_Base_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e50:	f000 f9e4 	bl	800221c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <MX_TIM1_Init+0x98>)
 8001e62:	f003 f911 	bl	8005088 <HAL_TIM_ConfigClockSource>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e6c:	f000 f9d6 	bl	800221c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e70:	2300      	movs	r3, #0
 8001e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e78:	463b      	mov	r3, r7
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4805      	ldr	r0, [pc, #20]	@ (8001e94 <MX_TIM1_Init+0x98>)
 8001e7e:	f003 fce7 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e88:	f000 f9c8 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200002a8 	.word	0x200002a8
 8001e98:	40010000 	.word	0x40010000

08001e9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08e      	sub	sp, #56	@ 0x38
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb0:	f107 0320 	add.w	r3, r7, #32
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
 8001ec8:	615a      	str	r2, [r3, #20]
 8001eca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f84 <MX_TIM2_Init+0xe8>)
 8001ece:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ed2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f84 <MX_TIM2_Init+0xe8>)
 8001ed6:	22b3      	movs	r2, #179	@ 0xb3
 8001ed8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eda:	4b2a      	ldr	r3, [pc, #168]	@ (8001f84 <MX_TIM2_Init+0xe8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001ee0:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <MX_TIM2_Init+0xe8>)
 8001ee2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ee6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee8:	4b26      	ldr	r3, [pc, #152]	@ (8001f84 <MX_TIM2_Init+0xe8>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eee:	4b25      	ldr	r3, [pc, #148]	@ (8001f84 <MX_TIM2_Init+0xe8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ef4:	4823      	ldr	r0, [pc, #140]	@ (8001f84 <MX_TIM2_Init+0xe8>)
 8001ef6:	f002 fe95 	bl	8004c24 <HAL_TIM_Base_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f00:	f000 f98c 	bl	800221c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	481c      	ldr	r0, [pc, #112]	@ (8001f84 <MX_TIM2_Init+0xe8>)
 8001f12:	f003 f8b9 	bl	8005088 <HAL_TIM_ConfigClockSource>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f1c:	f000 f97e 	bl	800221c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f20:	4818      	ldr	r0, [pc, #96]	@ (8001f84 <MX_TIM2_Init+0xe8>)
 8001f22:	f002 fece 	bl	8004cc2 <HAL_TIM_PWM_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f2c:	f000 f976 	bl	800221c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f38:	f107 0320 	add.w	r3, r7, #32
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4811      	ldr	r0, [pc, #68]	@ (8001f84 <MX_TIM2_Init+0xe8>)
 8001f40:	f003 fc86 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f4a:	f000 f967 	bl	800221c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f4e:	2360      	movs	r3, #96	@ 0x60
 8001f50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2200      	movs	r2, #0
 8001f62:	4619      	mov	r1, r3
 8001f64:	4807      	ldr	r0, [pc, #28]	@ (8001f84 <MX_TIM2_Init+0xe8>)
 8001f66:	f002 ffcd 	bl	8004f04 <HAL_TIM_PWM_ConfigChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f70:	f000 f954 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f74:	4803      	ldr	r0, [pc, #12]	@ (8001f84 <MX_TIM2_Init+0xe8>)
 8001f76:	f000 fa29 	bl	80023cc <HAL_TIM_MspPostInit>

}
 8001f7a:	bf00      	nop
 8001f7c:	3738      	adds	r7, #56	@ 0x38
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002f0 	.word	0x200002f0

08001f88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08e      	sub	sp, #56	@ 0x38
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9c:	f107 0320 	add.w	r3, r7, #32
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
 8001fb4:	615a      	str	r2, [r3, #20]
 8001fb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fb8:	4b32      	ldr	r3, [pc, #200]	@ (8002084 <MX_TIM3_Init+0xfc>)
 8001fba:	4a33      	ldr	r2, [pc, #204]	@ (8002088 <MX_TIM3_Init+0x100>)
 8001fbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180-1;
 8001fbe:	4b31      	ldr	r3, [pc, #196]	@ (8002084 <MX_TIM3_Init+0xfc>)
 8001fc0:	22b3      	movs	r2, #179	@ 0xb3
 8001fc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8002084 <MX_TIM3_Init+0xfc>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001fca:	4b2e      	ldr	r3, [pc, #184]	@ (8002084 <MX_TIM3_Init+0xfc>)
 8001fcc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8002084 <MX_TIM3_Init+0xfc>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <MX_TIM3_Init+0xfc>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fde:	4829      	ldr	r0, [pc, #164]	@ (8002084 <MX_TIM3_Init+0xfc>)
 8001fe0:	f002 fe20 	bl	8004c24 <HAL_TIM_Base_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001fea:	f000 f917 	bl	800221c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ff4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4822      	ldr	r0, [pc, #136]	@ (8002084 <MX_TIM3_Init+0xfc>)
 8001ffc:	f003 f844 	bl	8005088 <HAL_TIM_ConfigClockSource>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002006:	f000 f909 	bl	800221c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800200a:	481e      	ldr	r0, [pc, #120]	@ (8002084 <MX_TIM3_Init+0xfc>)
 800200c:	f002 fe59 	bl	8004cc2 <HAL_TIM_PWM_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002016:	f000 f901 	bl	800221c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002022:	f107 0320 	add.w	r3, r7, #32
 8002026:	4619      	mov	r1, r3
 8002028:	4816      	ldr	r0, [pc, #88]	@ (8002084 <MX_TIM3_Init+0xfc>)
 800202a:	f003 fc11 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002034:	f000 f8f2 	bl	800221c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002038:	2360      	movs	r3, #96	@ 0x60
 800203a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2200      	movs	r2, #0
 800204c:	4619      	mov	r1, r3
 800204e:	480d      	ldr	r0, [pc, #52]	@ (8002084 <MX_TIM3_Init+0xfc>)
 8002050:	f002 ff58 	bl	8004f04 <HAL_TIM_PWM_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800205a:	f000 f8df 	bl	800221c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2204      	movs	r2, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	@ (8002084 <MX_TIM3_Init+0xfc>)
 8002066:	f002 ff4d 	bl	8004f04 <HAL_TIM_PWM_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002070:	f000 f8d4 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002074:	4803      	ldr	r0, [pc, #12]	@ (8002084 <MX_TIM3_Init+0xfc>)
 8002076:	f000 f9a9 	bl	80023cc <HAL_TIM_MspPostInit>

}
 800207a:	bf00      	nop
 800207c:	3738      	adds	r7, #56	@ 0x38
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000338 	.word	0x20000338
 8002088:	40000400 	.word	0x40000400

0800208c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a0:	463b      	mov	r3, r7
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <MX_TIM5_Init+0x94>)
 80020aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002124 <MX_TIM5_Init+0x98>)
 80020ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 180-1;
 80020ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002120 <MX_TIM5_Init+0x94>)
 80020b0:	22b3      	movs	r2, #179	@ 0xb3
 80020b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <MX_TIM5_Init+0x94>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80020ba:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <MX_TIM5_Init+0x94>)
 80020bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c2:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <MX_TIM5_Init+0x94>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c8:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <MX_TIM5_Init+0x94>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020ce:	4814      	ldr	r0, [pc, #80]	@ (8002120 <MX_TIM5_Init+0x94>)
 80020d0:	f002 fda8 	bl	8004c24 <HAL_TIM_Base_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80020da:	f000 f89f 	bl	800221c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020e4:	f107 0308 	add.w	r3, r7, #8
 80020e8:	4619      	mov	r1, r3
 80020ea:	480d      	ldr	r0, [pc, #52]	@ (8002120 <MX_TIM5_Init+0x94>)
 80020ec:	f002 ffcc 	bl	8005088 <HAL_TIM_ConfigClockSource>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80020f6:	f000 f891 	bl	800221c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002102:	463b      	mov	r3, r7
 8002104:	4619      	mov	r1, r3
 8002106:	4806      	ldr	r0, [pc, #24]	@ (8002120 <MX_TIM5_Init+0x94>)
 8002108:	f003 fba2 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002112:	f000 f883 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000380 	.word	0x20000380
 8002124:	40000c00 	.word	0x40000c00

08002128 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <MX_UART4_Init+0x4c>)
 800212e:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <MX_UART4_Init+0x50>)
 8002130:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <MX_UART4_Init+0x4c>)
 8002134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002138:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <MX_UART4_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <MX_UART4_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <MX_UART4_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <MX_UART4_Init+0x4c>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <MX_UART4_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <MX_UART4_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_UART4_Init+0x4c>)
 8002160:	f003 fbf2 	bl	8005948 <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800216a:	f000 f857 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200003c8 	.word	0x200003c8
 8002178:	40004c00 	.word	0x40004c00

0800217c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	4b1f      	ldr	r3, [pc, #124]	@ (8002214 <MX_GPIO_Init+0x98>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	4a1e      	ldr	r2, [pc, #120]	@ (8002214 <MX_GPIO_Init+0x98>)
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002214 <MX_GPIO_Init+0x98>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b18      	ldr	r3, [pc, #96]	@ (8002214 <MX_GPIO_Init+0x98>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a17      	ldr	r2, [pc, #92]	@ (8002214 <MX_GPIO_Init+0x98>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <MX_GPIO_Init+0x98>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <MX_GPIO_Init+0x98>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a10      	ldr	r2, [pc, #64]	@ (8002214 <MX_GPIO_Init+0x98>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <MX_GPIO_Init+0x98>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, motor_3_Pin|motor_1_Pin|motor_2_Pin, GPIO_PIN_RESET);
 80021e6:	2200      	movs	r2, #0
 80021e8:	210e      	movs	r1, #14
 80021ea:	480b      	ldr	r0, [pc, #44]	@ (8002218 <MX_GPIO_Init+0x9c>)
 80021ec:	f000 fece 	bl	8002f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : motor_3_Pin motor_1_Pin motor_2_Pin */
  GPIO_InitStruct.Pin = motor_3_Pin|motor_1_Pin|motor_2_Pin;
 80021f0:	230e      	movs	r3, #14
 80021f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f4:	2301      	movs	r3, #1
 80021f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	4619      	mov	r1, r3
 8002206:	4804      	ldr	r0, [pc, #16]	@ (8002218 <MX_GPIO_Init+0x9c>)
 8002208:	f000 fd2c 	bl	8002c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800220c:	bf00      	nop
 800220e:	3720      	adds	r7, #32
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	40020800 	.word	0x40020800

0800221c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002220:	b672      	cpsid	i
}
 8002222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <Error_Handler+0x8>

08002228 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_MspInit+0x4c>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002236:	4a0f      	ldr	r2, [pc, #60]	@ (8002274 <HAL_MspInit+0x4c>)
 8002238:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800223c:	6453      	str	r3, [r2, #68]	@ 0x44
 800223e:	4b0d      	ldr	r3, [pc, #52]	@ (8002274 <HAL_MspInit+0x4c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002246:	607b      	str	r3, [r7, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_MspInit+0x4c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <HAL_MspInit+0x4c>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002258:	6413      	str	r3, [r2, #64]	@ 0x40
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_MspInit+0x4c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002266:	2007      	movs	r0, #7
 8002268:	f000 fc28 	bl	8002abc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	@ 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a19      	ldr	r2, [pc, #100]	@ (80022fc <HAL_I2C_MspInit+0x84>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12b      	bne.n	80022f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <HAL_I2C_MspInit+0x88>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a17      	ldr	r2, [pc, #92]	@ (8002300 <HAL_I2C_MspInit+0x88>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <HAL_I2C_MspInit+0x88>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022b6:	23c0      	movs	r3, #192	@ 0xc0
 80022b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ba:	2312      	movs	r3, #18
 80022bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022c6:	2304      	movs	r3, #4
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	480c      	ldr	r0, [pc, #48]	@ (8002304 <HAL_I2C_MspInit+0x8c>)
 80022d2:	f000 fcc7 	bl	8002c64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <HAL_I2C_MspInit+0x88>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	4a08      	ldr	r2, [pc, #32]	@ (8002300 <HAL_I2C_MspInit+0x88>)
 80022e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_I2C_MspInit+0x88>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80022f2:	bf00      	nop
 80022f4:	3728      	adds	r7, #40	@ 0x28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40005400 	.word	0x40005400
 8002300:	40023800 	.word	0x40023800
 8002304:	40020400 	.word	0x40020400

08002308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a29      	ldr	r2, [pc, #164]	@ (80023bc <HAL_TIM_Base_MspInit+0xb4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10e      	bne.n	8002338 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	4b28      	ldr	r3, [pc, #160]	@ (80023c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	4a27      	ldr	r2, [pc, #156]	@ (80023c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	6453      	str	r3, [r2, #68]	@ 0x44
 800232a:	4b25      	ldr	r3, [pc, #148]	@ (80023c0 <HAL_TIM_Base_MspInit+0xb8>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002336:	e03a      	b.n	80023ae <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002340:	d10e      	bne.n	8002360 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	4a1d      	ldr	r2, [pc, #116]	@ (80023c0 <HAL_TIM_Base_MspInit+0xb8>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6413      	str	r3, [r2, #64]	@ 0x40
 8002352:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
}
 800235e:	e026      	b.n	80023ae <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a17      	ldr	r2, [pc, #92]	@ (80023c4 <HAL_TIM_Base_MspInit+0xbc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d10e      	bne.n	8002388 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	4a13      	ldr	r2, [pc, #76]	@ (80023c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	6413      	str	r3, [r2, #64]	@ 0x40
 800237a:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_TIM_Base_MspInit+0xb8>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
}
 8002386:	e012      	b.n	80023ae <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0e      	ldr	r2, [pc, #56]	@ (80023c8 <HAL_TIM_Base_MspInit+0xc0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10d      	bne.n	80023ae <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <HAL_TIM_Base_MspInit+0xb8>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	4a09      	ldr	r2, [pc, #36]	@ (80023c0 <HAL_TIM_Base_MspInit+0xb8>)
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a2:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <HAL_TIM_Base_MspInit+0xb8>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
}
 80023ae:	bf00      	nop
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40010000 	.word	0x40010000
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40000400 	.word	0x40000400
 80023c8:	40000c00 	.word	0x40000c00

080023cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	@ 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ec:	d11e      	bne.n	800242c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	4b22      	ldr	r3, [pc, #136]	@ (800247c <HAL_TIM_MspPostInit+0xb0>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	4a21      	ldr	r2, [pc, #132]	@ (800247c <HAL_TIM_MspPostInit+0xb0>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fe:	4b1f      	ldr	r3, [pc, #124]	@ (800247c <HAL_TIM_MspPostInit+0xb0>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800240a:	2320      	movs	r3, #32
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800241a:	2301      	movs	r3, #1
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	4816      	ldr	r0, [pc, #88]	@ (8002480 <HAL_TIM_MspPostInit+0xb4>)
 8002426:	f000 fc1d 	bl	8002c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800242a:	e022      	b.n	8002472 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a14      	ldr	r2, [pc, #80]	@ (8002484 <HAL_TIM_MspPostInit+0xb8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d11d      	bne.n	8002472 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b10      	ldr	r3, [pc, #64]	@ (800247c <HAL_TIM_MspPostInit+0xb0>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	4a0f      	ldr	r2, [pc, #60]	@ (800247c <HAL_TIM_MspPostInit+0xb0>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6313      	str	r3, [r2, #48]	@ 0x30
 8002446:	4b0d      	ldr	r3, [pc, #52]	@ (800247c <HAL_TIM_MspPostInit+0xb0>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002452:	23c0      	movs	r3, #192	@ 0xc0
 8002454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002462:	2302      	movs	r3, #2
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4619      	mov	r1, r3
 800246c:	4804      	ldr	r0, [pc, #16]	@ (8002480 <HAL_TIM_MspPostInit+0xb4>)
 800246e:	f000 fbf9 	bl	8002c64 <HAL_GPIO_Init>
}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	@ 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40020000 	.word	0x40020000
 8002484:	40000400 	.word	0x40000400

08002488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	@ 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	@ (800251c <HAL_UART_MspInit+0x94>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d134      	bne.n	8002514 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002520 <HAL_UART_MspInit+0x98>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002520 <HAL_UART_MspInit+0x98>)
 80024b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ba:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <HAL_UART_MspInit+0x98>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <HAL_UART_MspInit+0x98>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a14      	ldr	r2, [pc, #80]	@ (8002520 <HAL_UART_MspInit+0x98>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <HAL_UART_MspInit+0x98>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024f4:	2308      	movs	r3, #8
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	4809      	ldr	r0, [pc, #36]	@ (8002524 <HAL_UART_MspInit+0x9c>)
 8002500:	f000 fbb0 	bl	8002c64 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	2034      	movs	r0, #52	@ 0x34
 800250a:	f000 fae2 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800250e:	2034      	movs	r0, #52	@ 0x34
 8002510:	f000 fafb 	bl	8002b0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8002514:	bf00      	nop
 8002516:	3728      	adds	r7, #40	@ 0x28
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40004c00 	.word	0x40004c00
 8002520:	40023800 	.word	0x40023800
 8002524:	40020800 	.word	0x40020800

08002528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <NMI_Handler+0x4>

08002530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <HardFault_Handler+0x4>

08002538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <MemManage_Handler+0x4>

08002540 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <BusFault_Handler+0x4>

08002548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <UsageFault_Handler+0x4>

08002550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257e:	f000 f989 	bl	8002894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <UART4_IRQHandler+0x10>)
 800258e:	f003 fac3 	bl	8005b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200003c8 	.word	0x200003c8

0800259c <ITM_SendChar>:
#define DEMCR        			*((volatile uint32_t*) 0xE000EDFCU )
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80025a6:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <ITM_SendChar+0x48>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a0e      	ldr	r2, [pc, #56]	@ (80025e4 <ITM_SendChar+0x48>)
 80025ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025b0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <ITM_SendChar+0x4c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a0c      	ldr	r2, [pc, #48]	@ (80025e8 <ITM_SendChar+0x4c>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80025be:	bf00      	nop
 80025c0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f8      	beq.n	80025c0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80025ce:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	6013      	str	r3, [r2, #0]
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000edfc 	.word	0xe000edfc
 80025e8:	e0000e00 	.word	0xe0000e00

080025ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return 1;
 80025f0:	2301      	movs	r3, #1
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <_kill>:

int _kill(int pid, int sig)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002606:	f005 fa95 	bl	8007b34 <__errno>
 800260a:	4603      	mov	r3, r0
 800260c:	2216      	movs	r2, #22
 800260e:	601a      	str	r2, [r3, #0]
  return -1;
 8002610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <_exit>:

void _exit (int status)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002624:	f04f 31ff 	mov.w	r1, #4294967295
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ffe7 	bl	80025fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800262e:	bf00      	nop
 8002630:	e7fd      	b.n	800262e <_exit+0x12>

08002632 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e00a      	b.n	800265a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002644:	f3af 8000 	nop.w
 8002648:	4601      	mov	r1, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	60ba      	str	r2, [r7, #8]
 8002650:	b2ca      	uxtb	r2, r1
 8002652:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3301      	adds	r3, #1
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	429a      	cmp	r2, r3
 8002660:	dbf0      	blt.n	8002644 <_read+0x12>
  }

  return len;
 8002662:	687b      	ldr	r3, [r7, #4]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	e009      	b.n	8002692 <_write+0x26>
  {
//    __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	60ba      	str	r2, [r7, #8]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff88 	bl	800259c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3301      	adds	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	429a      	cmp	r2, r3
 8002698:	dbf1      	blt.n	800267e <_write+0x12>
  }
  return len;
 800269a:	687b      	ldr	r3, [r7, #4]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_close>:

int _close(int file)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026cc:	605a      	str	r2, [r3, #4]
  return 0;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_isatty>:

int _isatty(int file)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026e4:	2301      	movs	r3, #1
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002714:	4a14      	ldr	r2, [pc, #80]	@ (8002768 <_sbrk+0x5c>)
 8002716:	4b15      	ldr	r3, [pc, #84]	@ (800276c <_sbrk+0x60>)
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002720:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <_sbrk+0x64>)
 800272a:	4a12      	ldr	r2, [pc, #72]	@ (8002774 <_sbrk+0x68>)
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272e:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	429a      	cmp	r2, r3
 800273a:	d207      	bcs.n	800274c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800273c:	f005 f9fa 	bl	8007b34 <__errno>
 8002740:	4603      	mov	r3, r0
 8002742:	220c      	movs	r2, #12
 8002744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	e009      	b.n	8002760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800274c:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002752:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <_sbrk+0x64>)
 800275c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275e:	68fb      	ldr	r3, [r7, #12]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20020000 	.word	0x20020000
 800276c:	00000400 	.word	0x00000400
 8002770:	20000444 	.word	0x20000444
 8002774:	20000598 	.word	0x20000598

08002778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <SystemInit+0x20>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002782:	4a05      	ldr	r2, [pc, #20]	@ (8002798 <SystemInit+0x20>)
 8002784:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002788:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800279c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027a0:	f7ff ffea 	bl	8002778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027a4:	480c      	ldr	r0, [pc, #48]	@ (80027d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027a6:	490d      	ldr	r1, [pc, #52]	@ (80027dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027a8:	4a0d      	ldr	r2, [pc, #52]	@ (80027e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027ac:	e002      	b.n	80027b4 <LoopCopyDataInit>

080027ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b2:	3304      	adds	r3, #4

080027b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b8:	d3f9      	bcc.n	80027ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ba:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027bc:	4c0a      	ldr	r4, [pc, #40]	@ (80027e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c0:	e001      	b.n	80027c6 <LoopFillZerobss>

080027c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c4:	3204      	adds	r2, #4

080027c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c8:	d3fb      	bcc.n	80027c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80027ca:	f005 f9b9 	bl	8007b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ce:	f7fe fdf3 	bl	80013b8 <main>
  bx  lr    
 80027d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027dc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80027e0:	0800b668 	.word	0x0800b668
  ldr r2, =_sbss
 80027e4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80027e8:	20000598 	.word	0x20000598

080027ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027ec:	e7fe      	b.n	80027ec <ADC_IRQHandler>
	...

080027f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002830 <HAL_Init+0x40>)
 80027fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0a      	ldr	r2, [pc, #40]	@ (8002830 <HAL_Init+0x40>)
 8002806:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800280a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800280c:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a07      	ldr	r2, [pc, #28]	@ (8002830 <HAL_Init+0x40>)
 8002812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002818:	2003      	movs	r0, #3
 800281a:	f000 f94f 	bl	8002abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281e:	2000      	movs	r0, #0
 8002820:	f000 f808 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002824:	f7ff fd00 	bl	8002228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <HAL_InitTick+0x54>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b12      	ldr	r3, [pc, #72]	@ (800288c <HAL_InitTick+0x58>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800284a:	fbb3 f3f1 	udiv	r3, r3, r1
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f967 	bl	8002b26 <HAL_SYSTICK_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00e      	b.n	8002880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d80a      	bhi.n	800287e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002868:	2200      	movs	r2, #0
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f000 f92f 	bl	8002ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002874:	4a06      	ldr	r2, [pc, #24]	@ (8002890 <HAL_InitTick+0x5c>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000014 	.word	0x20000014
 800288c:	2000001c 	.word	0x2000001c
 8002890:	20000018 	.word	0x20000018

08002894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_IncTick+0x20>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_IncTick+0x24>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <HAL_IncTick+0x24>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	2000001c 	.word	0x2000001c
 80028b8:	20000448 	.word	0x20000448

080028bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <HAL_GetTick+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000448 	.word	0x20000448

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff ffee 	bl	80028bc <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d005      	beq.n	80028fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <HAL_Delay+0x44>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028fa:	bf00      	nop
 80028fc:	f7ff ffde 	bl	80028bc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d8f7      	bhi.n	80028fc <HAL_Delay+0x28>
  {
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	2000001c 	.word	0x2000001c

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	@ (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	@ (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	@ (80029b8 <__NVIC_EnableIRQ+0x38>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	@ (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	@ 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	@ 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a88:	d301      	bcc.n	8002a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <SysTick_Config+0x40>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a96:	210f      	movs	r1, #15
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	f7ff ff8e 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa0:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <SysTick_Config+0x40>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <SysTick_Config+0x40>)
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e000e010 	.word	0xe000e010

08002abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff29 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae4:	f7ff ff3e 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	6978      	ldr	r0, [r7, #20]
 8002af0:	f7ff ff8e 	bl	8002a10 <NVIC_EncodePriority>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff5d 	bl	80029bc <__NVIC_SetPriority>
}
 8002b02:	bf00      	nop
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff31 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ffa2 	bl	8002a78 <SysTick_Config>
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7ff feb6 	bl	80028bc <HAL_GetTick>
 8002b50:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d008      	beq.n	8002b70 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2280      	movs	r2, #128	@ 0x80
 8002b62:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e052      	b.n	8002c16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0216 	bic.w	r2, r2, #22
 8002b7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b8e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d103      	bne.n	8002ba0 <HAL_DMA_Abort+0x62>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0208 	bic.w	r2, r2, #8
 8002bae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc0:	e013      	b.n	8002bea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc2:	f7ff fe7b 	bl	80028bc <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b05      	cmp	r3, #5
 8002bce:	d90c      	bls.n	8002bea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e015      	b.n	8002c16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e4      	bne.n	8002bc2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	223f      	movs	r2, #63	@ 0x3f
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d004      	beq.n	8002c3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2280      	movs	r2, #128	@ 0x80
 8002c36:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e00c      	b.n	8002c56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2205      	movs	r2, #5
 8002c40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	@ 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e165      	b.n	8002f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c80:	2201      	movs	r2, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	f040 8154 	bne.w	8002f46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d005      	beq.n	8002cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d130      	bne.n	8002d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cec:	2201      	movs	r2, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 0201 	and.w	r2, r3, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d017      	beq.n	8002d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d123      	bne.n	8002da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	08da      	lsrs	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3208      	adds	r2, #8
 8002d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	220f      	movs	r2, #15
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	08da      	lsrs	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3208      	adds	r2, #8
 8002da2:	69b9      	ldr	r1, [r7, #24]
 8002da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 0203 	and.w	r2, r3, #3
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80ae 	beq.w	8002f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b5d      	ldr	r3, [pc, #372]	@ (8002f64 <HAL_GPIO_Init+0x300>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f64 <HAL_GPIO_Init+0x300>)
 8002df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfa:	4b5a      	ldr	r3, [pc, #360]	@ (8002f64 <HAL_GPIO_Init+0x300>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e06:	4a58      	ldr	r2, [pc, #352]	@ (8002f68 <HAL_GPIO_Init+0x304>)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	089b      	lsrs	r3, r3, #2
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4f      	ldr	r2, [pc, #316]	@ (8002f6c <HAL_GPIO_Init+0x308>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d025      	beq.n	8002e7e <HAL_GPIO_Init+0x21a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4e      	ldr	r2, [pc, #312]	@ (8002f70 <HAL_GPIO_Init+0x30c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01f      	beq.n	8002e7a <HAL_GPIO_Init+0x216>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f74 <HAL_GPIO_Init+0x310>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d019      	beq.n	8002e76 <HAL_GPIO_Init+0x212>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4c      	ldr	r2, [pc, #304]	@ (8002f78 <HAL_GPIO_Init+0x314>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <HAL_GPIO_Init+0x20e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f7c <HAL_GPIO_Init+0x318>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00d      	beq.n	8002e6e <HAL_GPIO_Init+0x20a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4a      	ldr	r2, [pc, #296]	@ (8002f80 <HAL_GPIO_Init+0x31c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d007      	beq.n	8002e6a <HAL_GPIO_Init+0x206>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a49      	ldr	r2, [pc, #292]	@ (8002f84 <HAL_GPIO_Init+0x320>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d101      	bne.n	8002e66 <HAL_GPIO_Init+0x202>
 8002e62:	2306      	movs	r3, #6
 8002e64:	e00c      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e66:	2307      	movs	r3, #7
 8002e68:	e00a      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e6a:	2305      	movs	r3, #5
 8002e6c:	e008      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e6e:	2304      	movs	r3, #4
 8002e70:	e006      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e72:	2303      	movs	r3, #3
 8002e74:	e004      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_GPIO_Init+0x21c>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	f002 0203 	and.w	r2, r2, #3
 8002e86:	0092      	lsls	r2, r2, #2
 8002e88:	4093      	lsls	r3, r2
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e90:	4935      	ldr	r1, [pc, #212]	@ (8002f68 <HAL_GPIO_Init+0x304>)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec2:	4a31      	ldr	r2, [pc, #196]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eec:	4a26      	ldr	r2, [pc, #152]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef2:	4b25      	ldr	r3, [pc, #148]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f16:	4a1c      	ldr	r2, [pc, #112]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f40:	4a11      	ldr	r2, [pc, #68]	@ (8002f88 <HAL_GPIO_Init+0x324>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	f67f ae96 	bls.w	8002c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3724      	adds	r7, #36	@ 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	40020000 	.word	0x40020000
 8002f70:	40020400 	.word	0x40020400
 8002f74:	40020800 	.word	0x40020800
 8002f78:	40020c00 	.word	0x40020c00
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40021400 	.word	0x40021400
 8002f84:	40021800 	.word	0x40021800
 8002f88:	40013c00 	.word	0x40013c00

08002f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f9c:	787b      	ldrb	r3, [r7, #1]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa8:	e003      	b.n	8002fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002faa:	887b      	ldrh	r3, [r7, #2]
 8002fac:	041a      	lsls	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	619a      	str	r2, [r3, #24]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
	...

08002fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e12b      	b.n	800322a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d106      	bne.n	8002fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff f946 	bl	8002278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	@ 0x24
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003024:	f001 f908 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 8003028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	4a81      	ldr	r2, [pc, #516]	@ (8003234 <HAL_I2C_Init+0x274>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d807      	bhi.n	8003044 <HAL_I2C_Init+0x84>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a80      	ldr	r2, [pc, #512]	@ (8003238 <HAL_I2C_Init+0x278>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e006      	b.n	8003052 <HAL_I2C_Init+0x92>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4a7d      	ldr	r2, [pc, #500]	@ (800323c <HAL_I2C_Init+0x27c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	bf94      	ite	ls
 800304c:	2301      	movls	r3, #1
 800304e:	2300      	movhi	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e0e7      	b.n	800322a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a78      	ldr	r2, [pc, #480]	@ (8003240 <HAL_I2C_Init+0x280>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0c9b      	lsrs	r3, r3, #18
 8003064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	4a6a      	ldr	r2, [pc, #424]	@ (8003234 <HAL_I2C_Init+0x274>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d802      	bhi.n	8003094 <HAL_I2C_Init+0xd4>
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	3301      	adds	r3, #1
 8003092:	e009      	b.n	80030a8 <HAL_I2C_Init+0xe8>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	4a69      	ldr	r2, [pc, #420]	@ (8003244 <HAL_I2C_Init+0x284>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	3301      	adds	r3, #1
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	495c      	ldr	r1, [pc, #368]	@ (8003234 <HAL_I2C_Init+0x274>)
 80030c4:	428b      	cmp	r3, r1
 80030c6:	d819      	bhi.n	80030fc <HAL_I2C_Init+0x13c>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e59      	subs	r1, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d6:	1c59      	adds	r1, r3, #1
 80030d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030dc:	400b      	ands	r3, r1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_I2C_Init+0x138>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1e59      	subs	r1, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f6:	e051      	b.n	800319c <HAL_I2C_Init+0x1dc>
 80030f8:	2304      	movs	r3, #4
 80030fa:	e04f      	b.n	800319c <HAL_I2C_Init+0x1dc>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d111      	bne.n	8003128 <HAL_I2C_Init+0x168>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e012      	b.n	800314e <HAL_I2C_Init+0x18e>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	0099      	lsls	r1, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Init+0x196>
 8003152:	2301      	movs	r3, #1
 8003154:	e022      	b.n	800319c <HAL_I2C_Init+0x1dc>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10e      	bne.n	800317c <HAL_I2C_Init+0x1bc>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1e58      	subs	r0, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	440b      	add	r3, r1
 800316c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003170:	3301      	adds	r3, #1
 8003172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800317a:	e00f      	b.n	800319c <HAL_I2C_Init+0x1dc>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e58      	subs	r0, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	460b      	mov	r3, r1
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	0099      	lsls	r1, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	6809      	ldr	r1, [r1, #0]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6911      	ldr	r1, [r2, #16]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68d2      	ldr	r2, [r2, #12]
 80031d6:	4311      	orrs	r1, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	430b      	orrs	r3, r1
 80031de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	000186a0 	.word	0x000186a0
 8003238:	001e847f 	.word	0x001e847f
 800323c:	003d08ff 	.word	0x003d08ff
 8003240:	431bde83 	.word	0x431bde83
 8003244:	10624dd3 	.word	0x10624dd3

08003248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	461a      	mov	r2, r3
 8003254:	460b      	mov	r3, r1
 8003256:	817b      	strh	r3, [r7, #10]
 8003258:	4613      	mov	r3, r2
 800325a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800325c:	f7ff fb2e 	bl	80028bc <HAL_GetTick>
 8003260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	f040 80e0 	bne.w	8003430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2319      	movs	r3, #25
 8003276:	2201      	movs	r2, #1
 8003278:	4970      	ldr	r1, [pc, #448]	@ (800343c <HAL_I2C_Master_Transmit+0x1f4>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fc64 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003286:	2302      	movs	r3, #2
 8003288:	e0d3      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_I2C_Master_Transmit+0x50>
 8003294:	2302      	movs	r3, #2
 8003296:	e0cc      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d007      	beq.n	80032be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	@ 0x21
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2210      	movs	r2, #16
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	893a      	ldrh	r2, [r7, #8]
 80032ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a50      	ldr	r2, [pc, #320]	@ (8003440 <HAL_I2C_Master_Transmit+0x1f8>)
 80032fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003300:	8979      	ldrh	r1, [r7, #10]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 face 	bl	80038a8 <I2C_MasterRequestWrite>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e08d      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800332c:	e066      	b.n	80033fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	6a39      	ldr	r1, [r7, #32]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fd22 	bl	8003d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	2b04      	cmp	r3, #4
 8003344:	d107      	bne.n	8003356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e06b      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d11b      	bne.n	80033d0 <HAL_I2C_Master_Transmit+0x188>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d017      	beq.n	80033d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a4:	781a      	ldrb	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	6a39      	ldr	r1, [r7, #32]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fd19 	bl	8003e0c <I2C_WaitOnBTFFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00d      	beq.n	80033fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d107      	bne.n	80033f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e01a      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003400:	2b00      	cmp	r3, #0
 8003402:	d194      	bne.n	800332e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2302      	movs	r3, #2
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	00100002 	.word	0x00100002
 8003440:	ffff0000 	.word	0xffff0000

08003444 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	@ 0x30
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	461a      	mov	r2, r3
 8003450:	460b      	mov	r3, r1
 8003452:	817b      	strh	r3, [r7, #10]
 8003454:	4613      	mov	r3, r2
 8003456:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003458:	f7ff fa30 	bl	80028bc <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b20      	cmp	r3, #32
 8003468:	f040 8217 	bne.w	800389a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800346c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2319      	movs	r3, #25
 8003472:	2201      	movs	r2, #1
 8003474:	497c      	ldr	r1, [pc, #496]	@ (8003668 <HAL_I2C_Master_Receive+0x224>)
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fb66 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003482:	2302      	movs	r3, #2
 8003484:	e20a      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_I2C_Master_Receive+0x50>
 8003490:	2302      	movs	r3, #2
 8003492:	e203      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d007      	beq.n	80034ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2222      	movs	r2, #34	@ 0x22
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2210      	movs	r2, #16
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	893a      	ldrh	r2, [r7, #8]
 80034ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a5c      	ldr	r2, [pc, #368]	@ (800366c <HAL_I2C_Master_Receive+0x228>)
 80034fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034fc:	8979      	ldrh	r1, [r7, #10]
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fa52 	bl	80039ac <I2C_MasterRequestRead>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e1c4      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003516:	2b00      	cmp	r3, #0
 8003518:	d113      	bne.n	8003542 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	623b      	str	r3, [r7, #32]
 800352e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e198      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003546:	2b01      	cmp	r3, #1
 8003548:	d11b      	bne.n	8003582 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	61fb      	str	r3, [r7, #28]
 800356e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e178      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003586:	2b02      	cmp	r3, #2
 8003588:	d11b      	bne.n	80035c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003598:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	e158      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035e8:	e144      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	f200 80f1 	bhi.w	80037d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d123      	bne.n	8003644 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fc4b 	bl	8003e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e145      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003642:	e117      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003648:	2b02      	cmp	r3, #2
 800364a:	d14e      	bne.n	80036ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	2200      	movs	r2, #0
 8003654:	4906      	ldr	r1, [pc, #24]	@ (8003670 <HAL_I2C_Master_Receive+0x22c>)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fa76 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e11a      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
 8003666:	bf00      	nop
 8003668:	00100002 	.word	0x00100002
 800366c:	ffff0000 	.word	0xffff0000
 8003670:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d2:	3b01      	subs	r3, #1
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036e8:	e0c4      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f0:	2200      	movs	r2, #0
 80036f2:	496c      	ldr	r1, [pc, #432]	@ (80038a4 <HAL_I2C_Master_Receive+0x460>)
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fa27 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0cb      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	2200      	movs	r2, #0
 800374e:	4955      	ldr	r1, [pc, #340]	@ (80038a4 <HAL_I2C_Master_Receive+0x460>)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f9f9 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e09d      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037d4:	e04e      	b.n	8003874 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fb5e 	bl	8003e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e058      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b04      	cmp	r3, #4
 8003828:	d124      	bne.n	8003874 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382e:	2b03      	cmp	r3, #3
 8003830:	d107      	bne.n	8003842 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003840:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	f47f aeb6 	bne.w	80035ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	e000      	b.n	800389c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800389a:	2302      	movs	r3, #2
  }
}
 800389c:	4618      	mov	r0, r3
 800389e:	3728      	adds	r7, #40	@ 0x28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	00010004 	.word	0x00010004

080038a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	460b      	mov	r3, r1
 80038b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d006      	beq.n	80038d2 <I2C_MasterRequestWrite+0x2a>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d003      	beq.n	80038d2 <I2C_MasterRequestWrite+0x2a>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038d0:	d108      	bne.n	80038e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e00b      	b.n	80038fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	2b12      	cmp	r3, #18
 80038ea:	d107      	bne.n	80038fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f91d 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00d      	beq.n	8003930 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003922:	d103      	bne.n	800392c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800392a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e035      	b.n	800399c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003938:	d108      	bne.n	800394c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800393a:	897b      	ldrh	r3, [r7, #10]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003948:	611a      	str	r2, [r3, #16]
 800394a:	e01b      	b.n	8003984 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800394c:	897b      	ldrh	r3, [r7, #10]
 800394e:	11db      	asrs	r3, r3, #7
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f003 0306 	and.w	r3, r3, #6
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f063 030f 	orn	r3, r3, #15
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	490e      	ldr	r1, [pc, #56]	@ (80039a4 <I2C_MasterRequestWrite+0xfc>)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f966 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e010      	b.n	800399c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800397a:	897b      	ldrh	r3, [r7, #10]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4907      	ldr	r1, [pc, #28]	@ (80039a8 <I2C_MasterRequestWrite+0x100>)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f956 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	00010008 	.word	0x00010008
 80039a8:	00010002 	.word	0x00010002

080039ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	460b      	mov	r3, r1
 80039ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d006      	beq.n	80039e6 <I2C_MasterRequestRead+0x3a>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d003      	beq.n	80039e6 <I2C_MasterRequestRead+0x3a>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80039e4:	d108      	bne.n	80039f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e00b      	b.n	8003a10 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fc:	2b11      	cmp	r3, #17
 80039fe:	d107      	bne.n	8003a10 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f893 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a36:	d103      	bne.n	8003a40 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e079      	b.n	8003b38 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a4c:	d108      	bne.n	8003a60 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a4e:	897b      	ldrh	r3, [r7, #10]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	611a      	str	r2, [r3, #16]
 8003a5e:	e05f      	b.n	8003b20 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a60:	897b      	ldrh	r3, [r7, #10]
 8003a62:	11db      	asrs	r3, r3, #7
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0306 	and.w	r3, r3, #6
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	f063 030f 	orn	r3, r3, #15
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	4930      	ldr	r1, [pc, #192]	@ (8003b40 <I2C_MasterRequestRead+0x194>)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f8dc 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e054      	b.n	8003b38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a8e:	897b      	ldrh	r3, [r7, #10]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4929      	ldr	r1, [pc, #164]	@ (8003b44 <I2C_MasterRequestRead+0x198>)
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f8cc 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e044      	b.n	8003b38 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f831 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00d      	beq.n	8003b08 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003afa:	d103      	bne.n	8003b04 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b02:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e017      	b.n	8003b38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b08:	897b      	ldrh	r3, [r7, #10]
 8003b0a:	11db      	asrs	r3, r3, #7
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 0306 	and.w	r3, r3, #6
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f063 030e 	orn	r3, r3, #14
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4907      	ldr	r1, [pc, #28]	@ (8003b44 <I2C_MasterRequestRead+0x198>)
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f888 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3718      	adds	r7, #24
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	00010008 	.word	0x00010008
 8003b44:	00010002 	.word	0x00010002

08003b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b58:	e048      	b.n	8003bec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d044      	beq.n	8003bec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7fe feab 	bl	80028bc <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d139      	bne.n	8003bec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10d      	bne.n	8003b9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	43da      	mvns	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	e00c      	b.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d116      	bne.n	8003bec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e023      	b.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10d      	bne.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	e00c      	b.n	8003c2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d093      	beq.n	8003b5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c4a:	e071      	b.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c5a:	d123      	bne.n	8003ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	f043 0204 	orr.w	r2, r3, #4
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e067      	b.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d041      	beq.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cac:	f7fe fe06 	bl	80028bc <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d302      	bcc.n	8003cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d136      	bne.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10c      	bne.n	8003ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e00b      	b.n	8003cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	43da      	mvns	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e021      	b.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	0c1b      	lsrs	r3, r3, #16
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10c      	bne.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	43da      	mvns	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4013      	ands	r3, r2
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e00b      	b.n	8003d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf14      	ite	ne
 8003d66:	2301      	movne	r3, #1
 8003d68:	2300      	moveq	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f47f af6d 	bne.w	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d88:	e034      	b.n	8003df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f8e3 	bl	8003f56 <I2C_IsAcknowledgeFailed>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e034      	b.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d028      	beq.n	8003df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da2:	f7fe fd8b 	bl	80028bc <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d302      	bcc.n	8003db8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d11d      	bne.n	8003df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc2:	2b80      	cmp	r3, #128	@ 0x80
 8003dc4:	d016      	beq.n	8003df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e007      	b.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfe:	2b80      	cmp	r3, #128	@ 0x80
 8003e00:	d1c3      	bne.n	8003d8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e18:	e034      	b.n	8003e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f89b 	bl	8003f56 <I2C_IsAcknowledgeFailed>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e034      	b.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d028      	beq.n	8003e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e32:	f7fe fd43 	bl	80028bc <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d302      	bcc.n	8003e48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11d      	bne.n	8003e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d016      	beq.n	8003e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e007      	b.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d1c3      	bne.n	8003e1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ea8:	e049      	b.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d119      	bne.n	8003eec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0210 	mvn.w	r2, #16
 8003ec0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e030      	b.n	8003f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eec:	f7fe fce6 	bl	80028bc <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d302      	bcc.n	8003f02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d11d      	bne.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b40      	cmp	r3, #64	@ 0x40
 8003f0e:	d016      	beq.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	f043 0220 	orr.w	r2, r3, #32
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e007      	b.n	8003f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f48:	2b40      	cmp	r3, #64	@ 0x40
 8003f4a:	d1ae      	bne.n	8003eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f6c:	d11b      	bne.n	8003fa6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	f043 0204 	orr.w	r2, r3, #4
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	4b20      	ldr	r3, [pc, #128]	@ (8004044 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fce:	4b1d      	ldr	r3, [pc, #116]	@ (8004044 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003fda:	4b1b      	ldr	r3, [pc, #108]	@ (8004048 <HAL_PWREx_EnableOverDrive+0x94>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fe0:	f7fe fc6c 	bl	80028bc <HAL_GetTick>
 8003fe4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fe6:	e009      	b.n	8003ffc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fe8:	f7fe fc68 	bl	80028bc <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ff6:	d901      	bls.n	8003ffc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e01f      	b.n	800403c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ffc:	4b13      	ldr	r3, [pc, #76]	@ (800404c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004008:	d1ee      	bne.n	8003fe8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800400a:	4b11      	ldr	r3, [pc, #68]	@ (8004050 <HAL_PWREx_EnableOverDrive+0x9c>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004010:	f7fe fc54 	bl	80028bc <HAL_GetTick>
 8004014:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004016:	e009      	b.n	800402c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004018:	f7fe fc50 	bl	80028bc <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004026:	d901      	bls.n	800402c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e007      	b.n	800403c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800402c:	4b07      	ldr	r3, [pc, #28]	@ (800404c <HAL_PWREx_EnableOverDrive+0x98>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004034:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004038:	d1ee      	bne.n	8004018 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40023800 	.word	0x40023800
 8004048:	420e0040 	.word	0x420e0040
 800404c:	40007000 	.word	0x40007000
 8004050:	420e0044 	.word	0x420e0044

08004054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0cc      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b68      	ldr	r3, [pc, #416]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d90c      	bls.n	8004090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b65      	ldr	r3, [pc, #404]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407e:	4b63      	ldr	r3, [pc, #396]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d001      	beq.n	8004090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0b8      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d020      	beq.n	80040de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a8:	4b59      	ldr	r3, [pc, #356]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4a58      	ldr	r2, [pc, #352]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0308 	and.w	r3, r3, #8
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c0:	4b53      	ldr	r3, [pc, #332]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a52      	ldr	r2, [pc, #328]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040cc:	4b50      	ldr	r3, [pc, #320]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	494d      	ldr	r1, [pc, #308]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d044      	beq.n	8004174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d107      	bne.n	8004102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	4b47      	ldr	r3, [pc, #284]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d119      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e07f      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d003      	beq.n	8004112 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410e:	2b03      	cmp	r3, #3
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004112:	4b3f      	ldr	r3, [pc, #252]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e06f      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004122:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e067      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004132:	4b37      	ldr	r3, [pc, #220]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f023 0203 	bic.w	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4934      	ldr	r1, [pc, #208]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	4313      	orrs	r3, r2
 8004142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004144:	f7fe fbba 	bl	80028bc <HAL_GetTick>
 8004148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414a:	e00a      	b.n	8004162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800414c:	f7fe fbb6 	bl	80028bc <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e04f      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004162:	4b2b      	ldr	r3, [pc, #172]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 020c 	and.w	r2, r3, #12
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	429a      	cmp	r2, r3
 8004172:	d1eb      	bne.n	800414c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004174:	4b25      	ldr	r3, [pc, #148]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d20c      	bcs.n	800419c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b22      	ldr	r3, [pc, #136]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b20      	ldr	r3, [pc, #128]	@ (800420c <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e032      	b.n	8004202 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a8:	4b19      	ldr	r3, [pc, #100]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4916      	ldr	r1, [pc, #88]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041c6:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	490e      	ldr	r1, [pc, #56]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041da:	f000 f855 	bl	8004288 <HAL_RCC_GetSysClockFreq>
 80041de:	4602      	mov	r2, r0
 80041e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	490a      	ldr	r1, [pc, #40]	@ (8004214 <HAL_RCC_ClockConfig+0x1c0>)
 80041ec:	5ccb      	ldrb	r3, [r1, r3]
 80041ee:	fa22 f303 	lsr.w	r3, r2, r3
 80041f2:	4a09      	ldr	r2, [pc, #36]	@ (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041f6:	4b09      	ldr	r3, [pc, #36]	@ (800421c <HAL_RCC_ClockConfig+0x1c8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe fb1a 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40023c00 	.word	0x40023c00
 8004210:	40023800 	.word	0x40023800
 8004214:	0800b210 	.word	0x0800b210
 8004218:	20000014 	.word	0x20000014
 800421c:	20000018 	.word	0x20000018

08004220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <HAL_RCC_GetHCLKFreq+0x14>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000014 	.word	0x20000014

08004238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800423c:	f7ff fff0 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	0a9b      	lsrs	r3, r3, #10
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4903      	ldr	r1, [pc, #12]	@ (800425c <HAL_RCC_GetPCLK1Freq+0x24>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	0800b220 	.word	0x0800b220

08004260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004264:	f7ff ffdc 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	0b5b      	lsrs	r3, r3, #13
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4903      	ldr	r1, [pc, #12]	@ (8004284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40023800 	.word	0x40023800
 8004284:	0800b220 	.word	0x0800b220

08004288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800428c:	b0ae      	sub	sp, #184	@ 0xb8
 800428e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ae:	4bcb      	ldr	r3, [pc, #812]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x354>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	f200 8206 	bhi.w	80046c8 <HAL_RCC_GetSysClockFreq+0x440>
 80042bc:	a201      	add	r2, pc, #4	@ (adr r2, 80042c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	080046c9 	.word	0x080046c9
 80042cc:	080046c9 	.word	0x080046c9
 80042d0:	080046c9 	.word	0x080046c9
 80042d4:	08004301 	.word	0x08004301
 80042d8:	080046c9 	.word	0x080046c9
 80042dc:	080046c9 	.word	0x080046c9
 80042e0:	080046c9 	.word	0x080046c9
 80042e4:	08004309 	.word	0x08004309
 80042e8:	080046c9 	.word	0x080046c9
 80042ec:	080046c9 	.word	0x080046c9
 80042f0:	080046c9 	.word	0x080046c9
 80042f4:	080044f9 	.word	0x080044f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042f8:	4bb9      	ldr	r3, [pc, #740]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80042fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80042fe:	e1e7      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004300:	4bb8      	ldr	r3, [pc, #736]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004302:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004306:	e1e3      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004308:	4bb4      	ldr	r3, [pc, #720]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x354>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004314:	4bb1      	ldr	r3, [pc, #708]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d071      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004320:	4bae      	ldr	r3, [pc, #696]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	099b      	lsrs	r3, r3, #6
 8004326:	2200      	movs	r2, #0
 8004328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800432c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004330:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004338:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800433c:	2300      	movs	r3, #0
 800433e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004342:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004346:	4622      	mov	r2, r4
 8004348:	462b      	mov	r3, r5
 800434a:	f04f 0000 	mov.w	r0, #0
 800434e:	f04f 0100 	mov.w	r1, #0
 8004352:	0159      	lsls	r1, r3, #5
 8004354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004358:	0150      	lsls	r0, r2, #5
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4621      	mov	r1, r4
 8004360:	1a51      	subs	r1, r2, r1
 8004362:	6439      	str	r1, [r7, #64]	@ 0x40
 8004364:	4629      	mov	r1, r5
 8004366:	eb63 0301 	sbc.w	r3, r3, r1
 800436a:	647b      	str	r3, [r7, #68]	@ 0x44
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004378:	4649      	mov	r1, r9
 800437a:	018b      	lsls	r3, r1, #6
 800437c:	4641      	mov	r1, r8
 800437e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004382:	4641      	mov	r1, r8
 8004384:	018a      	lsls	r2, r1, #6
 8004386:	4641      	mov	r1, r8
 8004388:	1a51      	subs	r1, r2, r1
 800438a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800438c:	4649      	mov	r1, r9
 800438e:	eb63 0301 	sbc.w	r3, r3, r1
 8004392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80043a0:	4649      	mov	r1, r9
 80043a2:	00cb      	lsls	r3, r1, #3
 80043a4:	4641      	mov	r1, r8
 80043a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043aa:	4641      	mov	r1, r8
 80043ac:	00ca      	lsls	r2, r1, #3
 80043ae:	4610      	mov	r0, r2
 80043b0:	4619      	mov	r1, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	4622      	mov	r2, r4
 80043b6:	189b      	adds	r3, r3, r2
 80043b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043ba:	462b      	mov	r3, r5
 80043bc:	460a      	mov	r2, r1
 80043be:	eb42 0303 	adc.w	r3, r2, r3
 80043c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043d0:	4629      	mov	r1, r5
 80043d2:	024b      	lsls	r3, r1, #9
 80043d4:	4621      	mov	r1, r4
 80043d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043da:	4621      	mov	r1, r4
 80043dc:	024a      	lsls	r2, r1, #9
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80043f4:	f7fc fc68 	bl	8000cc8 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004402:	e067      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004404:	4b75      	ldr	r3, [pc, #468]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	099b      	lsrs	r3, r3, #6
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004410:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004414:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800441e:	2300      	movs	r3, #0
 8004420:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004422:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004426:	4622      	mov	r2, r4
 8004428:	462b      	mov	r3, r5
 800442a:	f04f 0000 	mov.w	r0, #0
 800442e:	f04f 0100 	mov.w	r1, #0
 8004432:	0159      	lsls	r1, r3, #5
 8004434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004438:	0150      	lsls	r0, r2, #5
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4621      	mov	r1, r4
 8004440:	1a51      	subs	r1, r2, r1
 8004442:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004444:	4629      	mov	r1, r5
 8004446:	eb63 0301 	sbc.w	r3, r3, r1
 800444a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004458:	4649      	mov	r1, r9
 800445a:	018b      	lsls	r3, r1, #6
 800445c:	4641      	mov	r1, r8
 800445e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004462:	4641      	mov	r1, r8
 8004464:	018a      	lsls	r2, r1, #6
 8004466:	4641      	mov	r1, r8
 8004468:	ebb2 0a01 	subs.w	sl, r2, r1
 800446c:	4649      	mov	r1, r9
 800446e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800447e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004486:	4692      	mov	sl, r2
 8004488:	469b      	mov	fp, r3
 800448a:	4623      	mov	r3, r4
 800448c:	eb1a 0303 	adds.w	r3, sl, r3
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	462b      	mov	r3, r5
 8004494:	eb4b 0303 	adc.w	r3, fp, r3
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80044a6:	4629      	mov	r1, r5
 80044a8:	028b      	lsls	r3, r1, #10
 80044aa:	4621      	mov	r1, r4
 80044ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044b0:	4621      	mov	r1, r4
 80044b2:	028a      	lsls	r2, r1, #10
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044bc:	2200      	movs	r2, #0
 80044be:	673b      	str	r3, [r7, #112]	@ 0x70
 80044c0:	677a      	str	r2, [r7, #116]	@ 0x74
 80044c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80044c6:	f7fc fbff 	bl	8000cc8 <__aeabi_uldivmod>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4613      	mov	r3, r2
 80044d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044d4:	4b41      	ldr	r3, [pc, #260]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x354>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	3301      	adds	r3, #1
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80044e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80044ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80044f6:	e0eb      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044f8:	4b38      	ldr	r3, [pc, #224]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x354>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004500:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004504:	4b35      	ldr	r3, [pc, #212]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d06b      	beq.n	80045e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004510:	4b32      	ldr	r3, [pc, #200]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x354>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	099b      	lsrs	r3, r3, #6
 8004516:	2200      	movs	r2, #0
 8004518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800451a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800451c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	663b      	str	r3, [r7, #96]	@ 0x60
 8004524:	2300      	movs	r3, #0
 8004526:	667b      	str	r3, [r7, #100]	@ 0x64
 8004528:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800452c:	4622      	mov	r2, r4
 800452e:	462b      	mov	r3, r5
 8004530:	f04f 0000 	mov.w	r0, #0
 8004534:	f04f 0100 	mov.w	r1, #0
 8004538:	0159      	lsls	r1, r3, #5
 800453a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800453e:	0150      	lsls	r0, r2, #5
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4621      	mov	r1, r4
 8004546:	1a51      	subs	r1, r2, r1
 8004548:	61b9      	str	r1, [r7, #24]
 800454a:	4629      	mov	r1, r5
 800454c:	eb63 0301 	sbc.w	r3, r3, r1
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800455e:	4659      	mov	r1, fp
 8004560:	018b      	lsls	r3, r1, #6
 8004562:	4651      	mov	r1, sl
 8004564:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004568:	4651      	mov	r1, sl
 800456a:	018a      	lsls	r2, r1, #6
 800456c:	4651      	mov	r1, sl
 800456e:	ebb2 0801 	subs.w	r8, r2, r1
 8004572:	4659      	mov	r1, fp
 8004574:	eb63 0901 	sbc.w	r9, r3, r1
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004584:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004588:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800458c:	4690      	mov	r8, r2
 800458e:	4699      	mov	r9, r3
 8004590:	4623      	mov	r3, r4
 8004592:	eb18 0303 	adds.w	r3, r8, r3
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	462b      	mov	r3, r5
 800459a:	eb49 0303 	adc.w	r3, r9, r3
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80045ac:	4629      	mov	r1, r5
 80045ae:	024b      	lsls	r3, r1, #9
 80045b0:	4621      	mov	r1, r4
 80045b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045b6:	4621      	mov	r1, r4
 80045b8:	024a      	lsls	r2, r1, #9
 80045ba:	4610      	mov	r0, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80045c2:	2200      	movs	r2, #0
 80045c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80045c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045cc:	f7fc fb7c 	bl	8000cc8 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4613      	mov	r3, r2
 80045d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045da:	e065      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x420>
 80045dc:	40023800 	.word	0x40023800
 80045e0:	00f42400 	.word	0x00f42400
 80045e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e8:	4b3d      	ldr	r3, [pc, #244]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	099b      	lsrs	r3, r3, #6
 80045ee:	2200      	movs	r2, #0
 80045f0:	4618      	mov	r0, r3
 80045f2:	4611      	mov	r1, r2
 80045f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80045fa:	2300      	movs	r3, #0
 80045fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80045fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004602:	4642      	mov	r2, r8
 8004604:	464b      	mov	r3, r9
 8004606:	f04f 0000 	mov.w	r0, #0
 800460a:	f04f 0100 	mov.w	r1, #0
 800460e:	0159      	lsls	r1, r3, #5
 8004610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004614:	0150      	lsls	r0, r2, #5
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4641      	mov	r1, r8
 800461c:	1a51      	subs	r1, r2, r1
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	4649      	mov	r1, r9
 8004622:	eb63 0301 	sbc.w	r3, r3, r1
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004634:	4659      	mov	r1, fp
 8004636:	018b      	lsls	r3, r1, #6
 8004638:	4651      	mov	r1, sl
 800463a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800463e:	4651      	mov	r1, sl
 8004640:	018a      	lsls	r2, r1, #6
 8004642:	4651      	mov	r1, sl
 8004644:	1a54      	subs	r4, r2, r1
 8004646:	4659      	mov	r1, fp
 8004648:	eb63 0501 	sbc.w	r5, r3, r1
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	00eb      	lsls	r3, r5, #3
 8004656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800465a:	00e2      	lsls	r2, r4, #3
 800465c:	4614      	mov	r4, r2
 800465e:	461d      	mov	r5, r3
 8004660:	4643      	mov	r3, r8
 8004662:	18e3      	adds	r3, r4, r3
 8004664:	603b      	str	r3, [r7, #0]
 8004666:	464b      	mov	r3, r9
 8004668:	eb45 0303 	adc.w	r3, r5, r3
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	e9d7 4500 	ldrd	r4, r5, [r7]
 800467a:	4629      	mov	r1, r5
 800467c:	028b      	lsls	r3, r1, #10
 800467e:	4621      	mov	r1, r4
 8004680:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004684:	4621      	mov	r1, r4
 8004686:	028a      	lsls	r2, r1, #10
 8004688:	4610      	mov	r0, r2
 800468a:	4619      	mov	r1, r3
 800468c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004690:	2200      	movs	r2, #0
 8004692:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004694:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004696:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800469a:	f7fc fb15 	bl	8000cc8 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4613      	mov	r3, r2
 80046a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80046a8:	4b0d      	ldr	r3, [pc, #52]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	0f1b      	lsrs	r3, r3, #28
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80046b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046c6:	e003      	b.n	80046d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046c8:	4b06      	ldr	r3, [pc, #24]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80046ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	37b8      	adds	r7, #184	@ 0xb8
 80046d8:	46bd      	mov	sp, r7
 80046da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	00f42400 	.word	0x00f42400

080046e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e28d      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8083 	beq.w	800480e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004708:	4b94      	ldr	r3, [pc, #592]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b04      	cmp	r3, #4
 8004712:	d019      	beq.n	8004748 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004714:	4b91      	ldr	r3, [pc, #580]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 030c 	and.w	r3, r3, #12
        || \
 800471c:	2b08      	cmp	r3, #8
 800471e:	d106      	bne.n	800472e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004720:	4b8e      	ldr	r3, [pc, #568]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004728:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800472c:	d00c      	beq.n	8004748 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800472e:	4b8b      	ldr	r3, [pc, #556]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004736:	2b0c      	cmp	r3, #12
 8004738:	d112      	bne.n	8004760 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800473a:	4b88      	ldr	r3, [pc, #544]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004742:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004746:	d10b      	bne.n	8004760 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004748:	4b84      	ldr	r3, [pc, #528]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d05b      	beq.n	800480c <HAL_RCC_OscConfig+0x124>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d157      	bne.n	800480c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e25a      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004768:	d106      	bne.n	8004778 <HAL_RCC_OscConfig+0x90>
 800476a:	4b7c      	ldr	r3, [pc, #496]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a7b      	ldr	r2, [pc, #492]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e01d      	b.n	80047b4 <HAL_RCC_OscConfig+0xcc>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0xb4>
 8004782:	4b76      	ldr	r3, [pc, #472]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a75      	ldr	r2, [pc, #468]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4b73      	ldr	r3, [pc, #460]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a72      	ldr	r2, [pc, #456]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e00b      	b.n	80047b4 <HAL_RCC_OscConfig+0xcc>
 800479c:	4b6f      	ldr	r3, [pc, #444]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a6e      	ldr	r2, [pc, #440]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 80047a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	4b6c      	ldr	r3, [pc, #432]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a6b      	ldr	r2, [pc, #428]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 80047ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d013      	beq.n	80047e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fe f87e 	bl	80028bc <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c4:	f7fe f87a 	bl	80028bc <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	@ 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e21f      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	4b61      	ldr	r3, [pc, #388]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0xdc>
 80047e2:	e014      	b.n	800480e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fe f86a 	bl	80028bc <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ec:	f7fe f866 	bl	80028bc <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	@ 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e20b      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fe:	4b57      	ldr	r3, [pc, #348]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x104>
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d06f      	beq.n	80048fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800481a:	4b50      	ldr	r3, [pc, #320]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b00      	cmp	r3, #0
 8004824:	d017      	beq.n	8004856 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004826:	4b4d      	ldr	r3, [pc, #308]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
        || \
 800482e:	2b08      	cmp	r3, #8
 8004830:	d105      	bne.n	800483e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004832:	4b4a      	ldr	r3, [pc, #296]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483e:	4b47      	ldr	r3, [pc, #284]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004846:	2b0c      	cmp	r3, #12
 8004848:	d11c      	bne.n	8004884 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b44      	ldr	r3, [pc, #272]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d116      	bne.n	8004884 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	4b41      	ldr	r3, [pc, #260]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_RCC_OscConfig+0x186>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e1d3      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486e:	4b3b      	ldr	r3, [pc, #236]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4937      	ldr	r1, [pc, #220]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	e03a      	b.n	80048fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800488c:	4b34      	ldr	r3, [pc, #208]	@ (8004960 <HAL_RCC_OscConfig+0x278>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7fe f813 	bl	80028bc <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800489a:	f7fe f80f 	bl	80028bc <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e1b4      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ac:	4b2b      	ldr	r3, [pc, #172]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b8:	4b28      	ldr	r3, [pc, #160]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4925      	ldr	r1, [pc, #148]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
 80048cc:	e015      	b.n	80048fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ce:	4b24      	ldr	r3, [pc, #144]	@ (8004960 <HAL_RCC_OscConfig+0x278>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fd fff2 	bl	80028bc <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048dc:	f7fd ffee 	bl	80028bc <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e193      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ee:	4b1b      	ldr	r3, [pc, #108]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d036      	beq.n	8004974 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490e:	4b15      	ldr	r3, [pc, #84]	@ (8004964 <HAL_RCC_OscConfig+0x27c>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7fd ffd2 	bl	80028bc <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800491c:	f7fd ffce 	bl	80028bc <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e173      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492e:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x234>
 800493a:	e01b      	b.n	8004974 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493c:	4b09      	ldr	r3, [pc, #36]	@ (8004964 <HAL_RCC_OscConfig+0x27c>)
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004942:	f7fd ffbb 	bl	80028bc <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	e00e      	b.n	8004968 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800494a:	f7fd ffb7 	bl	80028bc <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d907      	bls.n	8004968 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e15c      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
 800495c:	40023800 	.word	0x40023800
 8004960:	42470000 	.word	0x42470000
 8004964:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004968:	4b8a      	ldr	r3, [pc, #552]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 800496a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ea      	bne.n	800494a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8097 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004982:	2300      	movs	r3, #0
 8004984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004986:	4b83      	ldr	r3, [pc, #524]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	4b7f      	ldr	r3, [pc, #508]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 800499c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049a2:	4b7c      	ldr	r3, [pc, #496]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	4b79      	ldr	r3, [pc, #484]	@ (8004b98 <HAL_RCC_OscConfig+0x4b0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d118      	bne.n	80049f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049be:	4b76      	ldr	r3, [pc, #472]	@ (8004b98 <HAL_RCC_OscConfig+0x4b0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a75      	ldr	r2, [pc, #468]	@ (8004b98 <HAL_RCC_OscConfig+0x4b0>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ca:	f7fd ff77 	bl	80028bc <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d2:	f7fd ff73 	bl	80028bc <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e118      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e4:	4b6c      	ldr	r3, [pc, #432]	@ (8004b98 <HAL_RCC_OscConfig+0x4b0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d106      	bne.n	8004a06 <HAL_RCC_OscConfig+0x31e>
 80049f8:	4b66      	ldr	r3, [pc, #408]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fc:	4a65      	ldr	r2, [pc, #404]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a04:	e01c      	b.n	8004a40 <HAL_RCC_OscConfig+0x358>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b05      	cmp	r3, #5
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x340>
 8004a0e:	4b61      	ldr	r3, [pc, #388]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a12:	4a60      	ldr	r2, [pc, #384]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004a14:	f043 0304 	orr.w	r3, r3, #4
 8004a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a1a:	4b5e      	ldr	r3, [pc, #376]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	4a5d      	ldr	r2, [pc, #372]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a26:	e00b      	b.n	8004a40 <HAL_RCC_OscConfig+0x358>
 8004a28:	4b5a      	ldr	r3, [pc, #360]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2c:	4a59      	ldr	r2, [pc, #356]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a34:	4b57      	ldr	r3, [pc, #348]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a38:	4a56      	ldr	r2, [pc, #344]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004a3a:	f023 0304 	bic.w	r3, r3, #4
 8004a3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d015      	beq.n	8004a74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a48:	f7fd ff38 	bl	80028bc <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a50:	f7fd ff34 	bl	80028bc <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e0d7      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a66:	4b4b      	ldr	r3, [pc, #300]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0ee      	beq.n	8004a50 <HAL_RCC_OscConfig+0x368>
 8004a72:	e014      	b.n	8004a9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fd ff22 	bl	80028bc <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7c:	f7fd ff1e 	bl	80028bc <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e0c1      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a92:	4b40      	ldr	r3, [pc, #256]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ee      	bne.n	8004a7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	4a3a      	ldr	r2, [pc, #232]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80ad 	beq.w	8004c14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aba:	4b36      	ldr	r3, [pc, #216]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d060      	beq.n	8004b88 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d145      	bne.n	8004b5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ace:	4b33      	ldr	r3, [pc, #204]	@ (8004b9c <HAL_RCC_OscConfig+0x4b4>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fd fef2 	bl	80028bc <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004adc:	f7fd feee 	bl	80028bc <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e093      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aee:	4b29      	ldr	r3, [pc, #164]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69da      	ldr	r2, [r3, #28]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	3b01      	subs	r3, #1
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b24:	071b      	lsls	r3, r3, #28
 8004b26:	491b      	ldr	r1, [pc, #108]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b9c <HAL_RCC_OscConfig+0x4b4>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b32:	f7fd fec3 	bl	80028bc <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fd febf 	bl	80028bc <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e064      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4c:	4b11      	ldr	r3, [pc, #68]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0f0      	beq.n	8004b3a <HAL_RCC_OscConfig+0x452>
 8004b58:	e05c      	b.n	8004c14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5a:	4b10      	ldr	r3, [pc, #64]	@ (8004b9c <HAL_RCC_OscConfig+0x4b4>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fd feac 	bl	80028bc <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fd fea8 	bl	80028bc <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e04d      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7a:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <HAL_RCC_OscConfig+0x4ac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x480>
 8004b86:	e045      	b.n	8004c14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e040      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
 8004b94:	40023800 	.word	0x40023800
 8004b98:	40007000 	.word	0x40007000
 8004b9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8004c20 <HAL_RCC_OscConfig+0x538>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d030      	beq.n	8004c10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d129      	bne.n	8004c10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d122      	bne.n	8004c10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d119      	bne.n	8004c10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	3b01      	subs	r3, #1
 8004bea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d10f      	bne.n	8004c10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800

08004c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e041      	b.n	8004cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fd fb5c 	bl	8002308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	4619      	mov	r1, r3
 8004c62:	4610      	mov	r0, r2
 8004c64:	f000 fad8 	bl	8005218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e041      	b.n	8004d58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f839 	bl	8004d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f000 fa89 	bl	8005218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d109      	bne.n	8004d98 <HAL_TIM_PWM_Start+0x24>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	bf14      	ite	ne
 8004d90:	2301      	movne	r3, #1
 8004d92:	2300      	moveq	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	e022      	b.n	8004dde <HAL_TIM_PWM_Start+0x6a>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d109      	bne.n	8004db2 <HAL_TIM_PWM_Start+0x3e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	bf14      	ite	ne
 8004daa:	2301      	movne	r3, #1
 8004dac:	2300      	moveq	r3, #0
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	e015      	b.n	8004dde <HAL_TIM_PWM_Start+0x6a>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d109      	bne.n	8004dcc <HAL_TIM_PWM_Start+0x58>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	bf14      	ite	ne
 8004dc4:	2301      	movne	r3, #1
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e008      	b.n	8004dde <HAL_TIM_PWM_Start+0x6a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e07c      	b.n	8004ee0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_PWM_Start+0x82>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df4:	e013      	b.n	8004e1e <HAL_TIM_PWM_Start+0xaa>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_PWM_Start+0x92>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e04:	e00b      	b.n	8004e1e <HAL_TIM_PWM_Start+0xaa>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_PWM_Start+0xa2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e14:	e003      	b.n	8004e1e <HAL_TIM_PWM_Start+0xaa>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2201      	movs	r2, #1
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fcec 	bl	8005804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee8 <HAL_TIM_PWM_Start+0x174>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_TIM_PWM_Start+0xcc>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8004eec <HAL_TIM_PWM_Start+0x178>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d101      	bne.n	8004e44 <HAL_TIM_PWM_Start+0xd0>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <HAL_TIM_PWM_Start+0xd2>
 8004e44:	2300      	movs	r3, #0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a22      	ldr	r2, [pc, #136]	@ (8004ee8 <HAL_TIM_PWM_Start+0x174>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x136>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6c:	d01d      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x136>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef0 <HAL_TIM_PWM_Start+0x17c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d018      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x136>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ef4 <HAL_TIM_PWM_Start+0x180>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x136>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef8 <HAL_TIM_PWM_Start+0x184>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x136>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a16      	ldr	r2, [pc, #88]	@ (8004eec <HAL_TIM_PWM_Start+0x178>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x136>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a18      	ldr	r2, [pc, #96]	@ (8004efc <HAL_TIM_PWM_Start+0x188>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x136>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a16      	ldr	r2, [pc, #88]	@ (8004f00 <HAL_TIM_PWM_Start+0x18c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d111      	bne.n	8004ece <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b06      	cmp	r3, #6
 8004eba:	d010      	beq.n	8004ede <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ecc:	e007      	b.n	8004ede <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40010400 	.word	0x40010400
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40000c00 	.word	0x40000c00
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40001800 	.word	0x40001800

08004f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e0ae      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b0c      	cmp	r3, #12
 8004f2e:	f200 809f 	bhi.w	8005070 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f32:	a201      	add	r2, pc, #4	@ (adr r2, 8004f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f38:	08004f6d 	.word	0x08004f6d
 8004f3c:	08005071 	.word	0x08005071
 8004f40:	08005071 	.word	0x08005071
 8004f44:	08005071 	.word	0x08005071
 8004f48:	08004fad 	.word	0x08004fad
 8004f4c:	08005071 	.word	0x08005071
 8004f50:	08005071 	.word	0x08005071
 8004f54:	08005071 	.word	0x08005071
 8004f58:	08004fef 	.word	0x08004fef
 8004f5c:	08005071 	.word	0x08005071
 8004f60:	08005071 	.word	0x08005071
 8004f64:	08005071 	.word	0x08005071
 8004f68:	0800502f 	.word	0x0800502f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 f9fc 	bl	8005370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0208 	orr.w	r2, r2, #8
 8004f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0204 	bic.w	r2, r2, #4
 8004f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6999      	ldr	r1, [r3, #24]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	619a      	str	r2, [r3, #24]
      break;
 8004faa:	e064      	b.n	8005076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fa4c 	bl	8005450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6999      	ldr	r1, [r3, #24]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	021a      	lsls	r2, r3, #8
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	619a      	str	r2, [r3, #24]
      break;
 8004fec:	e043      	b.n	8005076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 faa1 	bl	800553c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0208 	orr.w	r2, r2, #8
 8005008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0204 	bic.w	r2, r2, #4
 8005018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69d9      	ldr	r1, [r3, #28]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	61da      	str	r2, [r3, #28]
      break;
 800502c:	e023      	b.n	8005076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	4618      	mov	r0, r3
 8005036:	f000 faf5 	bl	8005624 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69d9      	ldr	r1, [r3, #28]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	021a      	lsls	r2, r3, #8
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	61da      	str	r2, [r3, #28]
      break;
 800506e:	e002      	b.n	8005076 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	75fb      	strb	r3, [r7, #23]
      break;
 8005074:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800507e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_TIM_ConfigClockSource+0x1c>
 80050a0:	2302      	movs	r3, #2
 80050a2:	e0b4      	b.n	800520e <HAL_TIM_ConfigClockSource+0x186>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050dc:	d03e      	beq.n	800515c <HAL_TIM_ConfigClockSource+0xd4>
 80050de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050e2:	f200 8087 	bhi.w	80051f4 <HAL_TIM_ConfigClockSource+0x16c>
 80050e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ea:	f000 8086 	beq.w	80051fa <HAL_TIM_ConfigClockSource+0x172>
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f2:	d87f      	bhi.n	80051f4 <HAL_TIM_ConfigClockSource+0x16c>
 80050f4:	2b70      	cmp	r3, #112	@ 0x70
 80050f6:	d01a      	beq.n	800512e <HAL_TIM_ConfigClockSource+0xa6>
 80050f8:	2b70      	cmp	r3, #112	@ 0x70
 80050fa:	d87b      	bhi.n	80051f4 <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b60      	cmp	r3, #96	@ 0x60
 80050fe:	d050      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005100:	2b60      	cmp	r3, #96	@ 0x60
 8005102:	d877      	bhi.n	80051f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b50      	cmp	r3, #80	@ 0x50
 8005106:	d03c      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0xfa>
 8005108:	2b50      	cmp	r3, #80	@ 0x50
 800510a:	d873      	bhi.n	80051f4 <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b40      	cmp	r3, #64	@ 0x40
 800510e:	d058      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005110:	2b40      	cmp	r3, #64	@ 0x40
 8005112:	d86f      	bhi.n	80051f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b30      	cmp	r3, #48	@ 0x30
 8005116:	d064      	beq.n	80051e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005118:	2b30      	cmp	r3, #48	@ 0x30
 800511a:	d86b      	bhi.n	80051f4 <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	2b20      	cmp	r3, #32
 800511e:	d060      	beq.n	80051e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005120:	2b20      	cmp	r3, #32
 8005122:	d867      	bhi.n	80051f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d05c      	beq.n	80051e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005128:	2b10      	cmp	r3, #16
 800512a:	d05a      	beq.n	80051e2 <HAL_TIM_ConfigClockSource+0x15a>
 800512c:	e062      	b.n	80051f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800513e:	f000 fb41 	bl	80057c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	609a      	str	r2, [r3, #8]
      break;
 800515a:	e04f      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800516c:	f000 fb2a 	bl	80057c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800517e:	609a      	str	r2, [r3, #8]
      break;
 8005180:	e03c      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800518e:	461a      	mov	r2, r3
 8005190:	f000 fa9e 	bl	80056d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2150      	movs	r1, #80	@ 0x50
 800519a:	4618      	mov	r0, r3
 800519c:	f000 faf7 	bl	800578e <TIM_ITRx_SetConfig>
      break;
 80051a0:	e02c      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ae:	461a      	mov	r2, r3
 80051b0:	f000 fabd 	bl	800572e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2160      	movs	r1, #96	@ 0x60
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fae7 	bl	800578e <TIM_ITRx_SetConfig>
      break;
 80051c0:	e01c      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ce:	461a      	mov	r2, r3
 80051d0:	f000 fa7e 	bl	80056d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2140      	movs	r1, #64	@ 0x40
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fad7 	bl	800578e <TIM_ITRx_SetConfig>
      break;
 80051e0:	e00c      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	4610      	mov	r0, r2
 80051ee:	f000 face 	bl	800578e <TIM_ITRx_SetConfig>
      break;
 80051f2:	e003      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	73fb      	strb	r3, [r7, #15]
      break;
 80051f8:	e000      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800520c:	7bfb      	ldrb	r3, [r7, #15]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a46      	ldr	r2, [pc, #280]	@ (8005344 <TIM_Base_SetConfig+0x12c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d013      	beq.n	8005258 <TIM_Base_SetConfig+0x40>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005236:	d00f      	beq.n	8005258 <TIM_Base_SetConfig+0x40>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a43      	ldr	r2, [pc, #268]	@ (8005348 <TIM_Base_SetConfig+0x130>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00b      	beq.n	8005258 <TIM_Base_SetConfig+0x40>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a42      	ldr	r2, [pc, #264]	@ (800534c <TIM_Base_SetConfig+0x134>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d007      	beq.n	8005258 <TIM_Base_SetConfig+0x40>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a41      	ldr	r2, [pc, #260]	@ (8005350 <TIM_Base_SetConfig+0x138>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_Base_SetConfig+0x40>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a40      	ldr	r2, [pc, #256]	@ (8005354 <TIM_Base_SetConfig+0x13c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d108      	bne.n	800526a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a35      	ldr	r2, [pc, #212]	@ (8005344 <TIM_Base_SetConfig+0x12c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d02b      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005278:	d027      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a32      	ldr	r2, [pc, #200]	@ (8005348 <TIM_Base_SetConfig+0x130>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d023      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a31      	ldr	r2, [pc, #196]	@ (800534c <TIM_Base_SetConfig+0x134>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01f      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a30      	ldr	r2, [pc, #192]	@ (8005350 <TIM_Base_SetConfig+0x138>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01b      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a2f      	ldr	r2, [pc, #188]	@ (8005354 <TIM_Base_SetConfig+0x13c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d017      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a2e      	ldr	r2, [pc, #184]	@ (8005358 <TIM_Base_SetConfig+0x140>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a2d      	ldr	r2, [pc, #180]	@ (800535c <TIM_Base_SetConfig+0x144>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00f      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a2c      	ldr	r2, [pc, #176]	@ (8005360 <TIM_Base_SetConfig+0x148>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d00b      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005364 <TIM_Base_SetConfig+0x14c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d007      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005368 <TIM_Base_SetConfig+0x150>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d003      	beq.n	80052ca <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a29      	ldr	r2, [pc, #164]	@ (800536c <TIM_Base_SetConfig+0x154>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d108      	bne.n	80052dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a10      	ldr	r2, [pc, #64]	@ (8005344 <TIM_Base_SetConfig+0x12c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_Base_SetConfig+0xf8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a12      	ldr	r2, [pc, #72]	@ (8005354 <TIM_Base_SetConfig+0x13c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d103      	bne.n	8005318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b01      	cmp	r3, #1
 8005328:	d105      	bne.n	8005336 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f023 0201 	bic.w	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	611a      	str	r2, [r3, #16]
  }
}
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40010000 	.word	0x40010000
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800
 8005350:	40000c00 	.word	0x40000c00
 8005354:	40010400 	.word	0x40010400
 8005358:	40014000 	.word	0x40014000
 800535c:	40014400 	.word	0x40014400
 8005360:	40014800 	.word	0x40014800
 8005364:	40001800 	.word	0x40001800
 8005368:	40001c00 	.word	0x40001c00
 800536c:	40002000 	.word	0x40002000

08005370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f023 0201 	bic.w	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0303 	bic.w	r3, r3, #3
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f023 0302 	bic.w	r3, r3, #2
 80053b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a20      	ldr	r2, [pc, #128]	@ (8005448 <TIM_OC1_SetConfig+0xd8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d003      	beq.n	80053d4 <TIM_OC1_SetConfig+0x64>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a1f      	ldr	r2, [pc, #124]	@ (800544c <TIM_OC1_SetConfig+0xdc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d10c      	bne.n	80053ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f023 0308 	bic.w	r3, r3, #8
 80053da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f023 0304 	bic.w	r3, r3, #4
 80053ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a15      	ldr	r2, [pc, #84]	@ (8005448 <TIM_OC1_SetConfig+0xd8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_OC1_SetConfig+0x8e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a14      	ldr	r2, [pc, #80]	@ (800544c <TIM_OC1_SetConfig+0xdc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d111      	bne.n	8005422 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800540c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	621a      	str	r2, [r3, #32]
}
 800543c:	bf00      	nop
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	40010000 	.word	0x40010000
 800544c:	40010400 	.word	0x40010400

08005450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f023 0210 	bic.w	r2, r3, #16
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800547e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0320 	bic.w	r3, r3, #32
 800549a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a22      	ldr	r2, [pc, #136]	@ (8005534 <TIM_OC2_SetConfig+0xe4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_OC2_SetConfig+0x68>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a21      	ldr	r2, [pc, #132]	@ (8005538 <TIM_OC2_SetConfig+0xe8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d10d      	bne.n	80054d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a17      	ldr	r2, [pc, #92]	@ (8005534 <TIM_OC2_SetConfig+0xe4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC2_SetConfig+0x94>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a16      	ldr	r2, [pc, #88]	@ (8005538 <TIM_OC2_SetConfig+0xe8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d113      	bne.n	800550c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	621a      	str	r2, [r3, #32]
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40010000 	.word	0x40010000
 8005538:	40010400 	.word	0x40010400

0800553c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0303 	bic.w	r3, r3, #3
 8005572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a21      	ldr	r2, [pc, #132]	@ (800561c <TIM_OC3_SetConfig+0xe0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d003      	beq.n	80055a2 <TIM_OC3_SetConfig+0x66>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a20      	ldr	r2, [pc, #128]	@ (8005620 <TIM_OC3_SetConfig+0xe4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d10d      	bne.n	80055be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	021b      	lsls	r3, r3, #8
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a16      	ldr	r2, [pc, #88]	@ (800561c <TIM_OC3_SetConfig+0xe0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_OC3_SetConfig+0x92>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a15      	ldr	r2, [pc, #84]	@ (8005620 <TIM_OC3_SetConfig+0xe4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d113      	bne.n	80055f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	621a      	str	r2, [r3, #32]
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40010000 	.word	0x40010000
 8005620:	40010400 	.word	0x40010400

08005624 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800565a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800566e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	031b      	lsls	r3, r3, #12
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a12      	ldr	r2, [pc, #72]	@ (80056c8 <TIM_OC4_SetConfig+0xa4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d003      	beq.n	800568c <TIM_OC4_SetConfig+0x68>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a11      	ldr	r2, [pc, #68]	@ (80056cc <TIM_OC4_SetConfig+0xa8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d109      	bne.n	80056a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005692:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	019b      	lsls	r3, r3, #6
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	621a      	str	r2, [r3, #32]
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40010400 	.word	0x40010400

080056d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	f023 0201 	bic.w	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f023 030a 	bic.w	r3, r3, #10
 800570c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4313      	orrs	r3, r2
 8005714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800572e:	b480      	push	{r7}
 8005730:	b087      	sub	sp, #28
 8005732:	af00      	add	r7, sp, #0
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	f023 0210 	bic.w	r2, r3, #16
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	031b      	lsls	r3, r3, #12
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800576a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	011b      	lsls	r3, r3, #4
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	621a      	str	r2, [r3, #32]
}
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f043 0307 	orr.w	r3, r3, #7
 80057b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	609a      	str	r2, [r3, #8]
}
 80057b8:	bf00      	nop
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	021a      	lsls	r2, r3, #8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	431a      	orrs	r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	609a      	str	r2, [r3, #8]
}
 80057f8:	bf00      	nop
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	2201      	movs	r2, #1
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1a      	ldr	r2, [r3, #32]
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	43db      	mvns	r3, r3
 8005826:	401a      	ands	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1a      	ldr	r2, [r3, #32]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	fa01 f303 	lsl.w	r3, r1, r3
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	621a      	str	r2, [r3, #32]
}
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
	...

08005850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005864:	2302      	movs	r3, #2
 8005866:	e05a      	b.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a21      	ldr	r2, [pc, #132]	@ (800592c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d022      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b4:	d01d      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d018      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00e      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a18      	ldr	r2, [pc, #96]	@ (800593c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d009      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a17      	ldr	r2, [pc, #92]	@ (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d004      	beq.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a15      	ldr	r2, [pc, #84]	@ (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10c      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4313      	orrs	r3, r2
 8005902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40010000 	.word	0x40010000
 8005930:	40000400 	.word	0x40000400
 8005934:	40000800 	.word	0x40000800
 8005938:	40000c00 	.word	0x40000c00
 800593c:	40010400 	.word	0x40010400
 8005940:	40014000 	.word	0x40014000
 8005944:	40001800 	.word	0x40001800

08005948 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e042      	b.n	80059e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fc fd8a 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2224      	movs	r2, #36	@ 0x24
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800598a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fd75 	bl	800647c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	@ 0x28
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	f040 8081 	bne.w	8005b0c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_UART_Receive+0x2e>
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e079      	b.n	8005b0e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2222      	movs	r2, #34	@ 0x22
 8005a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a2e:	f7fc ff45 	bl	80028bc <HAL_GetTick>
 8005a32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	88fa      	ldrh	r2, [r7, #6]
 8005a3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a48:	d108      	bne.n	8005a5c <HAL_UART_Receive+0x74>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d104      	bne.n	8005a5c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	e003      	b.n	8005a64 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005a64:	e047      	b.n	8005af6 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2120      	movs	r1, #32
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fb0d 	bl	8006090 <UART_WaitOnFlagUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e042      	b.n	8005b0e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10c      	bne.n	8005aa8 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	3302      	adds	r3, #2
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	e01f      	b.n	8005ae8 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab0:	d007      	beq.n	8005ac2 <HAL_UART_Receive+0xda>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <HAL_UART_Receive+0xe8>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e008      	b.n	8005ae2 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1b2      	bne.n	8005a66 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e000      	b.n	8005b0e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005b0c:	2302      	movs	r3, #2
  }
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b0ba      	sub	sp, #232	@ 0xe8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10f      	bne.n	8005b7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d009      	beq.n	8005b7e <HAL_UART_IRQHandler+0x66>
 8005b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fbc2 	bl	8006300 <UART_Receive_IT>
      return;
 8005b7c:	e25b      	b.n	8006036 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 80de 	beq.w	8005d44 <HAL_UART_IRQHandler+0x22c>
 8005b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b98:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 80d1 	beq.w	8005d44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <HAL_UART_IRQHandler+0xae>
 8005bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	f043 0201 	orr.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <HAL_UART_IRQHandler+0xd2>
 8005bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	f043 0202 	orr.w	r2, r3, #2
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <HAL_UART_IRQHandler+0xf6>
 8005bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c06:	f043 0204 	orr.w	r2, r3, #4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d011      	beq.n	8005c3e <HAL_UART_IRQHandler+0x126>
 8005c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d105      	bne.n	8005c32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c36:	f043 0208 	orr.w	r2, r3, #8
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 81f2 	beq.w	800602c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_UART_IRQHandler+0x14e>
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fb4d 	bl	8006300 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b40      	cmp	r3, #64	@ 0x40
 8005c72:	bf0c      	ite	eq
 8005c74:	2301      	moveq	r3, #1
 8005c76:	2300      	movne	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c82:	f003 0308 	and.w	r3, r3, #8
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <HAL_UART_IRQHandler+0x17a>
 8005c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d04f      	beq.n	8005d32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa55 	bl	8006142 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca2:	2b40      	cmp	r3, #64	@ 0x40
 8005ca4:	d141      	bne.n	8005d2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3314      	adds	r3, #20
 8005cac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005cd2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005cde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1d9      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d013      	beq.n	8005d22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8005ef8 <HAL_UART_IRQHandler+0x3e0>)
 8005d00:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fc ff89 	bl	8002c1e <HAL_DMA_Abort_IT>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d016      	beq.n	8005d40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d20:	e00e      	b.n	8005d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f99e 	bl	8006064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d28:	e00a      	b.n	8005d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f99a 	bl	8006064 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d30:	e006      	b.n	8005d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f996 	bl	8006064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d3e:	e175      	b.n	800602c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d40:	bf00      	nop
    return;
 8005d42:	e173      	b.n	800602c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	f040 814f 	bne.w	8005fec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 8148 	beq.w	8005fec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 8141 	beq.w	8005fec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60bb      	str	r3, [r7, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60bb      	str	r3, [r7, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d8a:	2b40      	cmp	r3, #64	@ 0x40
 8005d8c:	f040 80b6 	bne.w	8005efc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8145 	beq.w	8006030 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dae:	429a      	cmp	r2, r3
 8005db0:	f080 813e 	bcs.w	8006030 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dc6:	f000 8088 	beq.w	8005eda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005de4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005de8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005df6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1d9      	bne.n	8005dca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3314      	adds	r3, #20
 8005e1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e28:	f023 0301 	bic.w	r3, r3, #1
 8005e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3314      	adds	r3, #20
 8005e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e1      	bne.n	8005e16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3314      	adds	r3, #20
 8005e58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3314      	adds	r3, #20
 8005e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e3      	bne.n	8005e52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eaa:	f023 0310 	bic.w	r3, r3, #16
 8005eae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	330c      	adds	r3, #12
 8005eb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ebc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ebe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ec2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e3      	bne.n	8005e98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fc fe32 	bl	8002b3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f8c1 	bl	8006078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ef6:	e09b      	b.n	8006030 <HAL_UART_IRQHandler+0x518>
 8005ef8:	08006209 	.word	0x08006209
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 808e 	beq.w	8006034 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8089 	beq.w	8006034 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005f46:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e3      	bne.n	8005f22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	623b      	str	r3, [r7, #32]
   return(result);
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3314      	adds	r3, #20
 8005f7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e3      	bne.n	8005f5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	330c      	adds	r3, #12
 8005fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0310 	bic.w	r3, r3, #16
 8005fb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005fc4:	61fa      	str	r2, [r7, #28]
 8005fc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	69b9      	ldr	r1, [r7, #24]
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e3      	bne.n	8005fa0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f847 	bl	8006078 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fea:	e023      	b.n	8006034 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <HAL_UART_IRQHandler+0x4f4>
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f913 	bl	8006230 <UART_Transmit_IT>
    return;
 800600a:	e014      	b.n	8006036 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800600c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00e      	beq.n	8006036 <HAL_UART_IRQHandler+0x51e>
 8006018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800601c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d008      	beq.n	8006036 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f953 	bl	80062d0 <UART_EndTransmit_IT>
    return;
 800602a:	e004      	b.n	8006036 <HAL_UART_IRQHandler+0x51e>
    return;
 800602c:	bf00      	nop
 800602e:	e002      	b.n	8006036 <HAL_UART_IRQHandler+0x51e>
      return;
 8006030:	bf00      	nop
 8006032:	e000      	b.n	8006036 <HAL_UART_IRQHandler+0x51e>
      return;
 8006034:	bf00      	nop
  }
}
 8006036:	37e8      	adds	r7, #232	@ 0xe8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	4613      	mov	r3, r2
 800609e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060a0:	e03b      	b.n	800611a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a8:	d037      	beq.n	800611a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060aa:	f7fc fc07 	bl	80028bc <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	6a3a      	ldr	r2, [r7, #32]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d302      	bcc.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e03a      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d023      	beq.n	800611a <UART_WaitOnFlagUntilTimeout+0x8a>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b80      	cmp	r3, #128	@ 0x80
 80060d6:	d020      	beq.n	800611a <UART_WaitOnFlagUntilTimeout+0x8a>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b40      	cmp	r3, #64	@ 0x40
 80060dc:	d01d      	beq.n	800611a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d116      	bne.n	800611a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80060ec:	2300      	movs	r3, #0
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f81d 	bl	8006142 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2208      	movs	r2, #8
 800610c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e00f      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4013      	ands	r3, r2
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	bf0c      	ite	eq
 800612a:	2301      	moveq	r3, #1
 800612c:	2300      	movne	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	461a      	mov	r2, r3
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	429a      	cmp	r2, r3
 8006136:	d0b4      	beq.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006142:	b480      	push	{r7}
 8006144:	b095      	sub	sp, #84	@ 0x54
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006160:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	330c      	adds	r3, #12
 8006168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800616a:	643a      	str	r2, [r7, #64]	@ 0x40
 800616c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006170:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e5      	bne.n	800614a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3314      	adds	r3, #20
 8006184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	61fb      	str	r3, [r7, #28]
   return(result);
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	f023 0301 	bic.w	r3, r3, #1
 8006194:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3314      	adds	r3, #20
 800619c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800619e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e5      	bne.n	800617e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d119      	bne.n	80061ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	330c      	adds	r3, #12
 80061c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f023 0310 	bic.w	r3, r3, #16
 80061d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	330c      	adds	r3, #12
 80061d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061da:	61ba      	str	r2, [r7, #24]
 80061dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	6979      	ldr	r1, [r7, #20]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	613b      	str	r3, [r7, #16]
   return(result);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e5      	bne.n	80061ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061fc:	bf00      	nop
 80061fe:	3754      	adds	r7, #84	@ 0x54
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006214:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff ff1e 	bl	8006064 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006228:	bf00      	nop
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b21      	cmp	r3, #33	@ 0x21
 8006242:	d13e      	bne.n	80062c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800624c:	d114      	bne.n	8006278 <UART_Transmit_IT+0x48>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d110      	bne.n	8006278 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800626a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	1c9a      	adds	r2, r3, #2
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	621a      	str	r2, [r3, #32]
 8006276:	e008      	b.n	800628a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	1c59      	adds	r1, r3, #1
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6211      	str	r1, [r2, #32]
 8006282:	781a      	ldrb	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29b      	uxth	r3, r3
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	4619      	mov	r1, r3
 8006298:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10f      	bne.n	80062be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e000      	b.n	80062c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062c2:	2302      	movs	r3, #2
  }
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff fea3 	bl	800603c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08c      	sub	sp, #48	@ 0x30
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b22      	cmp	r3, #34	@ 0x22
 8006312:	f040 80ae 	bne.w	8006472 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800631e:	d117      	bne.n	8006350 <UART_Receive_IT+0x50>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d113      	bne.n	8006350 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006328:	2300      	movs	r3, #0
 800632a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006330:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	b29b      	uxth	r3, r3
 800633a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633e:	b29a      	uxth	r2, r3
 8006340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006342:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006348:	1c9a      	adds	r2, r3, #2
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	629a      	str	r2, [r3, #40]	@ 0x28
 800634e:	e026      	b.n	800639e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006354:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006356:	2300      	movs	r3, #0
 8006358:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006362:	d007      	beq.n	8006374 <UART_Receive_IT+0x74>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <UART_Receive_IT+0x82>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d106      	bne.n	8006382 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	b2da      	uxtb	r2, r3
 800637c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	e008      	b.n	8006394 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800638e:	b2da      	uxtb	r2, r3
 8006390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006392:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	4619      	mov	r1, r3
 80063ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d15d      	bne.n	800646e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0220 	bic.w	r2, r2, #32
 80063c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	695a      	ldr	r2, [r3, #20]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d135      	bne.n	8006464 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	613b      	str	r3, [r7, #16]
   return(result);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f023 0310 	bic.w	r3, r3, #16
 8006414:	627b      	str	r3, [r7, #36]	@ 0x24
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	330c      	adds	r3, #12
 800641c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800641e:	623a      	str	r2, [r7, #32]
 8006420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	69f9      	ldr	r1, [r7, #28]
 8006424:	6a3a      	ldr	r2, [r7, #32]
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	61bb      	str	r3, [r7, #24]
   return(result);
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e5      	bne.n	80063fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0310 	and.w	r3, r3, #16
 800643c:	2b10      	cmp	r3, #16
 800643e:	d10a      	bne.n	8006456 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fe0b 	bl	8006078 <HAL_UARTEx_RxEventCallback>
 8006462:	e002      	b.n	800646a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff fdf3 	bl	8006050 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e002      	b.n	8006474 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e000      	b.n	8006474 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006472:	2302      	movs	r3, #2
  }
}
 8006474:	4618      	mov	r0, r3
 8006476:	3730      	adds	r7, #48	@ 0x30
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800647c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006480:	b0c0      	sub	sp, #256	@ 0x100
 8006482:	af00      	add	r7, sp, #0
 8006484:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006498:	68d9      	ldr	r1, [r3, #12]
 800649a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	ea40 0301 	orr.w	r3, r0, r1
 80064a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	431a      	orrs	r2, r3
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80064d4:	f021 010c 	bic.w	r1, r1, #12
 80064d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064e2:	430b      	orrs	r3, r1
 80064e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80064f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f6:	6999      	ldr	r1, [r3, #24]
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	ea40 0301 	orr.w	r3, r0, r1
 8006502:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b8f      	ldr	r3, [pc, #572]	@ (8006748 <UART_SetConfig+0x2cc>)
 800650c:	429a      	cmp	r2, r3
 800650e:	d005      	beq.n	800651c <UART_SetConfig+0xa0>
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b8d      	ldr	r3, [pc, #564]	@ (800674c <UART_SetConfig+0x2d0>)
 8006518:	429a      	cmp	r2, r3
 800651a:	d104      	bne.n	8006526 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800651c:	f7fd fea0 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 8006520:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006524:	e003      	b.n	800652e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006526:	f7fd fe87 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 800652a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800652e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006538:	f040 810c 	bne.w	8006754 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800653c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006540:	2200      	movs	r2, #0
 8006542:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006546:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800654a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800654e:	4622      	mov	r2, r4
 8006550:	462b      	mov	r3, r5
 8006552:	1891      	adds	r1, r2, r2
 8006554:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006556:	415b      	adcs	r3, r3
 8006558:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800655a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800655e:	4621      	mov	r1, r4
 8006560:	eb12 0801 	adds.w	r8, r2, r1
 8006564:	4629      	mov	r1, r5
 8006566:	eb43 0901 	adc.w	r9, r3, r1
 800656a:	f04f 0200 	mov.w	r2, #0
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800657a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800657e:	4690      	mov	r8, r2
 8006580:	4699      	mov	r9, r3
 8006582:	4623      	mov	r3, r4
 8006584:	eb18 0303 	adds.w	r3, r8, r3
 8006588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800658c:	462b      	mov	r3, r5
 800658e:	eb49 0303 	adc.w	r3, r9, r3
 8006592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80065a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80065aa:	460b      	mov	r3, r1
 80065ac:	18db      	adds	r3, r3, r3
 80065ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80065b0:	4613      	mov	r3, r2
 80065b2:	eb42 0303 	adc.w	r3, r2, r3
 80065b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80065b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80065bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80065c0:	f7fa fb82 	bl	8000cc8 <__aeabi_uldivmod>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4b61      	ldr	r3, [pc, #388]	@ (8006750 <UART_SetConfig+0x2d4>)
 80065ca:	fba3 2302 	umull	r2, r3, r3, r2
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	011c      	lsls	r4, r3, #4
 80065d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80065e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80065e4:	4642      	mov	r2, r8
 80065e6:	464b      	mov	r3, r9
 80065e8:	1891      	adds	r1, r2, r2
 80065ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80065ec:	415b      	adcs	r3, r3
 80065ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80065f4:	4641      	mov	r1, r8
 80065f6:	eb12 0a01 	adds.w	sl, r2, r1
 80065fa:	4649      	mov	r1, r9
 80065fc:	eb43 0b01 	adc.w	fp, r3, r1
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	f04f 0300 	mov.w	r3, #0
 8006608:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800660c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006614:	4692      	mov	sl, r2
 8006616:	469b      	mov	fp, r3
 8006618:	4643      	mov	r3, r8
 800661a:	eb1a 0303 	adds.w	r3, sl, r3
 800661e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006622:	464b      	mov	r3, r9
 8006624:	eb4b 0303 	adc.w	r3, fp, r3
 8006628:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800662c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006638:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800663c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006640:	460b      	mov	r3, r1
 8006642:	18db      	adds	r3, r3, r3
 8006644:	643b      	str	r3, [r7, #64]	@ 0x40
 8006646:	4613      	mov	r3, r2
 8006648:	eb42 0303 	adc.w	r3, r2, r3
 800664c:	647b      	str	r3, [r7, #68]	@ 0x44
 800664e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006652:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006656:	f7fa fb37 	bl	8000cc8 <__aeabi_uldivmod>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	4611      	mov	r1, r2
 8006660:	4b3b      	ldr	r3, [pc, #236]	@ (8006750 <UART_SetConfig+0x2d4>)
 8006662:	fba3 2301 	umull	r2, r3, r3, r1
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	2264      	movs	r2, #100	@ 0x64
 800666a:	fb02 f303 	mul.w	r3, r2, r3
 800666e:	1acb      	subs	r3, r1, r3
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006676:	4b36      	ldr	r3, [pc, #216]	@ (8006750 <UART_SetConfig+0x2d4>)
 8006678:	fba3 2302 	umull	r2, r3, r3, r2
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006684:	441c      	add	r4, r3
 8006686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800668a:	2200      	movs	r2, #0
 800668c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006690:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006694:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006698:	4642      	mov	r2, r8
 800669a:	464b      	mov	r3, r9
 800669c:	1891      	adds	r1, r2, r2
 800669e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80066a0:	415b      	adcs	r3, r3
 80066a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80066a8:	4641      	mov	r1, r8
 80066aa:	1851      	adds	r1, r2, r1
 80066ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80066ae:	4649      	mov	r1, r9
 80066b0:	414b      	adcs	r3, r1
 80066b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80066c0:	4659      	mov	r1, fp
 80066c2:	00cb      	lsls	r3, r1, #3
 80066c4:	4651      	mov	r1, sl
 80066c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ca:	4651      	mov	r1, sl
 80066cc:	00ca      	lsls	r2, r1, #3
 80066ce:	4610      	mov	r0, r2
 80066d0:	4619      	mov	r1, r3
 80066d2:	4603      	mov	r3, r0
 80066d4:	4642      	mov	r2, r8
 80066d6:	189b      	adds	r3, r3, r2
 80066d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066dc:	464b      	mov	r3, r9
 80066de:	460a      	mov	r2, r1
 80066e0:	eb42 0303 	adc.w	r3, r2, r3
 80066e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80066f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066fc:	460b      	mov	r3, r1
 80066fe:	18db      	adds	r3, r3, r3
 8006700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006702:	4613      	mov	r3, r2
 8006704:	eb42 0303 	adc.w	r3, r2, r3
 8006708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800670a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800670e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006712:	f7fa fad9 	bl	8000cc8 <__aeabi_uldivmod>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <UART_SetConfig+0x2d4>)
 800671c:	fba3 1302 	umull	r1, r3, r3, r2
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	2164      	movs	r1, #100	@ 0x64
 8006724:	fb01 f303 	mul.w	r3, r1, r3
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	3332      	adds	r3, #50	@ 0x32
 800672e:	4a08      	ldr	r2, [pc, #32]	@ (8006750 <UART_SetConfig+0x2d4>)
 8006730:	fba2 2303 	umull	r2, r3, r2, r3
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	f003 0207 	and.w	r2, r3, #7
 800673a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4422      	add	r2, r4
 8006742:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006744:	e106      	b.n	8006954 <UART_SetConfig+0x4d8>
 8006746:	bf00      	nop
 8006748:	40011000 	.word	0x40011000
 800674c:	40011400 	.word	0x40011400
 8006750:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006758:	2200      	movs	r2, #0
 800675a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800675e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006762:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006766:	4642      	mov	r2, r8
 8006768:	464b      	mov	r3, r9
 800676a:	1891      	adds	r1, r2, r2
 800676c:	6239      	str	r1, [r7, #32]
 800676e:	415b      	adcs	r3, r3
 8006770:	627b      	str	r3, [r7, #36]	@ 0x24
 8006772:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006776:	4641      	mov	r1, r8
 8006778:	1854      	adds	r4, r2, r1
 800677a:	4649      	mov	r1, r9
 800677c:	eb43 0501 	adc.w	r5, r3, r1
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	00eb      	lsls	r3, r5, #3
 800678a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800678e:	00e2      	lsls	r2, r4, #3
 8006790:	4614      	mov	r4, r2
 8006792:	461d      	mov	r5, r3
 8006794:	4643      	mov	r3, r8
 8006796:	18e3      	adds	r3, r4, r3
 8006798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800679c:	464b      	mov	r3, r9
 800679e:	eb45 0303 	adc.w	r3, r5, r3
 80067a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80067c2:	4629      	mov	r1, r5
 80067c4:	008b      	lsls	r3, r1, #2
 80067c6:	4621      	mov	r1, r4
 80067c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067cc:	4621      	mov	r1, r4
 80067ce:	008a      	lsls	r2, r1, #2
 80067d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80067d4:	f7fa fa78 	bl	8000cc8 <__aeabi_uldivmod>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4b60      	ldr	r3, [pc, #384]	@ (8006960 <UART_SetConfig+0x4e4>)
 80067de:	fba3 2302 	umull	r2, r3, r3, r2
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	011c      	lsls	r4, r3, #4
 80067e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80067f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80067f8:	4642      	mov	r2, r8
 80067fa:	464b      	mov	r3, r9
 80067fc:	1891      	adds	r1, r2, r2
 80067fe:	61b9      	str	r1, [r7, #24]
 8006800:	415b      	adcs	r3, r3
 8006802:	61fb      	str	r3, [r7, #28]
 8006804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006808:	4641      	mov	r1, r8
 800680a:	1851      	adds	r1, r2, r1
 800680c:	6139      	str	r1, [r7, #16]
 800680e:	4649      	mov	r1, r9
 8006810:	414b      	adcs	r3, r1
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	f04f 0200 	mov.w	r2, #0
 8006818:	f04f 0300 	mov.w	r3, #0
 800681c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006820:	4659      	mov	r1, fp
 8006822:	00cb      	lsls	r3, r1, #3
 8006824:	4651      	mov	r1, sl
 8006826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800682a:	4651      	mov	r1, sl
 800682c:	00ca      	lsls	r2, r1, #3
 800682e:	4610      	mov	r0, r2
 8006830:	4619      	mov	r1, r3
 8006832:	4603      	mov	r3, r0
 8006834:	4642      	mov	r2, r8
 8006836:	189b      	adds	r3, r3, r2
 8006838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800683c:	464b      	mov	r3, r9
 800683e:	460a      	mov	r2, r1
 8006840:	eb42 0303 	adc.w	r3, r2, r3
 8006844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006852:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006860:	4649      	mov	r1, r9
 8006862:	008b      	lsls	r3, r1, #2
 8006864:	4641      	mov	r1, r8
 8006866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800686a:	4641      	mov	r1, r8
 800686c:	008a      	lsls	r2, r1, #2
 800686e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006872:	f7fa fa29 	bl	8000cc8 <__aeabi_uldivmod>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4611      	mov	r1, r2
 800687c:	4b38      	ldr	r3, [pc, #224]	@ (8006960 <UART_SetConfig+0x4e4>)
 800687e:	fba3 2301 	umull	r2, r3, r3, r1
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	2264      	movs	r2, #100	@ 0x64
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	1acb      	subs	r3, r1, r3
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	3332      	adds	r3, #50	@ 0x32
 8006890:	4a33      	ldr	r2, [pc, #204]	@ (8006960 <UART_SetConfig+0x4e4>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	095b      	lsrs	r3, r3, #5
 8006898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800689c:	441c      	add	r4, r3
 800689e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a2:	2200      	movs	r2, #0
 80068a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80068a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80068a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80068ac:	4642      	mov	r2, r8
 80068ae:	464b      	mov	r3, r9
 80068b0:	1891      	adds	r1, r2, r2
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	415b      	adcs	r3, r3
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068bc:	4641      	mov	r1, r8
 80068be:	1851      	adds	r1, r2, r1
 80068c0:	6039      	str	r1, [r7, #0]
 80068c2:	4649      	mov	r1, r9
 80068c4:	414b      	adcs	r3, r1
 80068c6:	607b      	str	r3, [r7, #4]
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068d4:	4659      	mov	r1, fp
 80068d6:	00cb      	lsls	r3, r1, #3
 80068d8:	4651      	mov	r1, sl
 80068da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068de:	4651      	mov	r1, sl
 80068e0:	00ca      	lsls	r2, r1, #3
 80068e2:	4610      	mov	r0, r2
 80068e4:	4619      	mov	r1, r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	4642      	mov	r2, r8
 80068ea:	189b      	adds	r3, r3, r2
 80068ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068ee:	464b      	mov	r3, r9
 80068f0:	460a      	mov	r2, r1
 80068f2:	eb42 0303 	adc.w	r3, r2, r3
 80068f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	663b      	str	r3, [r7, #96]	@ 0x60
 8006902:	667a      	str	r2, [r7, #100]	@ 0x64
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006910:	4649      	mov	r1, r9
 8006912:	008b      	lsls	r3, r1, #2
 8006914:	4641      	mov	r1, r8
 8006916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800691a:	4641      	mov	r1, r8
 800691c:	008a      	lsls	r2, r1, #2
 800691e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006922:	f7fa f9d1 	bl	8000cc8 <__aeabi_uldivmod>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4b0d      	ldr	r3, [pc, #52]	@ (8006960 <UART_SetConfig+0x4e4>)
 800692c:	fba3 1302 	umull	r1, r3, r3, r2
 8006930:	095b      	lsrs	r3, r3, #5
 8006932:	2164      	movs	r1, #100	@ 0x64
 8006934:	fb01 f303 	mul.w	r3, r1, r3
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	3332      	adds	r3, #50	@ 0x32
 800693e:	4a08      	ldr	r2, [pc, #32]	@ (8006960 <UART_SetConfig+0x4e4>)
 8006940:	fba2 2303 	umull	r2, r3, r2, r3
 8006944:	095b      	lsrs	r3, r3, #5
 8006946:	f003 020f 	and.w	r2, r3, #15
 800694a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4422      	add	r2, r4
 8006952:	609a      	str	r2, [r3, #8]
}
 8006954:	bf00      	nop
 8006956:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800695a:	46bd      	mov	sp, r7
 800695c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006960:	51eb851f 	.word	0x51eb851f

08006964 <__cvt>:
 8006964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006968:	ec57 6b10 	vmov	r6, r7, d0
 800696c:	2f00      	cmp	r7, #0
 800696e:	460c      	mov	r4, r1
 8006970:	4619      	mov	r1, r3
 8006972:	463b      	mov	r3, r7
 8006974:	bfbb      	ittet	lt
 8006976:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800697a:	461f      	movlt	r7, r3
 800697c:	2300      	movge	r3, #0
 800697e:	232d      	movlt	r3, #45	@ 0x2d
 8006980:	700b      	strb	r3, [r1, #0]
 8006982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006984:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006988:	4691      	mov	r9, r2
 800698a:	f023 0820 	bic.w	r8, r3, #32
 800698e:	bfbc      	itt	lt
 8006990:	4632      	movlt	r2, r6
 8006992:	4616      	movlt	r6, r2
 8006994:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006998:	d005      	beq.n	80069a6 <__cvt+0x42>
 800699a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800699e:	d100      	bne.n	80069a2 <__cvt+0x3e>
 80069a0:	3401      	adds	r4, #1
 80069a2:	2102      	movs	r1, #2
 80069a4:	e000      	b.n	80069a8 <__cvt+0x44>
 80069a6:	2103      	movs	r1, #3
 80069a8:	ab03      	add	r3, sp, #12
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	ab02      	add	r3, sp, #8
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	ec47 6b10 	vmov	d0, r6, r7
 80069b4:	4653      	mov	r3, sl
 80069b6:	4622      	mov	r2, r4
 80069b8:	f001 f97a 	bl	8007cb0 <_dtoa_r>
 80069bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80069c0:	4605      	mov	r5, r0
 80069c2:	d119      	bne.n	80069f8 <__cvt+0x94>
 80069c4:	f019 0f01 	tst.w	r9, #1
 80069c8:	d00e      	beq.n	80069e8 <__cvt+0x84>
 80069ca:	eb00 0904 	add.w	r9, r0, r4
 80069ce:	2200      	movs	r2, #0
 80069d0:	2300      	movs	r3, #0
 80069d2:	4630      	mov	r0, r6
 80069d4:	4639      	mov	r1, r7
 80069d6:	f7fa f897 	bl	8000b08 <__aeabi_dcmpeq>
 80069da:	b108      	cbz	r0, 80069e0 <__cvt+0x7c>
 80069dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80069e0:	2230      	movs	r2, #48	@ 0x30
 80069e2:	9b03      	ldr	r3, [sp, #12]
 80069e4:	454b      	cmp	r3, r9
 80069e6:	d31e      	bcc.n	8006a26 <__cvt+0xc2>
 80069e8:	9b03      	ldr	r3, [sp, #12]
 80069ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069ec:	1b5b      	subs	r3, r3, r5
 80069ee:	4628      	mov	r0, r5
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	b004      	add	sp, #16
 80069f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069fc:	eb00 0904 	add.w	r9, r0, r4
 8006a00:	d1e5      	bne.n	80069ce <__cvt+0x6a>
 8006a02:	7803      	ldrb	r3, [r0, #0]
 8006a04:	2b30      	cmp	r3, #48	@ 0x30
 8006a06:	d10a      	bne.n	8006a1e <__cvt+0xba>
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	4639      	mov	r1, r7
 8006a10:	f7fa f87a 	bl	8000b08 <__aeabi_dcmpeq>
 8006a14:	b918      	cbnz	r0, 8006a1e <__cvt+0xba>
 8006a16:	f1c4 0401 	rsb	r4, r4, #1
 8006a1a:	f8ca 4000 	str.w	r4, [sl]
 8006a1e:	f8da 3000 	ldr.w	r3, [sl]
 8006a22:	4499      	add	r9, r3
 8006a24:	e7d3      	b.n	80069ce <__cvt+0x6a>
 8006a26:	1c59      	adds	r1, r3, #1
 8006a28:	9103      	str	r1, [sp, #12]
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	e7d9      	b.n	80069e2 <__cvt+0x7e>

08006a2e <__exponent>:
 8006a2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a30:	2900      	cmp	r1, #0
 8006a32:	bfba      	itte	lt
 8006a34:	4249      	neglt	r1, r1
 8006a36:	232d      	movlt	r3, #45	@ 0x2d
 8006a38:	232b      	movge	r3, #43	@ 0x2b
 8006a3a:	2909      	cmp	r1, #9
 8006a3c:	7002      	strb	r2, [r0, #0]
 8006a3e:	7043      	strb	r3, [r0, #1]
 8006a40:	dd29      	ble.n	8006a96 <__exponent+0x68>
 8006a42:	f10d 0307 	add.w	r3, sp, #7
 8006a46:	461d      	mov	r5, r3
 8006a48:	270a      	movs	r7, #10
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a50:	fb07 1416 	mls	r4, r7, r6, r1
 8006a54:	3430      	adds	r4, #48	@ 0x30
 8006a56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	2c63      	cmp	r4, #99	@ 0x63
 8006a5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a62:	4631      	mov	r1, r6
 8006a64:	dcf1      	bgt.n	8006a4a <__exponent+0x1c>
 8006a66:	3130      	adds	r1, #48	@ 0x30
 8006a68:	1e94      	subs	r4, r2, #2
 8006a6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a6e:	1c41      	adds	r1, r0, #1
 8006a70:	4623      	mov	r3, r4
 8006a72:	42ab      	cmp	r3, r5
 8006a74:	d30a      	bcc.n	8006a8c <__exponent+0x5e>
 8006a76:	f10d 0309 	add.w	r3, sp, #9
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	42ac      	cmp	r4, r5
 8006a7e:	bf88      	it	hi
 8006a80:	2300      	movhi	r3, #0
 8006a82:	3302      	adds	r3, #2
 8006a84:	4403      	add	r3, r0
 8006a86:	1a18      	subs	r0, r3, r0
 8006a88:	b003      	add	sp, #12
 8006a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a94:	e7ed      	b.n	8006a72 <__exponent+0x44>
 8006a96:	2330      	movs	r3, #48	@ 0x30
 8006a98:	3130      	adds	r1, #48	@ 0x30
 8006a9a:	7083      	strb	r3, [r0, #2]
 8006a9c:	70c1      	strb	r1, [r0, #3]
 8006a9e:	1d03      	adds	r3, r0, #4
 8006aa0:	e7f1      	b.n	8006a86 <__exponent+0x58>
	...

08006aa4 <_printf_float>:
 8006aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa8:	b08d      	sub	sp, #52	@ 0x34
 8006aaa:	460c      	mov	r4, r1
 8006aac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	461f      	mov	r7, r3
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	f000 fff3 	bl	8007aa0 <_localeconv_r>
 8006aba:	6803      	ldr	r3, [r0, #0]
 8006abc:	9304      	str	r3, [sp, #16]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7f9 fbf6 	bl	80002b0 <strlen>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8006acc:	9005      	str	r0, [sp, #20]
 8006ace:	3307      	adds	r3, #7
 8006ad0:	f023 0307 	bic.w	r3, r3, #7
 8006ad4:	f103 0208 	add.w	r2, r3, #8
 8006ad8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006adc:	f8d4 b000 	ldr.w	fp, [r4]
 8006ae0:	f8c8 2000 	str.w	r2, [r8]
 8006ae4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ae8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006aec:	9307      	str	r3, [sp, #28]
 8006aee:	f8cd 8018 	str.w	r8, [sp, #24]
 8006af2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006af6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006afa:	4b9c      	ldr	r3, [pc, #624]	@ (8006d6c <_printf_float+0x2c8>)
 8006afc:	f04f 32ff 	mov.w	r2, #4294967295
 8006b00:	f7fa f834 	bl	8000b6c <__aeabi_dcmpun>
 8006b04:	bb70      	cbnz	r0, 8006b64 <_printf_float+0xc0>
 8006b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b0a:	4b98      	ldr	r3, [pc, #608]	@ (8006d6c <_printf_float+0x2c8>)
 8006b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b10:	f7fa f80e 	bl	8000b30 <__aeabi_dcmple>
 8006b14:	bb30      	cbnz	r0, 8006b64 <_printf_float+0xc0>
 8006b16:	2200      	movs	r2, #0
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	f7f9 fffd 	bl	8000b1c <__aeabi_dcmplt>
 8006b22:	b110      	cbz	r0, 8006b2a <_printf_float+0x86>
 8006b24:	232d      	movs	r3, #45	@ 0x2d
 8006b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b2a:	4a91      	ldr	r2, [pc, #580]	@ (8006d70 <_printf_float+0x2cc>)
 8006b2c:	4b91      	ldr	r3, [pc, #580]	@ (8006d74 <_printf_float+0x2d0>)
 8006b2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b32:	bf94      	ite	ls
 8006b34:	4690      	movls	r8, r2
 8006b36:	4698      	movhi	r8, r3
 8006b38:	2303      	movs	r3, #3
 8006b3a:	6123      	str	r3, [r4, #16]
 8006b3c:	f02b 0304 	bic.w	r3, fp, #4
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	f04f 0900 	mov.w	r9, #0
 8006b46:	9700      	str	r7, [sp, #0]
 8006b48:	4633      	mov	r3, r6
 8006b4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	4628      	mov	r0, r5
 8006b50:	f000 f9d2 	bl	8006ef8 <_printf_common>
 8006b54:	3001      	adds	r0, #1
 8006b56:	f040 808d 	bne.w	8006c74 <_printf_float+0x1d0>
 8006b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5e:	b00d      	add	sp, #52	@ 0x34
 8006b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b64:	4642      	mov	r2, r8
 8006b66:	464b      	mov	r3, r9
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	f7f9 fffe 	bl	8000b6c <__aeabi_dcmpun>
 8006b70:	b140      	cbz	r0, 8006b84 <_printf_float+0xe0>
 8006b72:	464b      	mov	r3, r9
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bfbc      	itt	lt
 8006b78:	232d      	movlt	r3, #45	@ 0x2d
 8006b7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b7e:	4a7e      	ldr	r2, [pc, #504]	@ (8006d78 <_printf_float+0x2d4>)
 8006b80:	4b7e      	ldr	r3, [pc, #504]	@ (8006d7c <_printf_float+0x2d8>)
 8006b82:	e7d4      	b.n	8006b2e <_printf_float+0x8a>
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006b8a:	9206      	str	r2, [sp, #24]
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	d13b      	bne.n	8006c08 <_printf_float+0x164>
 8006b90:	2306      	movs	r3, #6
 8006b92:	6063      	str	r3, [r4, #4]
 8006b94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006b98:	2300      	movs	r3, #0
 8006b9a:	6022      	str	r2, [r4, #0]
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006ba0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006ba4:	ab09      	add	r3, sp, #36	@ 0x24
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	6861      	ldr	r1, [r4, #4]
 8006baa:	ec49 8b10 	vmov	d0, r8, r9
 8006bae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f7ff fed6 	bl	8006964 <__cvt>
 8006bb8:	9b06      	ldr	r3, [sp, #24]
 8006bba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bbc:	2b47      	cmp	r3, #71	@ 0x47
 8006bbe:	4680      	mov	r8, r0
 8006bc0:	d129      	bne.n	8006c16 <_printf_float+0x172>
 8006bc2:	1cc8      	adds	r0, r1, #3
 8006bc4:	db02      	blt.n	8006bcc <_printf_float+0x128>
 8006bc6:	6863      	ldr	r3, [r4, #4]
 8006bc8:	4299      	cmp	r1, r3
 8006bca:	dd41      	ble.n	8006c50 <_printf_float+0x1ac>
 8006bcc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006bd0:	fa5f fa8a 	uxtb.w	sl, sl
 8006bd4:	3901      	subs	r1, #1
 8006bd6:	4652      	mov	r2, sl
 8006bd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006bdc:	9109      	str	r1, [sp, #36]	@ 0x24
 8006bde:	f7ff ff26 	bl	8006a2e <__exponent>
 8006be2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006be4:	1813      	adds	r3, r2, r0
 8006be6:	2a01      	cmp	r2, #1
 8006be8:	4681      	mov	r9, r0
 8006bea:	6123      	str	r3, [r4, #16]
 8006bec:	dc02      	bgt.n	8006bf4 <_printf_float+0x150>
 8006bee:	6822      	ldr	r2, [r4, #0]
 8006bf0:	07d2      	lsls	r2, r2, #31
 8006bf2:	d501      	bpl.n	8006bf8 <_printf_float+0x154>
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	6123      	str	r3, [r4, #16]
 8006bf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0a2      	beq.n	8006b46 <_printf_float+0xa2>
 8006c00:	232d      	movs	r3, #45	@ 0x2d
 8006c02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c06:	e79e      	b.n	8006b46 <_printf_float+0xa2>
 8006c08:	9a06      	ldr	r2, [sp, #24]
 8006c0a:	2a47      	cmp	r2, #71	@ 0x47
 8006c0c:	d1c2      	bne.n	8006b94 <_printf_float+0xf0>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1c0      	bne.n	8006b94 <_printf_float+0xf0>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e7bd      	b.n	8006b92 <_printf_float+0xee>
 8006c16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c1a:	d9db      	bls.n	8006bd4 <_printf_float+0x130>
 8006c1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c20:	d118      	bne.n	8006c54 <_printf_float+0x1b0>
 8006c22:	2900      	cmp	r1, #0
 8006c24:	6863      	ldr	r3, [r4, #4]
 8006c26:	dd0b      	ble.n	8006c40 <_printf_float+0x19c>
 8006c28:	6121      	str	r1, [r4, #16]
 8006c2a:	b913      	cbnz	r3, 8006c32 <_printf_float+0x18e>
 8006c2c:	6822      	ldr	r2, [r4, #0]
 8006c2e:	07d0      	lsls	r0, r2, #31
 8006c30:	d502      	bpl.n	8006c38 <_printf_float+0x194>
 8006c32:	3301      	adds	r3, #1
 8006c34:	440b      	add	r3, r1
 8006c36:	6123      	str	r3, [r4, #16]
 8006c38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c3a:	f04f 0900 	mov.w	r9, #0
 8006c3e:	e7db      	b.n	8006bf8 <_printf_float+0x154>
 8006c40:	b913      	cbnz	r3, 8006c48 <_printf_float+0x1a4>
 8006c42:	6822      	ldr	r2, [r4, #0]
 8006c44:	07d2      	lsls	r2, r2, #31
 8006c46:	d501      	bpl.n	8006c4c <_printf_float+0x1a8>
 8006c48:	3302      	adds	r3, #2
 8006c4a:	e7f4      	b.n	8006c36 <_printf_float+0x192>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e7f2      	b.n	8006c36 <_printf_float+0x192>
 8006c50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c56:	4299      	cmp	r1, r3
 8006c58:	db05      	blt.n	8006c66 <_printf_float+0x1c2>
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	6121      	str	r1, [r4, #16]
 8006c5e:	07d8      	lsls	r0, r3, #31
 8006c60:	d5ea      	bpl.n	8006c38 <_printf_float+0x194>
 8006c62:	1c4b      	adds	r3, r1, #1
 8006c64:	e7e7      	b.n	8006c36 <_printf_float+0x192>
 8006c66:	2900      	cmp	r1, #0
 8006c68:	bfd4      	ite	le
 8006c6a:	f1c1 0202 	rsble	r2, r1, #2
 8006c6e:	2201      	movgt	r2, #1
 8006c70:	4413      	add	r3, r2
 8006c72:	e7e0      	b.n	8006c36 <_printf_float+0x192>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	055a      	lsls	r2, r3, #21
 8006c78:	d407      	bmi.n	8006c8a <_printf_float+0x1e6>
 8006c7a:	6923      	ldr	r3, [r4, #16]
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	d12b      	bne.n	8006ce0 <_printf_float+0x23c>
 8006c88:	e767      	b.n	8006b5a <_printf_float+0xb6>
 8006c8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c8e:	f240 80dd 	bls.w	8006e4c <_printf_float+0x3a8>
 8006c92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c96:	2200      	movs	r2, #0
 8006c98:	2300      	movs	r3, #0
 8006c9a:	f7f9 ff35 	bl	8000b08 <__aeabi_dcmpeq>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d033      	beq.n	8006d0a <_printf_float+0x266>
 8006ca2:	4a37      	ldr	r2, [pc, #220]	@ (8006d80 <_printf_float+0x2dc>)
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4631      	mov	r1, r6
 8006ca8:	4628      	mov	r0, r5
 8006caa:	47b8      	blx	r7
 8006cac:	3001      	adds	r0, #1
 8006cae:	f43f af54 	beq.w	8006b5a <_printf_float+0xb6>
 8006cb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006cb6:	4543      	cmp	r3, r8
 8006cb8:	db02      	blt.n	8006cc0 <_printf_float+0x21c>
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	07d8      	lsls	r0, r3, #31
 8006cbe:	d50f      	bpl.n	8006ce0 <_printf_float+0x23c>
 8006cc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cc4:	4631      	mov	r1, r6
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	47b8      	blx	r7
 8006cca:	3001      	adds	r0, #1
 8006ccc:	f43f af45 	beq.w	8006b5a <_printf_float+0xb6>
 8006cd0:	f04f 0900 	mov.w	r9, #0
 8006cd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8006cd8:	f104 0a1a 	add.w	sl, r4, #26
 8006cdc:	45c8      	cmp	r8, r9
 8006cde:	dc09      	bgt.n	8006cf4 <_printf_float+0x250>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	079b      	lsls	r3, r3, #30
 8006ce4:	f100 8103 	bmi.w	8006eee <_printf_float+0x44a>
 8006ce8:	68e0      	ldr	r0, [r4, #12]
 8006cea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cec:	4298      	cmp	r0, r3
 8006cee:	bfb8      	it	lt
 8006cf0:	4618      	movlt	r0, r3
 8006cf2:	e734      	b.n	8006b5e <_printf_float+0xba>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	4652      	mov	r2, sl
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	47b8      	blx	r7
 8006cfe:	3001      	adds	r0, #1
 8006d00:	f43f af2b 	beq.w	8006b5a <_printf_float+0xb6>
 8006d04:	f109 0901 	add.w	r9, r9, #1
 8006d08:	e7e8      	b.n	8006cdc <_printf_float+0x238>
 8006d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	dc39      	bgt.n	8006d84 <_printf_float+0x2e0>
 8006d10:	4a1b      	ldr	r2, [pc, #108]	@ (8006d80 <_printf_float+0x2dc>)
 8006d12:	2301      	movs	r3, #1
 8006d14:	4631      	mov	r1, r6
 8006d16:	4628      	mov	r0, r5
 8006d18:	47b8      	blx	r7
 8006d1a:	3001      	adds	r0, #1
 8006d1c:	f43f af1d 	beq.w	8006b5a <_printf_float+0xb6>
 8006d20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d24:	ea59 0303 	orrs.w	r3, r9, r3
 8006d28:	d102      	bne.n	8006d30 <_printf_float+0x28c>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	07d9      	lsls	r1, r3, #31
 8006d2e:	d5d7      	bpl.n	8006ce0 <_printf_float+0x23c>
 8006d30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d34:	4631      	mov	r1, r6
 8006d36:	4628      	mov	r0, r5
 8006d38:	47b8      	blx	r7
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	f43f af0d 	beq.w	8006b5a <_printf_float+0xb6>
 8006d40:	f04f 0a00 	mov.w	sl, #0
 8006d44:	f104 0b1a 	add.w	fp, r4, #26
 8006d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d4a:	425b      	negs	r3, r3
 8006d4c:	4553      	cmp	r3, sl
 8006d4e:	dc01      	bgt.n	8006d54 <_printf_float+0x2b0>
 8006d50:	464b      	mov	r3, r9
 8006d52:	e793      	b.n	8006c7c <_printf_float+0x1d8>
 8006d54:	2301      	movs	r3, #1
 8006d56:	465a      	mov	r2, fp
 8006d58:	4631      	mov	r1, r6
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	47b8      	blx	r7
 8006d5e:	3001      	adds	r0, #1
 8006d60:	f43f aefb 	beq.w	8006b5a <_printf_float+0xb6>
 8006d64:	f10a 0a01 	add.w	sl, sl, #1
 8006d68:	e7ee      	b.n	8006d48 <_printf_float+0x2a4>
 8006d6a:	bf00      	nop
 8006d6c:	7fefffff 	.word	0x7fefffff
 8006d70:	0800b228 	.word	0x0800b228
 8006d74:	0800b22c 	.word	0x0800b22c
 8006d78:	0800b230 	.word	0x0800b230
 8006d7c:	0800b234 	.word	0x0800b234
 8006d80:	0800b238 	.word	0x0800b238
 8006d84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d8a:	4553      	cmp	r3, sl
 8006d8c:	bfa8      	it	ge
 8006d8e:	4653      	movge	r3, sl
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	4699      	mov	r9, r3
 8006d94:	dc36      	bgt.n	8006e04 <_printf_float+0x360>
 8006d96:	f04f 0b00 	mov.w	fp, #0
 8006d9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d9e:	f104 021a 	add.w	r2, r4, #26
 8006da2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006da4:	9306      	str	r3, [sp, #24]
 8006da6:	eba3 0309 	sub.w	r3, r3, r9
 8006daa:	455b      	cmp	r3, fp
 8006dac:	dc31      	bgt.n	8006e12 <_printf_float+0x36e>
 8006dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db0:	459a      	cmp	sl, r3
 8006db2:	dc3a      	bgt.n	8006e2a <_printf_float+0x386>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	07da      	lsls	r2, r3, #31
 8006db8:	d437      	bmi.n	8006e2a <_printf_float+0x386>
 8006dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dbc:	ebaa 0903 	sub.w	r9, sl, r3
 8006dc0:	9b06      	ldr	r3, [sp, #24]
 8006dc2:	ebaa 0303 	sub.w	r3, sl, r3
 8006dc6:	4599      	cmp	r9, r3
 8006dc8:	bfa8      	it	ge
 8006dca:	4699      	movge	r9, r3
 8006dcc:	f1b9 0f00 	cmp.w	r9, #0
 8006dd0:	dc33      	bgt.n	8006e3a <_printf_float+0x396>
 8006dd2:	f04f 0800 	mov.w	r8, #0
 8006dd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dda:	f104 0b1a 	add.w	fp, r4, #26
 8006dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de0:	ebaa 0303 	sub.w	r3, sl, r3
 8006de4:	eba3 0309 	sub.w	r3, r3, r9
 8006de8:	4543      	cmp	r3, r8
 8006dea:	f77f af79 	ble.w	8006ce0 <_printf_float+0x23c>
 8006dee:	2301      	movs	r3, #1
 8006df0:	465a      	mov	r2, fp
 8006df2:	4631      	mov	r1, r6
 8006df4:	4628      	mov	r0, r5
 8006df6:	47b8      	blx	r7
 8006df8:	3001      	adds	r0, #1
 8006dfa:	f43f aeae 	beq.w	8006b5a <_printf_float+0xb6>
 8006dfe:	f108 0801 	add.w	r8, r8, #1
 8006e02:	e7ec      	b.n	8006dde <_printf_float+0x33a>
 8006e04:	4642      	mov	r2, r8
 8006e06:	4631      	mov	r1, r6
 8006e08:	4628      	mov	r0, r5
 8006e0a:	47b8      	blx	r7
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d1c2      	bne.n	8006d96 <_printf_float+0x2f2>
 8006e10:	e6a3      	b.n	8006b5a <_printf_float+0xb6>
 8006e12:	2301      	movs	r3, #1
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	9206      	str	r2, [sp, #24]
 8006e1a:	47b8      	blx	r7
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	f43f ae9c 	beq.w	8006b5a <_printf_float+0xb6>
 8006e22:	9a06      	ldr	r2, [sp, #24]
 8006e24:	f10b 0b01 	add.w	fp, fp, #1
 8006e28:	e7bb      	b.n	8006da2 <_printf_float+0x2fe>
 8006e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e2e:	4631      	mov	r1, r6
 8006e30:	4628      	mov	r0, r5
 8006e32:	47b8      	blx	r7
 8006e34:	3001      	adds	r0, #1
 8006e36:	d1c0      	bne.n	8006dba <_printf_float+0x316>
 8006e38:	e68f      	b.n	8006b5a <_printf_float+0xb6>
 8006e3a:	9a06      	ldr	r2, [sp, #24]
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	4442      	add	r2, r8
 8006e40:	4631      	mov	r1, r6
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b8      	blx	r7
 8006e46:	3001      	adds	r0, #1
 8006e48:	d1c3      	bne.n	8006dd2 <_printf_float+0x32e>
 8006e4a:	e686      	b.n	8006b5a <_printf_float+0xb6>
 8006e4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e50:	f1ba 0f01 	cmp.w	sl, #1
 8006e54:	dc01      	bgt.n	8006e5a <_printf_float+0x3b6>
 8006e56:	07db      	lsls	r3, r3, #31
 8006e58:	d536      	bpl.n	8006ec8 <_printf_float+0x424>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4628      	mov	r0, r5
 8006e62:	47b8      	blx	r7
 8006e64:	3001      	adds	r0, #1
 8006e66:	f43f ae78 	beq.w	8006b5a <_printf_float+0xb6>
 8006e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4628      	mov	r0, r5
 8006e72:	47b8      	blx	r7
 8006e74:	3001      	adds	r0, #1
 8006e76:	f43f ae70 	beq.w	8006b5a <_printf_float+0xb6>
 8006e7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2300      	movs	r3, #0
 8006e82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e86:	f7f9 fe3f 	bl	8000b08 <__aeabi_dcmpeq>
 8006e8a:	b9c0      	cbnz	r0, 8006ebe <_printf_float+0x41a>
 8006e8c:	4653      	mov	r3, sl
 8006e8e:	f108 0201 	add.w	r2, r8, #1
 8006e92:	4631      	mov	r1, r6
 8006e94:	4628      	mov	r0, r5
 8006e96:	47b8      	blx	r7
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d10c      	bne.n	8006eb6 <_printf_float+0x412>
 8006e9c:	e65d      	b.n	8006b5a <_printf_float+0xb6>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	465a      	mov	r2, fp
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f43f ae56 	beq.w	8006b5a <_printf_float+0xb6>
 8006eae:	f108 0801 	add.w	r8, r8, #1
 8006eb2:	45d0      	cmp	r8, sl
 8006eb4:	dbf3      	blt.n	8006e9e <_printf_float+0x3fa>
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ebc:	e6df      	b.n	8006c7e <_printf_float+0x1da>
 8006ebe:	f04f 0800 	mov.w	r8, #0
 8006ec2:	f104 0b1a 	add.w	fp, r4, #26
 8006ec6:	e7f4      	b.n	8006eb2 <_printf_float+0x40e>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	4642      	mov	r2, r8
 8006ecc:	e7e1      	b.n	8006e92 <_printf_float+0x3ee>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	464a      	mov	r2, r9
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	47b8      	blx	r7
 8006ed8:	3001      	adds	r0, #1
 8006eda:	f43f ae3e 	beq.w	8006b5a <_printf_float+0xb6>
 8006ede:	f108 0801 	add.w	r8, r8, #1
 8006ee2:	68e3      	ldr	r3, [r4, #12]
 8006ee4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ee6:	1a5b      	subs	r3, r3, r1
 8006ee8:	4543      	cmp	r3, r8
 8006eea:	dcf0      	bgt.n	8006ece <_printf_float+0x42a>
 8006eec:	e6fc      	b.n	8006ce8 <_printf_float+0x244>
 8006eee:	f04f 0800 	mov.w	r8, #0
 8006ef2:	f104 0919 	add.w	r9, r4, #25
 8006ef6:	e7f4      	b.n	8006ee2 <_printf_float+0x43e>

08006ef8 <_printf_common>:
 8006ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006efc:	4616      	mov	r6, r2
 8006efe:	4698      	mov	r8, r3
 8006f00:	688a      	ldr	r2, [r1, #8]
 8006f02:	690b      	ldr	r3, [r1, #16]
 8006f04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	bfb8      	it	lt
 8006f0c:	4613      	movlt	r3, r2
 8006f0e:	6033      	str	r3, [r6, #0]
 8006f10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f14:	4607      	mov	r7, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	b10a      	cbz	r2, 8006f1e <_printf_common+0x26>
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	6033      	str	r3, [r6, #0]
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	0699      	lsls	r1, r3, #26
 8006f22:	bf42      	ittt	mi
 8006f24:	6833      	ldrmi	r3, [r6, #0]
 8006f26:	3302      	addmi	r3, #2
 8006f28:	6033      	strmi	r3, [r6, #0]
 8006f2a:	6825      	ldr	r5, [r4, #0]
 8006f2c:	f015 0506 	ands.w	r5, r5, #6
 8006f30:	d106      	bne.n	8006f40 <_printf_common+0x48>
 8006f32:	f104 0a19 	add.w	sl, r4, #25
 8006f36:	68e3      	ldr	r3, [r4, #12]
 8006f38:	6832      	ldr	r2, [r6, #0]
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	42ab      	cmp	r3, r5
 8006f3e:	dc26      	bgt.n	8006f8e <_printf_common+0x96>
 8006f40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f44:	6822      	ldr	r2, [r4, #0]
 8006f46:	3b00      	subs	r3, #0
 8006f48:	bf18      	it	ne
 8006f4a:	2301      	movne	r3, #1
 8006f4c:	0692      	lsls	r2, r2, #26
 8006f4e:	d42b      	bmi.n	8006fa8 <_printf_common+0xb0>
 8006f50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f54:	4641      	mov	r1, r8
 8006f56:	4638      	mov	r0, r7
 8006f58:	47c8      	blx	r9
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d01e      	beq.n	8006f9c <_printf_common+0xa4>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	6922      	ldr	r2, [r4, #16]
 8006f62:	f003 0306 	and.w	r3, r3, #6
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	bf02      	ittt	eq
 8006f6a:	68e5      	ldreq	r5, [r4, #12]
 8006f6c:	6833      	ldreq	r3, [r6, #0]
 8006f6e:	1aed      	subeq	r5, r5, r3
 8006f70:	68a3      	ldr	r3, [r4, #8]
 8006f72:	bf0c      	ite	eq
 8006f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f78:	2500      	movne	r5, #0
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	bfc4      	itt	gt
 8006f7e:	1a9b      	subgt	r3, r3, r2
 8006f80:	18ed      	addgt	r5, r5, r3
 8006f82:	2600      	movs	r6, #0
 8006f84:	341a      	adds	r4, #26
 8006f86:	42b5      	cmp	r5, r6
 8006f88:	d11a      	bne.n	8006fc0 <_printf_common+0xc8>
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	e008      	b.n	8006fa0 <_printf_common+0xa8>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	4652      	mov	r2, sl
 8006f92:	4641      	mov	r1, r8
 8006f94:	4638      	mov	r0, r7
 8006f96:	47c8      	blx	r9
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d103      	bne.n	8006fa4 <_printf_common+0xac>
 8006f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa4:	3501      	adds	r5, #1
 8006fa6:	e7c6      	b.n	8006f36 <_printf_common+0x3e>
 8006fa8:	18e1      	adds	r1, r4, r3
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	2030      	movs	r0, #48	@ 0x30
 8006fae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fb2:	4422      	add	r2, r4
 8006fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	e7c7      	b.n	8006f50 <_printf_common+0x58>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	4641      	mov	r1, r8
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	47c8      	blx	r9
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d0e6      	beq.n	8006f9c <_printf_common+0xa4>
 8006fce:	3601      	adds	r6, #1
 8006fd0:	e7d9      	b.n	8006f86 <_printf_common+0x8e>
	...

08006fd4 <_printf_i>:
 8006fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	7e0f      	ldrb	r7, [r1, #24]
 8006fda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fdc:	2f78      	cmp	r7, #120	@ 0x78
 8006fde:	4691      	mov	r9, r2
 8006fe0:	4680      	mov	r8, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	469a      	mov	sl, r3
 8006fe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fea:	d807      	bhi.n	8006ffc <_printf_i+0x28>
 8006fec:	2f62      	cmp	r7, #98	@ 0x62
 8006fee:	d80a      	bhi.n	8007006 <_printf_i+0x32>
 8006ff0:	2f00      	cmp	r7, #0
 8006ff2:	f000 80d2 	beq.w	800719a <_printf_i+0x1c6>
 8006ff6:	2f58      	cmp	r7, #88	@ 0x58
 8006ff8:	f000 80b9 	beq.w	800716e <_printf_i+0x19a>
 8006ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007004:	e03a      	b.n	800707c <_printf_i+0xa8>
 8007006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800700a:	2b15      	cmp	r3, #21
 800700c:	d8f6      	bhi.n	8006ffc <_printf_i+0x28>
 800700e:	a101      	add	r1, pc, #4	@ (adr r1, 8007014 <_printf_i+0x40>)
 8007010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007014:	0800706d 	.word	0x0800706d
 8007018:	08007081 	.word	0x08007081
 800701c:	08006ffd 	.word	0x08006ffd
 8007020:	08006ffd 	.word	0x08006ffd
 8007024:	08006ffd 	.word	0x08006ffd
 8007028:	08006ffd 	.word	0x08006ffd
 800702c:	08007081 	.word	0x08007081
 8007030:	08006ffd 	.word	0x08006ffd
 8007034:	08006ffd 	.word	0x08006ffd
 8007038:	08006ffd 	.word	0x08006ffd
 800703c:	08006ffd 	.word	0x08006ffd
 8007040:	08007181 	.word	0x08007181
 8007044:	080070ab 	.word	0x080070ab
 8007048:	0800713b 	.word	0x0800713b
 800704c:	08006ffd 	.word	0x08006ffd
 8007050:	08006ffd 	.word	0x08006ffd
 8007054:	080071a3 	.word	0x080071a3
 8007058:	08006ffd 	.word	0x08006ffd
 800705c:	080070ab 	.word	0x080070ab
 8007060:	08006ffd 	.word	0x08006ffd
 8007064:	08006ffd 	.word	0x08006ffd
 8007068:	08007143 	.word	0x08007143
 800706c:	6833      	ldr	r3, [r6, #0]
 800706e:	1d1a      	adds	r2, r3, #4
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6032      	str	r2, [r6, #0]
 8007074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800707c:	2301      	movs	r3, #1
 800707e:	e09d      	b.n	80071bc <_printf_i+0x1e8>
 8007080:	6833      	ldr	r3, [r6, #0]
 8007082:	6820      	ldr	r0, [r4, #0]
 8007084:	1d19      	adds	r1, r3, #4
 8007086:	6031      	str	r1, [r6, #0]
 8007088:	0606      	lsls	r6, r0, #24
 800708a:	d501      	bpl.n	8007090 <_printf_i+0xbc>
 800708c:	681d      	ldr	r5, [r3, #0]
 800708e:	e003      	b.n	8007098 <_printf_i+0xc4>
 8007090:	0645      	lsls	r5, r0, #25
 8007092:	d5fb      	bpl.n	800708c <_printf_i+0xb8>
 8007094:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007098:	2d00      	cmp	r5, #0
 800709a:	da03      	bge.n	80070a4 <_printf_i+0xd0>
 800709c:	232d      	movs	r3, #45	@ 0x2d
 800709e:	426d      	negs	r5, r5
 80070a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070a4:	4859      	ldr	r0, [pc, #356]	@ (800720c <_printf_i+0x238>)
 80070a6:	230a      	movs	r3, #10
 80070a8:	e011      	b.n	80070ce <_printf_i+0xfa>
 80070aa:	6821      	ldr	r1, [r4, #0]
 80070ac:	6833      	ldr	r3, [r6, #0]
 80070ae:	0608      	lsls	r0, r1, #24
 80070b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80070b4:	d402      	bmi.n	80070bc <_printf_i+0xe8>
 80070b6:	0649      	lsls	r1, r1, #25
 80070b8:	bf48      	it	mi
 80070ba:	b2ad      	uxthmi	r5, r5
 80070bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80070be:	4853      	ldr	r0, [pc, #332]	@ (800720c <_printf_i+0x238>)
 80070c0:	6033      	str	r3, [r6, #0]
 80070c2:	bf14      	ite	ne
 80070c4:	230a      	movne	r3, #10
 80070c6:	2308      	moveq	r3, #8
 80070c8:	2100      	movs	r1, #0
 80070ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070ce:	6866      	ldr	r6, [r4, #4]
 80070d0:	60a6      	str	r6, [r4, #8]
 80070d2:	2e00      	cmp	r6, #0
 80070d4:	bfa2      	ittt	ge
 80070d6:	6821      	ldrge	r1, [r4, #0]
 80070d8:	f021 0104 	bicge.w	r1, r1, #4
 80070dc:	6021      	strge	r1, [r4, #0]
 80070de:	b90d      	cbnz	r5, 80070e4 <_printf_i+0x110>
 80070e0:	2e00      	cmp	r6, #0
 80070e2:	d04b      	beq.n	800717c <_printf_i+0x1a8>
 80070e4:	4616      	mov	r6, r2
 80070e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80070ea:	fb03 5711 	mls	r7, r3, r1, r5
 80070ee:	5dc7      	ldrb	r7, [r0, r7]
 80070f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070f4:	462f      	mov	r7, r5
 80070f6:	42bb      	cmp	r3, r7
 80070f8:	460d      	mov	r5, r1
 80070fa:	d9f4      	bls.n	80070e6 <_printf_i+0x112>
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d10b      	bne.n	8007118 <_printf_i+0x144>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	07df      	lsls	r7, r3, #31
 8007104:	d508      	bpl.n	8007118 <_printf_i+0x144>
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	6861      	ldr	r1, [r4, #4]
 800710a:	4299      	cmp	r1, r3
 800710c:	bfde      	ittt	le
 800710e:	2330      	movle	r3, #48	@ 0x30
 8007110:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007114:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007118:	1b92      	subs	r2, r2, r6
 800711a:	6122      	str	r2, [r4, #16]
 800711c:	f8cd a000 	str.w	sl, [sp]
 8007120:	464b      	mov	r3, r9
 8007122:	aa03      	add	r2, sp, #12
 8007124:	4621      	mov	r1, r4
 8007126:	4640      	mov	r0, r8
 8007128:	f7ff fee6 	bl	8006ef8 <_printf_common>
 800712c:	3001      	adds	r0, #1
 800712e:	d14a      	bne.n	80071c6 <_printf_i+0x1f2>
 8007130:	f04f 30ff 	mov.w	r0, #4294967295
 8007134:	b004      	add	sp, #16
 8007136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	f043 0320 	orr.w	r3, r3, #32
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	4833      	ldr	r0, [pc, #204]	@ (8007210 <_printf_i+0x23c>)
 8007144:	2778      	movs	r7, #120	@ 0x78
 8007146:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	6831      	ldr	r1, [r6, #0]
 800714e:	061f      	lsls	r7, r3, #24
 8007150:	f851 5b04 	ldr.w	r5, [r1], #4
 8007154:	d402      	bmi.n	800715c <_printf_i+0x188>
 8007156:	065f      	lsls	r7, r3, #25
 8007158:	bf48      	it	mi
 800715a:	b2ad      	uxthmi	r5, r5
 800715c:	6031      	str	r1, [r6, #0]
 800715e:	07d9      	lsls	r1, r3, #31
 8007160:	bf44      	itt	mi
 8007162:	f043 0320 	orrmi.w	r3, r3, #32
 8007166:	6023      	strmi	r3, [r4, #0]
 8007168:	b11d      	cbz	r5, 8007172 <_printf_i+0x19e>
 800716a:	2310      	movs	r3, #16
 800716c:	e7ac      	b.n	80070c8 <_printf_i+0xf4>
 800716e:	4827      	ldr	r0, [pc, #156]	@ (800720c <_printf_i+0x238>)
 8007170:	e7e9      	b.n	8007146 <_printf_i+0x172>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	f023 0320 	bic.w	r3, r3, #32
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	e7f6      	b.n	800716a <_printf_i+0x196>
 800717c:	4616      	mov	r6, r2
 800717e:	e7bd      	b.n	80070fc <_printf_i+0x128>
 8007180:	6833      	ldr	r3, [r6, #0]
 8007182:	6825      	ldr	r5, [r4, #0]
 8007184:	6961      	ldr	r1, [r4, #20]
 8007186:	1d18      	adds	r0, r3, #4
 8007188:	6030      	str	r0, [r6, #0]
 800718a:	062e      	lsls	r6, r5, #24
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	d501      	bpl.n	8007194 <_printf_i+0x1c0>
 8007190:	6019      	str	r1, [r3, #0]
 8007192:	e002      	b.n	800719a <_printf_i+0x1c6>
 8007194:	0668      	lsls	r0, r5, #25
 8007196:	d5fb      	bpl.n	8007190 <_printf_i+0x1bc>
 8007198:	8019      	strh	r1, [r3, #0]
 800719a:	2300      	movs	r3, #0
 800719c:	6123      	str	r3, [r4, #16]
 800719e:	4616      	mov	r6, r2
 80071a0:	e7bc      	b.n	800711c <_printf_i+0x148>
 80071a2:	6833      	ldr	r3, [r6, #0]
 80071a4:	1d1a      	adds	r2, r3, #4
 80071a6:	6032      	str	r2, [r6, #0]
 80071a8:	681e      	ldr	r6, [r3, #0]
 80071aa:	6862      	ldr	r2, [r4, #4]
 80071ac:	2100      	movs	r1, #0
 80071ae:	4630      	mov	r0, r6
 80071b0:	f7f9 f82e 	bl	8000210 <memchr>
 80071b4:	b108      	cbz	r0, 80071ba <_printf_i+0x1e6>
 80071b6:	1b80      	subs	r0, r0, r6
 80071b8:	6060      	str	r0, [r4, #4]
 80071ba:	6863      	ldr	r3, [r4, #4]
 80071bc:	6123      	str	r3, [r4, #16]
 80071be:	2300      	movs	r3, #0
 80071c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071c4:	e7aa      	b.n	800711c <_printf_i+0x148>
 80071c6:	6923      	ldr	r3, [r4, #16]
 80071c8:	4632      	mov	r2, r6
 80071ca:	4649      	mov	r1, r9
 80071cc:	4640      	mov	r0, r8
 80071ce:	47d0      	blx	sl
 80071d0:	3001      	adds	r0, #1
 80071d2:	d0ad      	beq.n	8007130 <_printf_i+0x15c>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	079b      	lsls	r3, r3, #30
 80071d8:	d413      	bmi.n	8007202 <_printf_i+0x22e>
 80071da:	68e0      	ldr	r0, [r4, #12]
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	4298      	cmp	r0, r3
 80071e0:	bfb8      	it	lt
 80071e2:	4618      	movlt	r0, r3
 80071e4:	e7a6      	b.n	8007134 <_printf_i+0x160>
 80071e6:	2301      	movs	r3, #1
 80071e8:	4632      	mov	r2, r6
 80071ea:	4649      	mov	r1, r9
 80071ec:	4640      	mov	r0, r8
 80071ee:	47d0      	blx	sl
 80071f0:	3001      	adds	r0, #1
 80071f2:	d09d      	beq.n	8007130 <_printf_i+0x15c>
 80071f4:	3501      	adds	r5, #1
 80071f6:	68e3      	ldr	r3, [r4, #12]
 80071f8:	9903      	ldr	r1, [sp, #12]
 80071fa:	1a5b      	subs	r3, r3, r1
 80071fc:	42ab      	cmp	r3, r5
 80071fe:	dcf2      	bgt.n	80071e6 <_printf_i+0x212>
 8007200:	e7eb      	b.n	80071da <_printf_i+0x206>
 8007202:	2500      	movs	r5, #0
 8007204:	f104 0619 	add.w	r6, r4, #25
 8007208:	e7f5      	b.n	80071f6 <_printf_i+0x222>
 800720a:	bf00      	nop
 800720c:	0800b23a 	.word	0x0800b23a
 8007210:	0800b24b 	.word	0x0800b24b

08007214 <_scanf_float>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	b087      	sub	sp, #28
 800721a:	4617      	mov	r7, r2
 800721c:	9303      	str	r3, [sp, #12]
 800721e:	688b      	ldr	r3, [r1, #8]
 8007220:	1e5a      	subs	r2, r3, #1
 8007222:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007226:	bf81      	itttt	hi
 8007228:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800722c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007230:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007234:	608b      	strhi	r3, [r1, #8]
 8007236:	680b      	ldr	r3, [r1, #0]
 8007238:	460a      	mov	r2, r1
 800723a:	f04f 0500 	mov.w	r5, #0
 800723e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007242:	f842 3b1c 	str.w	r3, [r2], #28
 8007246:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800724a:	4680      	mov	r8, r0
 800724c:	460c      	mov	r4, r1
 800724e:	bf98      	it	ls
 8007250:	f04f 0b00 	movls.w	fp, #0
 8007254:	9201      	str	r2, [sp, #4]
 8007256:	4616      	mov	r6, r2
 8007258:	46aa      	mov	sl, r5
 800725a:	46a9      	mov	r9, r5
 800725c:	9502      	str	r5, [sp, #8]
 800725e:	68a2      	ldr	r2, [r4, #8]
 8007260:	b152      	cbz	r2, 8007278 <_scanf_float+0x64>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b4e      	cmp	r3, #78	@ 0x4e
 8007268:	d864      	bhi.n	8007334 <_scanf_float+0x120>
 800726a:	2b40      	cmp	r3, #64	@ 0x40
 800726c:	d83c      	bhi.n	80072e8 <_scanf_float+0xd4>
 800726e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007272:	b2c8      	uxtb	r0, r1
 8007274:	280e      	cmp	r0, #14
 8007276:	d93a      	bls.n	80072ee <_scanf_float+0xda>
 8007278:	f1b9 0f00 	cmp.w	r9, #0
 800727c:	d003      	beq.n	8007286 <_scanf_float+0x72>
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	f10a 3aff 	add.w	sl, sl, #4294967295
 800728a:	f1ba 0f01 	cmp.w	sl, #1
 800728e:	f200 8117 	bhi.w	80074c0 <_scanf_float+0x2ac>
 8007292:	9b01      	ldr	r3, [sp, #4]
 8007294:	429e      	cmp	r6, r3
 8007296:	f200 8108 	bhi.w	80074aa <_scanf_float+0x296>
 800729a:	2001      	movs	r0, #1
 800729c:	b007      	add	sp, #28
 800729e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80072a6:	2a0d      	cmp	r2, #13
 80072a8:	d8e6      	bhi.n	8007278 <_scanf_float+0x64>
 80072aa:	a101      	add	r1, pc, #4	@ (adr r1, 80072b0 <_scanf_float+0x9c>)
 80072ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80072b0:	080073f7 	.word	0x080073f7
 80072b4:	08007279 	.word	0x08007279
 80072b8:	08007279 	.word	0x08007279
 80072bc:	08007279 	.word	0x08007279
 80072c0:	08007457 	.word	0x08007457
 80072c4:	0800742f 	.word	0x0800742f
 80072c8:	08007279 	.word	0x08007279
 80072cc:	08007279 	.word	0x08007279
 80072d0:	08007405 	.word	0x08007405
 80072d4:	08007279 	.word	0x08007279
 80072d8:	08007279 	.word	0x08007279
 80072dc:	08007279 	.word	0x08007279
 80072e0:	08007279 	.word	0x08007279
 80072e4:	080073bd 	.word	0x080073bd
 80072e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80072ec:	e7db      	b.n	80072a6 <_scanf_float+0x92>
 80072ee:	290e      	cmp	r1, #14
 80072f0:	d8c2      	bhi.n	8007278 <_scanf_float+0x64>
 80072f2:	a001      	add	r0, pc, #4	@ (adr r0, 80072f8 <_scanf_float+0xe4>)
 80072f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80072f8:	080073ad 	.word	0x080073ad
 80072fc:	08007279 	.word	0x08007279
 8007300:	080073ad 	.word	0x080073ad
 8007304:	08007443 	.word	0x08007443
 8007308:	08007279 	.word	0x08007279
 800730c:	08007355 	.word	0x08007355
 8007310:	08007393 	.word	0x08007393
 8007314:	08007393 	.word	0x08007393
 8007318:	08007393 	.word	0x08007393
 800731c:	08007393 	.word	0x08007393
 8007320:	08007393 	.word	0x08007393
 8007324:	08007393 	.word	0x08007393
 8007328:	08007393 	.word	0x08007393
 800732c:	08007393 	.word	0x08007393
 8007330:	08007393 	.word	0x08007393
 8007334:	2b6e      	cmp	r3, #110	@ 0x6e
 8007336:	d809      	bhi.n	800734c <_scanf_float+0x138>
 8007338:	2b60      	cmp	r3, #96	@ 0x60
 800733a:	d8b2      	bhi.n	80072a2 <_scanf_float+0x8e>
 800733c:	2b54      	cmp	r3, #84	@ 0x54
 800733e:	d07b      	beq.n	8007438 <_scanf_float+0x224>
 8007340:	2b59      	cmp	r3, #89	@ 0x59
 8007342:	d199      	bne.n	8007278 <_scanf_float+0x64>
 8007344:	2d07      	cmp	r5, #7
 8007346:	d197      	bne.n	8007278 <_scanf_float+0x64>
 8007348:	2508      	movs	r5, #8
 800734a:	e02c      	b.n	80073a6 <_scanf_float+0x192>
 800734c:	2b74      	cmp	r3, #116	@ 0x74
 800734e:	d073      	beq.n	8007438 <_scanf_float+0x224>
 8007350:	2b79      	cmp	r3, #121	@ 0x79
 8007352:	e7f6      	b.n	8007342 <_scanf_float+0x12e>
 8007354:	6821      	ldr	r1, [r4, #0]
 8007356:	05c8      	lsls	r0, r1, #23
 8007358:	d51b      	bpl.n	8007392 <_scanf_float+0x17e>
 800735a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800735e:	6021      	str	r1, [r4, #0]
 8007360:	f109 0901 	add.w	r9, r9, #1
 8007364:	f1bb 0f00 	cmp.w	fp, #0
 8007368:	d003      	beq.n	8007372 <_scanf_float+0x15e>
 800736a:	3201      	adds	r2, #1
 800736c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007370:	60a2      	str	r2, [r4, #8]
 8007372:	68a3      	ldr	r3, [r4, #8]
 8007374:	3b01      	subs	r3, #1
 8007376:	60a3      	str	r3, [r4, #8]
 8007378:	6923      	ldr	r3, [r4, #16]
 800737a:	3301      	adds	r3, #1
 800737c:	6123      	str	r3, [r4, #16]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	3b01      	subs	r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	607b      	str	r3, [r7, #4]
 8007386:	f340 8087 	ble.w	8007498 <_scanf_float+0x284>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	3301      	adds	r3, #1
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	e765      	b.n	800725e <_scanf_float+0x4a>
 8007392:	eb1a 0105 	adds.w	r1, sl, r5
 8007396:	f47f af6f 	bne.w	8007278 <_scanf_float+0x64>
 800739a:	6822      	ldr	r2, [r4, #0]
 800739c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80073a0:	6022      	str	r2, [r4, #0]
 80073a2:	460d      	mov	r5, r1
 80073a4:	468a      	mov	sl, r1
 80073a6:	f806 3b01 	strb.w	r3, [r6], #1
 80073aa:	e7e2      	b.n	8007372 <_scanf_float+0x15e>
 80073ac:	6822      	ldr	r2, [r4, #0]
 80073ae:	0610      	lsls	r0, r2, #24
 80073b0:	f57f af62 	bpl.w	8007278 <_scanf_float+0x64>
 80073b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073b8:	6022      	str	r2, [r4, #0]
 80073ba:	e7f4      	b.n	80073a6 <_scanf_float+0x192>
 80073bc:	f1ba 0f00 	cmp.w	sl, #0
 80073c0:	d10e      	bne.n	80073e0 <_scanf_float+0x1cc>
 80073c2:	f1b9 0f00 	cmp.w	r9, #0
 80073c6:	d10e      	bne.n	80073e6 <_scanf_float+0x1d2>
 80073c8:	6822      	ldr	r2, [r4, #0]
 80073ca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80073ce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80073d2:	d108      	bne.n	80073e6 <_scanf_float+0x1d2>
 80073d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073d8:	6022      	str	r2, [r4, #0]
 80073da:	f04f 0a01 	mov.w	sl, #1
 80073de:	e7e2      	b.n	80073a6 <_scanf_float+0x192>
 80073e0:	f1ba 0f02 	cmp.w	sl, #2
 80073e4:	d055      	beq.n	8007492 <_scanf_float+0x27e>
 80073e6:	2d01      	cmp	r5, #1
 80073e8:	d002      	beq.n	80073f0 <_scanf_float+0x1dc>
 80073ea:	2d04      	cmp	r5, #4
 80073ec:	f47f af44 	bne.w	8007278 <_scanf_float+0x64>
 80073f0:	3501      	adds	r5, #1
 80073f2:	b2ed      	uxtb	r5, r5
 80073f4:	e7d7      	b.n	80073a6 <_scanf_float+0x192>
 80073f6:	f1ba 0f01 	cmp.w	sl, #1
 80073fa:	f47f af3d 	bne.w	8007278 <_scanf_float+0x64>
 80073fe:	f04f 0a02 	mov.w	sl, #2
 8007402:	e7d0      	b.n	80073a6 <_scanf_float+0x192>
 8007404:	b97d      	cbnz	r5, 8007426 <_scanf_float+0x212>
 8007406:	f1b9 0f00 	cmp.w	r9, #0
 800740a:	f47f af38 	bne.w	800727e <_scanf_float+0x6a>
 800740e:	6822      	ldr	r2, [r4, #0]
 8007410:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007414:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007418:	f040 8108 	bne.w	800762c <_scanf_float+0x418>
 800741c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007420:	6022      	str	r2, [r4, #0]
 8007422:	2501      	movs	r5, #1
 8007424:	e7bf      	b.n	80073a6 <_scanf_float+0x192>
 8007426:	2d03      	cmp	r5, #3
 8007428:	d0e2      	beq.n	80073f0 <_scanf_float+0x1dc>
 800742a:	2d05      	cmp	r5, #5
 800742c:	e7de      	b.n	80073ec <_scanf_float+0x1d8>
 800742e:	2d02      	cmp	r5, #2
 8007430:	f47f af22 	bne.w	8007278 <_scanf_float+0x64>
 8007434:	2503      	movs	r5, #3
 8007436:	e7b6      	b.n	80073a6 <_scanf_float+0x192>
 8007438:	2d06      	cmp	r5, #6
 800743a:	f47f af1d 	bne.w	8007278 <_scanf_float+0x64>
 800743e:	2507      	movs	r5, #7
 8007440:	e7b1      	b.n	80073a6 <_scanf_float+0x192>
 8007442:	6822      	ldr	r2, [r4, #0]
 8007444:	0591      	lsls	r1, r2, #22
 8007446:	f57f af17 	bpl.w	8007278 <_scanf_float+0x64>
 800744a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800744e:	6022      	str	r2, [r4, #0]
 8007450:	f8cd 9008 	str.w	r9, [sp, #8]
 8007454:	e7a7      	b.n	80073a6 <_scanf_float+0x192>
 8007456:	6822      	ldr	r2, [r4, #0]
 8007458:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800745c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007460:	d006      	beq.n	8007470 <_scanf_float+0x25c>
 8007462:	0550      	lsls	r0, r2, #21
 8007464:	f57f af08 	bpl.w	8007278 <_scanf_float+0x64>
 8007468:	f1b9 0f00 	cmp.w	r9, #0
 800746c:	f000 80de 	beq.w	800762c <_scanf_float+0x418>
 8007470:	0591      	lsls	r1, r2, #22
 8007472:	bf58      	it	pl
 8007474:	9902      	ldrpl	r1, [sp, #8]
 8007476:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800747a:	bf58      	it	pl
 800747c:	eba9 0101 	subpl.w	r1, r9, r1
 8007480:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007484:	bf58      	it	pl
 8007486:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800748a:	6022      	str	r2, [r4, #0]
 800748c:	f04f 0900 	mov.w	r9, #0
 8007490:	e789      	b.n	80073a6 <_scanf_float+0x192>
 8007492:	f04f 0a03 	mov.w	sl, #3
 8007496:	e786      	b.n	80073a6 <_scanf_float+0x192>
 8007498:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800749c:	4639      	mov	r1, r7
 800749e:	4640      	mov	r0, r8
 80074a0:	4798      	blx	r3
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f43f aedb 	beq.w	800725e <_scanf_float+0x4a>
 80074a8:	e6e6      	b.n	8007278 <_scanf_float+0x64>
 80074aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074b2:	463a      	mov	r2, r7
 80074b4:	4640      	mov	r0, r8
 80074b6:	4798      	blx	r3
 80074b8:	6923      	ldr	r3, [r4, #16]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	6123      	str	r3, [r4, #16]
 80074be:	e6e8      	b.n	8007292 <_scanf_float+0x7e>
 80074c0:	1e6b      	subs	r3, r5, #1
 80074c2:	2b06      	cmp	r3, #6
 80074c4:	d824      	bhi.n	8007510 <_scanf_float+0x2fc>
 80074c6:	2d02      	cmp	r5, #2
 80074c8:	d836      	bhi.n	8007538 <_scanf_float+0x324>
 80074ca:	9b01      	ldr	r3, [sp, #4]
 80074cc:	429e      	cmp	r6, r3
 80074ce:	f67f aee4 	bls.w	800729a <_scanf_float+0x86>
 80074d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074da:	463a      	mov	r2, r7
 80074dc:	4640      	mov	r0, r8
 80074de:	4798      	blx	r3
 80074e0:	6923      	ldr	r3, [r4, #16]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	6123      	str	r3, [r4, #16]
 80074e6:	e7f0      	b.n	80074ca <_scanf_float+0x2b6>
 80074e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074ec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80074f0:	463a      	mov	r2, r7
 80074f2:	4640      	mov	r0, r8
 80074f4:	4798      	blx	r3
 80074f6:	6923      	ldr	r3, [r4, #16]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	6123      	str	r3, [r4, #16]
 80074fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007500:	fa5f fa8a 	uxtb.w	sl, sl
 8007504:	f1ba 0f02 	cmp.w	sl, #2
 8007508:	d1ee      	bne.n	80074e8 <_scanf_float+0x2d4>
 800750a:	3d03      	subs	r5, #3
 800750c:	b2ed      	uxtb	r5, r5
 800750e:	1b76      	subs	r6, r6, r5
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	05da      	lsls	r2, r3, #23
 8007514:	d530      	bpl.n	8007578 <_scanf_float+0x364>
 8007516:	055b      	lsls	r3, r3, #21
 8007518:	d511      	bpl.n	800753e <_scanf_float+0x32a>
 800751a:	9b01      	ldr	r3, [sp, #4]
 800751c:	429e      	cmp	r6, r3
 800751e:	f67f aebc 	bls.w	800729a <_scanf_float+0x86>
 8007522:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007526:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800752a:	463a      	mov	r2, r7
 800752c:	4640      	mov	r0, r8
 800752e:	4798      	blx	r3
 8007530:	6923      	ldr	r3, [r4, #16]
 8007532:	3b01      	subs	r3, #1
 8007534:	6123      	str	r3, [r4, #16]
 8007536:	e7f0      	b.n	800751a <_scanf_float+0x306>
 8007538:	46aa      	mov	sl, r5
 800753a:	46b3      	mov	fp, r6
 800753c:	e7de      	b.n	80074fc <_scanf_float+0x2e8>
 800753e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	2965      	cmp	r1, #101	@ 0x65
 8007546:	f103 33ff 	add.w	r3, r3, #4294967295
 800754a:	f106 35ff 	add.w	r5, r6, #4294967295
 800754e:	6123      	str	r3, [r4, #16]
 8007550:	d00c      	beq.n	800756c <_scanf_float+0x358>
 8007552:	2945      	cmp	r1, #69	@ 0x45
 8007554:	d00a      	beq.n	800756c <_scanf_float+0x358>
 8007556:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800755a:	463a      	mov	r2, r7
 800755c:	4640      	mov	r0, r8
 800755e:	4798      	blx	r3
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007566:	3b01      	subs	r3, #1
 8007568:	1eb5      	subs	r5, r6, #2
 800756a:	6123      	str	r3, [r4, #16]
 800756c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007570:	463a      	mov	r2, r7
 8007572:	4640      	mov	r0, r8
 8007574:	4798      	blx	r3
 8007576:	462e      	mov	r6, r5
 8007578:	6822      	ldr	r2, [r4, #0]
 800757a:	f012 0210 	ands.w	r2, r2, #16
 800757e:	d001      	beq.n	8007584 <_scanf_float+0x370>
 8007580:	2000      	movs	r0, #0
 8007582:	e68b      	b.n	800729c <_scanf_float+0x88>
 8007584:	7032      	strb	r2, [r6, #0]
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800758c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007590:	d11c      	bne.n	80075cc <_scanf_float+0x3b8>
 8007592:	9b02      	ldr	r3, [sp, #8]
 8007594:	454b      	cmp	r3, r9
 8007596:	eba3 0209 	sub.w	r2, r3, r9
 800759a:	d123      	bne.n	80075e4 <_scanf_float+0x3d0>
 800759c:	9901      	ldr	r1, [sp, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	4640      	mov	r0, r8
 80075a2:	f002 fcfd 	bl	8009fa0 <_strtod_r>
 80075a6:	9b03      	ldr	r3, [sp, #12]
 80075a8:	6821      	ldr	r1, [r4, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f011 0f02 	tst.w	r1, #2
 80075b0:	ec57 6b10 	vmov	r6, r7, d0
 80075b4:	f103 0204 	add.w	r2, r3, #4
 80075b8:	d01f      	beq.n	80075fa <_scanf_float+0x3e6>
 80075ba:	9903      	ldr	r1, [sp, #12]
 80075bc:	600a      	str	r2, [r1, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	e9c3 6700 	strd	r6, r7, [r3]
 80075c4:	68e3      	ldr	r3, [r4, #12]
 80075c6:	3301      	adds	r3, #1
 80075c8:	60e3      	str	r3, [r4, #12]
 80075ca:	e7d9      	b.n	8007580 <_scanf_float+0x36c>
 80075cc:	9b04      	ldr	r3, [sp, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d0e4      	beq.n	800759c <_scanf_float+0x388>
 80075d2:	9905      	ldr	r1, [sp, #20]
 80075d4:	230a      	movs	r3, #10
 80075d6:	3101      	adds	r1, #1
 80075d8:	4640      	mov	r0, r8
 80075da:	f002 fd61 	bl	800a0a0 <_strtol_r>
 80075de:	9b04      	ldr	r3, [sp, #16]
 80075e0:	9e05      	ldr	r6, [sp, #20]
 80075e2:	1ac2      	subs	r2, r0, r3
 80075e4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80075e8:	429e      	cmp	r6, r3
 80075ea:	bf28      	it	cs
 80075ec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80075f0:	4910      	ldr	r1, [pc, #64]	@ (8007634 <_scanf_float+0x420>)
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 f954 	bl	80078a0 <siprintf>
 80075f8:	e7d0      	b.n	800759c <_scanf_float+0x388>
 80075fa:	f011 0f04 	tst.w	r1, #4
 80075fe:	9903      	ldr	r1, [sp, #12]
 8007600:	600a      	str	r2, [r1, #0]
 8007602:	d1dc      	bne.n	80075be <_scanf_float+0x3aa>
 8007604:	681d      	ldr	r5, [r3, #0]
 8007606:	4632      	mov	r2, r6
 8007608:	463b      	mov	r3, r7
 800760a:	4630      	mov	r0, r6
 800760c:	4639      	mov	r1, r7
 800760e:	f7f9 faad 	bl	8000b6c <__aeabi_dcmpun>
 8007612:	b128      	cbz	r0, 8007620 <_scanf_float+0x40c>
 8007614:	4808      	ldr	r0, [pc, #32]	@ (8007638 <_scanf_float+0x424>)
 8007616:	f000 fabb 	bl	8007b90 <nanf>
 800761a:	ed85 0a00 	vstr	s0, [r5]
 800761e:	e7d1      	b.n	80075c4 <_scanf_float+0x3b0>
 8007620:	4630      	mov	r0, r6
 8007622:	4639      	mov	r1, r7
 8007624:	f7f9 fb00 	bl	8000c28 <__aeabi_d2f>
 8007628:	6028      	str	r0, [r5, #0]
 800762a:	e7cb      	b.n	80075c4 <_scanf_float+0x3b0>
 800762c:	f04f 0900 	mov.w	r9, #0
 8007630:	e629      	b.n	8007286 <_scanf_float+0x72>
 8007632:	bf00      	nop
 8007634:	0800b25c 	.word	0x0800b25c
 8007638:	0800b5f5 	.word	0x0800b5f5

0800763c <std>:
 800763c:	2300      	movs	r3, #0
 800763e:	b510      	push	{r4, lr}
 8007640:	4604      	mov	r4, r0
 8007642:	e9c0 3300 	strd	r3, r3, [r0]
 8007646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800764a:	6083      	str	r3, [r0, #8]
 800764c:	8181      	strh	r1, [r0, #12]
 800764e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007650:	81c2      	strh	r2, [r0, #14]
 8007652:	6183      	str	r3, [r0, #24]
 8007654:	4619      	mov	r1, r3
 8007656:	2208      	movs	r2, #8
 8007658:	305c      	adds	r0, #92	@ 0x5c
 800765a:	f000 fa19 	bl	8007a90 <memset>
 800765e:	4b0d      	ldr	r3, [pc, #52]	@ (8007694 <std+0x58>)
 8007660:	6263      	str	r3, [r4, #36]	@ 0x24
 8007662:	4b0d      	ldr	r3, [pc, #52]	@ (8007698 <std+0x5c>)
 8007664:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007666:	4b0d      	ldr	r3, [pc, #52]	@ (800769c <std+0x60>)
 8007668:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800766a:	4b0d      	ldr	r3, [pc, #52]	@ (80076a0 <std+0x64>)
 800766c:	6323      	str	r3, [r4, #48]	@ 0x30
 800766e:	4b0d      	ldr	r3, [pc, #52]	@ (80076a4 <std+0x68>)
 8007670:	6224      	str	r4, [r4, #32]
 8007672:	429c      	cmp	r4, r3
 8007674:	d006      	beq.n	8007684 <std+0x48>
 8007676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800767a:	4294      	cmp	r4, r2
 800767c:	d002      	beq.n	8007684 <std+0x48>
 800767e:	33d0      	adds	r3, #208	@ 0xd0
 8007680:	429c      	cmp	r4, r3
 8007682:	d105      	bne.n	8007690 <std+0x54>
 8007684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800768c:	f000 ba7c 	b.w	8007b88 <__retarget_lock_init_recursive>
 8007690:	bd10      	pop	{r4, pc}
 8007692:	bf00      	nop
 8007694:	080078e1 	.word	0x080078e1
 8007698:	08007903 	.word	0x08007903
 800769c:	0800793b 	.word	0x0800793b
 80076a0:	0800795f 	.word	0x0800795f
 80076a4:	2000044c 	.word	0x2000044c

080076a8 <stdio_exit_handler>:
 80076a8:	4a02      	ldr	r2, [pc, #8]	@ (80076b4 <stdio_exit_handler+0xc>)
 80076aa:	4903      	ldr	r1, [pc, #12]	@ (80076b8 <stdio_exit_handler+0x10>)
 80076ac:	4803      	ldr	r0, [pc, #12]	@ (80076bc <stdio_exit_handler+0x14>)
 80076ae:	f000 b869 	b.w	8007784 <_fwalk_sglue>
 80076b2:	bf00      	nop
 80076b4:	20000020 	.word	0x20000020
 80076b8:	0800a6e1 	.word	0x0800a6e1
 80076bc:	20000030 	.word	0x20000030

080076c0 <cleanup_stdio>:
 80076c0:	6841      	ldr	r1, [r0, #4]
 80076c2:	4b0c      	ldr	r3, [pc, #48]	@ (80076f4 <cleanup_stdio+0x34>)
 80076c4:	4299      	cmp	r1, r3
 80076c6:	b510      	push	{r4, lr}
 80076c8:	4604      	mov	r4, r0
 80076ca:	d001      	beq.n	80076d0 <cleanup_stdio+0x10>
 80076cc:	f003 f808 	bl	800a6e0 <_fflush_r>
 80076d0:	68a1      	ldr	r1, [r4, #8]
 80076d2:	4b09      	ldr	r3, [pc, #36]	@ (80076f8 <cleanup_stdio+0x38>)
 80076d4:	4299      	cmp	r1, r3
 80076d6:	d002      	beq.n	80076de <cleanup_stdio+0x1e>
 80076d8:	4620      	mov	r0, r4
 80076da:	f003 f801 	bl	800a6e0 <_fflush_r>
 80076de:	68e1      	ldr	r1, [r4, #12]
 80076e0:	4b06      	ldr	r3, [pc, #24]	@ (80076fc <cleanup_stdio+0x3c>)
 80076e2:	4299      	cmp	r1, r3
 80076e4:	d004      	beq.n	80076f0 <cleanup_stdio+0x30>
 80076e6:	4620      	mov	r0, r4
 80076e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ec:	f002 bff8 	b.w	800a6e0 <_fflush_r>
 80076f0:	bd10      	pop	{r4, pc}
 80076f2:	bf00      	nop
 80076f4:	2000044c 	.word	0x2000044c
 80076f8:	200004b4 	.word	0x200004b4
 80076fc:	2000051c 	.word	0x2000051c

08007700 <global_stdio_init.part.0>:
 8007700:	b510      	push	{r4, lr}
 8007702:	4b0b      	ldr	r3, [pc, #44]	@ (8007730 <global_stdio_init.part.0+0x30>)
 8007704:	4c0b      	ldr	r4, [pc, #44]	@ (8007734 <global_stdio_init.part.0+0x34>)
 8007706:	4a0c      	ldr	r2, [pc, #48]	@ (8007738 <global_stdio_init.part.0+0x38>)
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	4620      	mov	r0, r4
 800770c:	2200      	movs	r2, #0
 800770e:	2104      	movs	r1, #4
 8007710:	f7ff ff94 	bl	800763c <std>
 8007714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007718:	2201      	movs	r2, #1
 800771a:	2109      	movs	r1, #9
 800771c:	f7ff ff8e 	bl	800763c <std>
 8007720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007724:	2202      	movs	r2, #2
 8007726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800772a:	2112      	movs	r1, #18
 800772c:	f7ff bf86 	b.w	800763c <std>
 8007730:	20000584 	.word	0x20000584
 8007734:	2000044c 	.word	0x2000044c
 8007738:	080076a9 	.word	0x080076a9

0800773c <__sfp_lock_acquire>:
 800773c:	4801      	ldr	r0, [pc, #4]	@ (8007744 <__sfp_lock_acquire+0x8>)
 800773e:	f000 ba24 	b.w	8007b8a <__retarget_lock_acquire_recursive>
 8007742:	bf00      	nop
 8007744:	2000058d 	.word	0x2000058d

08007748 <__sfp_lock_release>:
 8007748:	4801      	ldr	r0, [pc, #4]	@ (8007750 <__sfp_lock_release+0x8>)
 800774a:	f000 ba1f 	b.w	8007b8c <__retarget_lock_release_recursive>
 800774e:	bf00      	nop
 8007750:	2000058d 	.word	0x2000058d

08007754 <__sinit>:
 8007754:	b510      	push	{r4, lr}
 8007756:	4604      	mov	r4, r0
 8007758:	f7ff fff0 	bl	800773c <__sfp_lock_acquire>
 800775c:	6a23      	ldr	r3, [r4, #32]
 800775e:	b11b      	cbz	r3, 8007768 <__sinit+0x14>
 8007760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007764:	f7ff bff0 	b.w	8007748 <__sfp_lock_release>
 8007768:	4b04      	ldr	r3, [pc, #16]	@ (800777c <__sinit+0x28>)
 800776a:	6223      	str	r3, [r4, #32]
 800776c:	4b04      	ldr	r3, [pc, #16]	@ (8007780 <__sinit+0x2c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1f5      	bne.n	8007760 <__sinit+0xc>
 8007774:	f7ff ffc4 	bl	8007700 <global_stdio_init.part.0>
 8007778:	e7f2      	b.n	8007760 <__sinit+0xc>
 800777a:	bf00      	nop
 800777c:	080076c1 	.word	0x080076c1
 8007780:	20000584 	.word	0x20000584

08007784 <_fwalk_sglue>:
 8007784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007788:	4607      	mov	r7, r0
 800778a:	4688      	mov	r8, r1
 800778c:	4614      	mov	r4, r2
 800778e:	2600      	movs	r6, #0
 8007790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007794:	f1b9 0901 	subs.w	r9, r9, #1
 8007798:	d505      	bpl.n	80077a6 <_fwalk_sglue+0x22>
 800779a:	6824      	ldr	r4, [r4, #0]
 800779c:	2c00      	cmp	r4, #0
 800779e:	d1f7      	bne.n	8007790 <_fwalk_sglue+0xc>
 80077a0:	4630      	mov	r0, r6
 80077a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077a6:	89ab      	ldrh	r3, [r5, #12]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d907      	bls.n	80077bc <_fwalk_sglue+0x38>
 80077ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077b0:	3301      	adds	r3, #1
 80077b2:	d003      	beq.n	80077bc <_fwalk_sglue+0x38>
 80077b4:	4629      	mov	r1, r5
 80077b6:	4638      	mov	r0, r7
 80077b8:	47c0      	blx	r8
 80077ba:	4306      	orrs	r6, r0
 80077bc:	3568      	adds	r5, #104	@ 0x68
 80077be:	e7e9      	b.n	8007794 <_fwalk_sglue+0x10>

080077c0 <iprintf>:
 80077c0:	b40f      	push	{r0, r1, r2, r3}
 80077c2:	b507      	push	{r0, r1, r2, lr}
 80077c4:	4906      	ldr	r1, [pc, #24]	@ (80077e0 <iprintf+0x20>)
 80077c6:	ab04      	add	r3, sp, #16
 80077c8:	6808      	ldr	r0, [r1, #0]
 80077ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ce:	6881      	ldr	r1, [r0, #8]
 80077d0:	9301      	str	r3, [sp, #4]
 80077d2:	f002 fde9 	bl	800a3a8 <_vfiprintf_r>
 80077d6:	b003      	add	sp, #12
 80077d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077dc:	b004      	add	sp, #16
 80077de:	4770      	bx	lr
 80077e0:	2000002c 	.word	0x2000002c

080077e4 <_puts_r>:
 80077e4:	6a03      	ldr	r3, [r0, #32]
 80077e6:	b570      	push	{r4, r5, r6, lr}
 80077e8:	6884      	ldr	r4, [r0, #8]
 80077ea:	4605      	mov	r5, r0
 80077ec:	460e      	mov	r6, r1
 80077ee:	b90b      	cbnz	r3, 80077f4 <_puts_r+0x10>
 80077f0:	f7ff ffb0 	bl	8007754 <__sinit>
 80077f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077f6:	07db      	lsls	r3, r3, #31
 80077f8:	d405      	bmi.n	8007806 <_puts_r+0x22>
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	0598      	lsls	r0, r3, #22
 80077fe:	d402      	bmi.n	8007806 <_puts_r+0x22>
 8007800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007802:	f000 f9c2 	bl	8007b8a <__retarget_lock_acquire_recursive>
 8007806:	89a3      	ldrh	r3, [r4, #12]
 8007808:	0719      	lsls	r1, r3, #28
 800780a:	d502      	bpl.n	8007812 <_puts_r+0x2e>
 800780c:	6923      	ldr	r3, [r4, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d135      	bne.n	800787e <_puts_r+0x9a>
 8007812:	4621      	mov	r1, r4
 8007814:	4628      	mov	r0, r5
 8007816:	f000 f8e5 	bl	80079e4 <__swsetup_r>
 800781a:	b380      	cbz	r0, 800787e <_puts_r+0x9a>
 800781c:	f04f 35ff 	mov.w	r5, #4294967295
 8007820:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007822:	07da      	lsls	r2, r3, #31
 8007824:	d405      	bmi.n	8007832 <_puts_r+0x4e>
 8007826:	89a3      	ldrh	r3, [r4, #12]
 8007828:	059b      	lsls	r3, r3, #22
 800782a:	d402      	bmi.n	8007832 <_puts_r+0x4e>
 800782c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800782e:	f000 f9ad 	bl	8007b8c <__retarget_lock_release_recursive>
 8007832:	4628      	mov	r0, r5
 8007834:	bd70      	pop	{r4, r5, r6, pc}
 8007836:	2b00      	cmp	r3, #0
 8007838:	da04      	bge.n	8007844 <_puts_r+0x60>
 800783a:	69a2      	ldr	r2, [r4, #24]
 800783c:	429a      	cmp	r2, r3
 800783e:	dc17      	bgt.n	8007870 <_puts_r+0x8c>
 8007840:	290a      	cmp	r1, #10
 8007842:	d015      	beq.n	8007870 <_puts_r+0x8c>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	6022      	str	r2, [r4, #0]
 800784a:	7019      	strb	r1, [r3, #0]
 800784c:	68a3      	ldr	r3, [r4, #8]
 800784e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007852:	3b01      	subs	r3, #1
 8007854:	60a3      	str	r3, [r4, #8]
 8007856:	2900      	cmp	r1, #0
 8007858:	d1ed      	bne.n	8007836 <_puts_r+0x52>
 800785a:	2b00      	cmp	r3, #0
 800785c:	da11      	bge.n	8007882 <_puts_r+0x9e>
 800785e:	4622      	mov	r2, r4
 8007860:	210a      	movs	r1, #10
 8007862:	4628      	mov	r0, r5
 8007864:	f000 f87f 	bl	8007966 <__swbuf_r>
 8007868:	3001      	adds	r0, #1
 800786a:	d0d7      	beq.n	800781c <_puts_r+0x38>
 800786c:	250a      	movs	r5, #10
 800786e:	e7d7      	b.n	8007820 <_puts_r+0x3c>
 8007870:	4622      	mov	r2, r4
 8007872:	4628      	mov	r0, r5
 8007874:	f000 f877 	bl	8007966 <__swbuf_r>
 8007878:	3001      	adds	r0, #1
 800787a:	d1e7      	bne.n	800784c <_puts_r+0x68>
 800787c:	e7ce      	b.n	800781c <_puts_r+0x38>
 800787e:	3e01      	subs	r6, #1
 8007880:	e7e4      	b.n	800784c <_puts_r+0x68>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	6022      	str	r2, [r4, #0]
 8007888:	220a      	movs	r2, #10
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	e7ee      	b.n	800786c <_puts_r+0x88>
	...

08007890 <puts>:
 8007890:	4b02      	ldr	r3, [pc, #8]	@ (800789c <puts+0xc>)
 8007892:	4601      	mov	r1, r0
 8007894:	6818      	ldr	r0, [r3, #0]
 8007896:	f7ff bfa5 	b.w	80077e4 <_puts_r>
 800789a:	bf00      	nop
 800789c:	2000002c 	.word	0x2000002c

080078a0 <siprintf>:
 80078a0:	b40e      	push	{r1, r2, r3}
 80078a2:	b500      	push	{lr}
 80078a4:	b09c      	sub	sp, #112	@ 0x70
 80078a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80078a8:	9002      	str	r0, [sp, #8]
 80078aa:	9006      	str	r0, [sp, #24]
 80078ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078b0:	4809      	ldr	r0, [pc, #36]	@ (80078d8 <siprintf+0x38>)
 80078b2:	9107      	str	r1, [sp, #28]
 80078b4:	9104      	str	r1, [sp, #16]
 80078b6:	4909      	ldr	r1, [pc, #36]	@ (80078dc <siprintf+0x3c>)
 80078b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078bc:	9105      	str	r1, [sp, #20]
 80078be:	6800      	ldr	r0, [r0, #0]
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	a902      	add	r1, sp, #8
 80078c4:	f002 fc4a 	bl	800a15c <_svfiprintf_r>
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	2200      	movs	r2, #0
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	b01c      	add	sp, #112	@ 0x70
 80078d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078d4:	b003      	add	sp, #12
 80078d6:	4770      	bx	lr
 80078d8:	2000002c 	.word	0x2000002c
 80078dc:	ffff0208 	.word	0xffff0208

080078e0 <__sread>:
 80078e0:	b510      	push	{r4, lr}
 80078e2:	460c      	mov	r4, r1
 80078e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e8:	f000 f900 	bl	8007aec <_read_r>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	bfab      	itete	ge
 80078f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078f2:	89a3      	ldrhlt	r3, [r4, #12]
 80078f4:	181b      	addge	r3, r3, r0
 80078f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078fa:	bfac      	ite	ge
 80078fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078fe:	81a3      	strhlt	r3, [r4, #12]
 8007900:	bd10      	pop	{r4, pc}

08007902 <__swrite>:
 8007902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007906:	461f      	mov	r7, r3
 8007908:	898b      	ldrh	r3, [r1, #12]
 800790a:	05db      	lsls	r3, r3, #23
 800790c:	4605      	mov	r5, r0
 800790e:	460c      	mov	r4, r1
 8007910:	4616      	mov	r6, r2
 8007912:	d505      	bpl.n	8007920 <__swrite+0x1e>
 8007914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007918:	2302      	movs	r3, #2
 800791a:	2200      	movs	r2, #0
 800791c:	f000 f8d4 	bl	8007ac8 <_lseek_r>
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007926:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800792a:	81a3      	strh	r3, [r4, #12]
 800792c:	4632      	mov	r2, r6
 800792e:	463b      	mov	r3, r7
 8007930:	4628      	mov	r0, r5
 8007932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007936:	f000 b8eb 	b.w	8007b10 <_write_r>

0800793a <__sseek>:
 800793a:	b510      	push	{r4, lr}
 800793c:	460c      	mov	r4, r1
 800793e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007942:	f000 f8c1 	bl	8007ac8 <_lseek_r>
 8007946:	1c43      	adds	r3, r0, #1
 8007948:	89a3      	ldrh	r3, [r4, #12]
 800794a:	bf15      	itete	ne
 800794c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800794e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007952:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007956:	81a3      	strheq	r3, [r4, #12]
 8007958:	bf18      	it	ne
 800795a:	81a3      	strhne	r3, [r4, #12]
 800795c:	bd10      	pop	{r4, pc}

0800795e <__sclose>:
 800795e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007962:	f000 b8a1 	b.w	8007aa8 <_close_r>

08007966 <__swbuf_r>:
 8007966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007968:	460e      	mov	r6, r1
 800796a:	4614      	mov	r4, r2
 800796c:	4605      	mov	r5, r0
 800796e:	b118      	cbz	r0, 8007978 <__swbuf_r+0x12>
 8007970:	6a03      	ldr	r3, [r0, #32]
 8007972:	b90b      	cbnz	r3, 8007978 <__swbuf_r+0x12>
 8007974:	f7ff feee 	bl	8007754 <__sinit>
 8007978:	69a3      	ldr	r3, [r4, #24]
 800797a:	60a3      	str	r3, [r4, #8]
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	071a      	lsls	r2, r3, #28
 8007980:	d501      	bpl.n	8007986 <__swbuf_r+0x20>
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	b943      	cbnz	r3, 8007998 <__swbuf_r+0x32>
 8007986:	4621      	mov	r1, r4
 8007988:	4628      	mov	r0, r5
 800798a:	f000 f82b 	bl	80079e4 <__swsetup_r>
 800798e:	b118      	cbz	r0, 8007998 <__swbuf_r+0x32>
 8007990:	f04f 37ff 	mov.w	r7, #4294967295
 8007994:	4638      	mov	r0, r7
 8007996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	6922      	ldr	r2, [r4, #16]
 800799c:	1a98      	subs	r0, r3, r2
 800799e:	6963      	ldr	r3, [r4, #20]
 80079a0:	b2f6      	uxtb	r6, r6
 80079a2:	4283      	cmp	r3, r0
 80079a4:	4637      	mov	r7, r6
 80079a6:	dc05      	bgt.n	80079b4 <__swbuf_r+0x4e>
 80079a8:	4621      	mov	r1, r4
 80079aa:	4628      	mov	r0, r5
 80079ac:	f002 fe98 	bl	800a6e0 <_fflush_r>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1ed      	bne.n	8007990 <__swbuf_r+0x2a>
 80079b4:	68a3      	ldr	r3, [r4, #8]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	60a3      	str	r3, [r4, #8]
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	6022      	str	r2, [r4, #0]
 80079c0:	701e      	strb	r6, [r3, #0]
 80079c2:	6962      	ldr	r2, [r4, #20]
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d004      	beq.n	80079d4 <__swbuf_r+0x6e>
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	07db      	lsls	r3, r3, #31
 80079ce:	d5e1      	bpl.n	8007994 <__swbuf_r+0x2e>
 80079d0:	2e0a      	cmp	r6, #10
 80079d2:	d1df      	bne.n	8007994 <__swbuf_r+0x2e>
 80079d4:	4621      	mov	r1, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	f002 fe82 	bl	800a6e0 <_fflush_r>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d0d9      	beq.n	8007994 <__swbuf_r+0x2e>
 80079e0:	e7d6      	b.n	8007990 <__swbuf_r+0x2a>
	...

080079e4 <__swsetup_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4b29      	ldr	r3, [pc, #164]	@ (8007a8c <__swsetup_r+0xa8>)
 80079e8:	4605      	mov	r5, r0
 80079ea:	6818      	ldr	r0, [r3, #0]
 80079ec:	460c      	mov	r4, r1
 80079ee:	b118      	cbz	r0, 80079f8 <__swsetup_r+0x14>
 80079f0:	6a03      	ldr	r3, [r0, #32]
 80079f2:	b90b      	cbnz	r3, 80079f8 <__swsetup_r+0x14>
 80079f4:	f7ff feae 	bl	8007754 <__sinit>
 80079f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079fc:	0719      	lsls	r1, r3, #28
 80079fe:	d422      	bmi.n	8007a46 <__swsetup_r+0x62>
 8007a00:	06da      	lsls	r2, r3, #27
 8007a02:	d407      	bmi.n	8007a14 <__swsetup_r+0x30>
 8007a04:	2209      	movs	r2, #9
 8007a06:	602a      	str	r2, [r5, #0]
 8007a08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a0c:	81a3      	strh	r3, [r4, #12]
 8007a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a12:	e033      	b.n	8007a7c <__swsetup_r+0x98>
 8007a14:	0758      	lsls	r0, r3, #29
 8007a16:	d512      	bpl.n	8007a3e <__swsetup_r+0x5a>
 8007a18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a1a:	b141      	cbz	r1, 8007a2e <__swsetup_r+0x4a>
 8007a1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a20:	4299      	cmp	r1, r3
 8007a22:	d002      	beq.n	8007a2a <__swsetup_r+0x46>
 8007a24:	4628      	mov	r0, r5
 8007a26:	f000 ff07 	bl	8008838 <_free_r>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a34:	81a3      	strh	r3, [r4, #12]
 8007a36:	2300      	movs	r3, #0
 8007a38:	6063      	str	r3, [r4, #4]
 8007a3a:	6923      	ldr	r3, [r4, #16]
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f043 0308 	orr.w	r3, r3, #8
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	b94b      	cbnz	r3, 8007a5e <__swsetup_r+0x7a>
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a54:	d003      	beq.n	8007a5e <__swsetup_r+0x7a>
 8007a56:	4621      	mov	r1, r4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f002 fe8f 	bl	800a77c <__smakebuf_r>
 8007a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a62:	f013 0201 	ands.w	r2, r3, #1
 8007a66:	d00a      	beq.n	8007a7e <__swsetup_r+0x9a>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	60a2      	str	r2, [r4, #8]
 8007a6c:	6962      	ldr	r2, [r4, #20]
 8007a6e:	4252      	negs	r2, r2
 8007a70:	61a2      	str	r2, [r4, #24]
 8007a72:	6922      	ldr	r2, [r4, #16]
 8007a74:	b942      	cbnz	r2, 8007a88 <__swsetup_r+0xa4>
 8007a76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a7a:	d1c5      	bne.n	8007a08 <__swsetup_r+0x24>
 8007a7c:	bd38      	pop	{r3, r4, r5, pc}
 8007a7e:	0799      	lsls	r1, r3, #30
 8007a80:	bf58      	it	pl
 8007a82:	6962      	ldrpl	r2, [r4, #20]
 8007a84:	60a2      	str	r2, [r4, #8]
 8007a86:	e7f4      	b.n	8007a72 <__swsetup_r+0x8e>
 8007a88:	2000      	movs	r0, #0
 8007a8a:	e7f7      	b.n	8007a7c <__swsetup_r+0x98>
 8007a8c:	2000002c 	.word	0x2000002c

08007a90 <memset>:
 8007a90:	4402      	add	r2, r0
 8007a92:	4603      	mov	r3, r0
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d100      	bne.n	8007a9a <memset+0xa>
 8007a98:	4770      	bx	lr
 8007a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9e:	e7f9      	b.n	8007a94 <memset+0x4>

08007aa0 <_localeconv_r>:
 8007aa0:	4800      	ldr	r0, [pc, #0]	@ (8007aa4 <_localeconv_r+0x4>)
 8007aa2:	4770      	bx	lr
 8007aa4:	2000016c 	.word	0x2000016c

08007aa8 <_close_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4d06      	ldr	r5, [pc, #24]	@ (8007ac4 <_close_r+0x1c>)
 8007aac:	2300      	movs	r3, #0
 8007aae:	4604      	mov	r4, r0
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	602b      	str	r3, [r5, #0]
 8007ab4:	f7fa fdf6 	bl	80026a4 <_close>
 8007ab8:	1c43      	adds	r3, r0, #1
 8007aba:	d102      	bne.n	8007ac2 <_close_r+0x1a>
 8007abc:	682b      	ldr	r3, [r5, #0]
 8007abe:	b103      	cbz	r3, 8007ac2 <_close_r+0x1a>
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	bd38      	pop	{r3, r4, r5, pc}
 8007ac4:	20000588 	.word	0x20000588

08007ac8 <_lseek_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4d07      	ldr	r5, [pc, #28]	@ (8007ae8 <_lseek_r+0x20>)
 8007acc:	4604      	mov	r4, r0
 8007ace:	4608      	mov	r0, r1
 8007ad0:	4611      	mov	r1, r2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	602a      	str	r2, [r5, #0]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	f7fa fe0b 	bl	80026f2 <_lseek>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d102      	bne.n	8007ae6 <_lseek_r+0x1e>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	b103      	cbz	r3, 8007ae6 <_lseek_r+0x1e>
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	20000588 	.word	0x20000588

08007aec <_read_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d07      	ldr	r5, [pc, #28]	@ (8007b0c <_read_r+0x20>)
 8007af0:	4604      	mov	r4, r0
 8007af2:	4608      	mov	r0, r1
 8007af4:	4611      	mov	r1, r2
 8007af6:	2200      	movs	r2, #0
 8007af8:	602a      	str	r2, [r5, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f7fa fd99 	bl	8002632 <_read>
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	d102      	bne.n	8007b0a <_read_r+0x1e>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	b103      	cbz	r3, 8007b0a <_read_r+0x1e>
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	20000588 	.word	0x20000588

08007b10 <_write_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4d07      	ldr	r5, [pc, #28]	@ (8007b30 <_write_r+0x20>)
 8007b14:	4604      	mov	r4, r0
 8007b16:	4608      	mov	r0, r1
 8007b18:	4611      	mov	r1, r2
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	602a      	str	r2, [r5, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	f7fa fda4 	bl	800266c <_write>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_write_r+0x1e>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_write_r+0x1e>
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	20000588 	.word	0x20000588

08007b34 <__errno>:
 8007b34:	4b01      	ldr	r3, [pc, #4]	@ (8007b3c <__errno+0x8>)
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	2000002c 	.word	0x2000002c

08007b40 <__libc_init_array>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	4d0d      	ldr	r5, [pc, #52]	@ (8007b78 <__libc_init_array+0x38>)
 8007b44:	4c0d      	ldr	r4, [pc, #52]	@ (8007b7c <__libc_init_array+0x3c>)
 8007b46:	1b64      	subs	r4, r4, r5
 8007b48:	10a4      	asrs	r4, r4, #2
 8007b4a:	2600      	movs	r6, #0
 8007b4c:	42a6      	cmp	r6, r4
 8007b4e:	d109      	bne.n	8007b64 <__libc_init_array+0x24>
 8007b50:	4d0b      	ldr	r5, [pc, #44]	@ (8007b80 <__libc_init_array+0x40>)
 8007b52:	4c0c      	ldr	r4, [pc, #48]	@ (8007b84 <__libc_init_array+0x44>)
 8007b54:	f003 fae2 	bl	800b11c <_init>
 8007b58:	1b64      	subs	r4, r4, r5
 8007b5a:	10a4      	asrs	r4, r4, #2
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	42a6      	cmp	r6, r4
 8007b60:	d105      	bne.n	8007b6e <__libc_init_array+0x2e>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b68:	4798      	blx	r3
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	e7ee      	b.n	8007b4c <__libc_init_array+0xc>
 8007b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b72:	4798      	blx	r3
 8007b74:	3601      	adds	r6, #1
 8007b76:	e7f2      	b.n	8007b5e <__libc_init_array+0x1e>
 8007b78:	0800b660 	.word	0x0800b660
 8007b7c:	0800b660 	.word	0x0800b660
 8007b80:	0800b660 	.word	0x0800b660
 8007b84:	0800b664 	.word	0x0800b664

08007b88 <__retarget_lock_init_recursive>:
 8007b88:	4770      	bx	lr

08007b8a <__retarget_lock_acquire_recursive>:
 8007b8a:	4770      	bx	lr

08007b8c <__retarget_lock_release_recursive>:
 8007b8c:	4770      	bx	lr
	...

08007b90 <nanf>:
 8007b90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007b98 <nanf+0x8>
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	7fc00000 	.word	0x7fc00000

08007b9c <quorem>:
 8007b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba0:	6903      	ldr	r3, [r0, #16]
 8007ba2:	690c      	ldr	r4, [r1, #16]
 8007ba4:	42a3      	cmp	r3, r4
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	db7e      	blt.n	8007ca8 <quorem+0x10c>
 8007baa:	3c01      	subs	r4, #1
 8007bac:	f101 0814 	add.w	r8, r1, #20
 8007bb0:	00a3      	lsls	r3, r4, #2
 8007bb2:	f100 0514 	add.w	r5, r0, #20
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bbc:	9301      	str	r3, [sp, #4]
 8007bbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bce:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bd2:	d32e      	bcc.n	8007c32 <quorem+0x96>
 8007bd4:	f04f 0a00 	mov.w	sl, #0
 8007bd8:	46c4      	mov	ip, r8
 8007bda:	46ae      	mov	lr, r5
 8007bdc:	46d3      	mov	fp, sl
 8007bde:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007be2:	b298      	uxth	r0, r3
 8007be4:	fb06 a000 	mla	r0, r6, r0, sl
 8007be8:	0c02      	lsrs	r2, r0, #16
 8007bea:	0c1b      	lsrs	r3, r3, #16
 8007bec:	fb06 2303 	mla	r3, r6, r3, r2
 8007bf0:	f8de 2000 	ldr.w	r2, [lr]
 8007bf4:	b280      	uxth	r0, r0
 8007bf6:	b292      	uxth	r2, r2
 8007bf8:	1a12      	subs	r2, r2, r0
 8007bfa:	445a      	add	r2, fp
 8007bfc:	f8de 0000 	ldr.w	r0, [lr]
 8007c00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c14:	45e1      	cmp	r9, ip
 8007c16:	f84e 2b04 	str.w	r2, [lr], #4
 8007c1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c1e:	d2de      	bcs.n	8007bde <quorem+0x42>
 8007c20:	9b00      	ldr	r3, [sp, #0]
 8007c22:	58eb      	ldr	r3, [r5, r3]
 8007c24:	b92b      	cbnz	r3, 8007c32 <quorem+0x96>
 8007c26:	9b01      	ldr	r3, [sp, #4]
 8007c28:	3b04      	subs	r3, #4
 8007c2a:	429d      	cmp	r5, r3
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	d32f      	bcc.n	8007c90 <quorem+0xf4>
 8007c30:	613c      	str	r4, [r7, #16]
 8007c32:	4638      	mov	r0, r7
 8007c34:	f001 f9c4 	bl	8008fc0 <__mcmp>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	db25      	blt.n	8007c88 <quorem+0xec>
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	2000      	movs	r0, #0
 8007c40:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c44:	f8d1 c000 	ldr.w	ip, [r1]
 8007c48:	fa1f fe82 	uxth.w	lr, r2
 8007c4c:	fa1f f38c 	uxth.w	r3, ip
 8007c50:	eba3 030e 	sub.w	r3, r3, lr
 8007c54:	4403      	add	r3, r0
 8007c56:	0c12      	lsrs	r2, r2, #16
 8007c58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c66:	45c1      	cmp	r9, r8
 8007c68:	f841 3b04 	str.w	r3, [r1], #4
 8007c6c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c70:	d2e6      	bcs.n	8007c40 <quorem+0xa4>
 8007c72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c7a:	b922      	cbnz	r2, 8007c86 <quorem+0xea>
 8007c7c:	3b04      	subs	r3, #4
 8007c7e:	429d      	cmp	r5, r3
 8007c80:	461a      	mov	r2, r3
 8007c82:	d30b      	bcc.n	8007c9c <quorem+0x100>
 8007c84:	613c      	str	r4, [r7, #16]
 8007c86:	3601      	adds	r6, #1
 8007c88:	4630      	mov	r0, r6
 8007c8a:	b003      	add	sp, #12
 8007c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c90:	6812      	ldr	r2, [r2, #0]
 8007c92:	3b04      	subs	r3, #4
 8007c94:	2a00      	cmp	r2, #0
 8007c96:	d1cb      	bne.n	8007c30 <quorem+0x94>
 8007c98:	3c01      	subs	r4, #1
 8007c9a:	e7c6      	b.n	8007c2a <quorem+0x8e>
 8007c9c:	6812      	ldr	r2, [r2, #0]
 8007c9e:	3b04      	subs	r3, #4
 8007ca0:	2a00      	cmp	r2, #0
 8007ca2:	d1ef      	bne.n	8007c84 <quorem+0xe8>
 8007ca4:	3c01      	subs	r4, #1
 8007ca6:	e7ea      	b.n	8007c7e <quorem+0xe2>
 8007ca8:	2000      	movs	r0, #0
 8007caa:	e7ee      	b.n	8007c8a <quorem+0xee>
 8007cac:	0000      	movs	r0, r0
	...

08007cb0 <_dtoa_r>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	69c7      	ldr	r7, [r0, #28]
 8007cb6:	b099      	sub	sp, #100	@ 0x64
 8007cb8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007cbc:	ec55 4b10 	vmov	r4, r5, d0
 8007cc0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007cc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cc4:	4683      	mov	fp, r0
 8007cc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cca:	b97f      	cbnz	r7, 8007cec <_dtoa_r+0x3c>
 8007ccc:	2010      	movs	r0, #16
 8007cce:	f000 fdfd 	bl	80088cc <malloc>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007cd8:	b920      	cbnz	r0, 8007ce4 <_dtoa_r+0x34>
 8007cda:	4ba7      	ldr	r3, [pc, #668]	@ (8007f78 <_dtoa_r+0x2c8>)
 8007cdc:	21ef      	movs	r1, #239	@ 0xef
 8007cde:	48a7      	ldr	r0, [pc, #668]	@ (8007f7c <_dtoa_r+0x2cc>)
 8007ce0:	f002 fdfe 	bl	800a8e0 <__assert_func>
 8007ce4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ce8:	6007      	str	r7, [r0, #0]
 8007cea:	60c7      	str	r7, [r0, #12]
 8007cec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cf0:	6819      	ldr	r1, [r3, #0]
 8007cf2:	b159      	cbz	r1, 8007d0c <_dtoa_r+0x5c>
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	604a      	str	r2, [r1, #4]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	4093      	lsls	r3, r2
 8007cfc:	608b      	str	r3, [r1, #8]
 8007cfe:	4658      	mov	r0, fp
 8007d00:	f000 feda 	bl	8008ab8 <_Bfree>
 8007d04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	1e2b      	subs	r3, r5, #0
 8007d0e:	bfb9      	ittee	lt
 8007d10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d14:	9303      	strlt	r3, [sp, #12]
 8007d16:	2300      	movge	r3, #0
 8007d18:	6033      	strge	r3, [r6, #0]
 8007d1a:	9f03      	ldr	r7, [sp, #12]
 8007d1c:	4b98      	ldr	r3, [pc, #608]	@ (8007f80 <_dtoa_r+0x2d0>)
 8007d1e:	bfbc      	itt	lt
 8007d20:	2201      	movlt	r2, #1
 8007d22:	6032      	strlt	r2, [r6, #0]
 8007d24:	43bb      	bics	r3, r7
 8007d26:	d112      	bne.n	8007d4e <_dtoa_r+0x9e>
 8007d28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d2e:	6013      	str	r3, [r2, #0]
 8007d30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d34:	4323      	orrs	r3, r4
 8007d36:	f000 854d 	beq.w	80087d4 <_dtoa_r+0xb24>
 8007d3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f94 <_dtoa_r+0x2e4>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 854f 	beq.w	80087e4 <_dtoa_r+0xb34>
 8007d46:	f10a 0303 	add.w	r3, sl, #3
 8007d4a:	f000 bd49 	b.w	80087e0 <_dtoa_r+0xb30>
 8007d4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d52:	2200      	movs	r2, #0
 8007d54:	ec51 0b17 	vmov	r0, r1, d7
 8007d58:	2300      	movs	r3, #0
 8007d5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007d5e:	f7f8 fed3 	bl	8000b08 <__aeabi_dcmpeq>
 8007d62:	4680      	mov	r8, r0
 8007d64:	b158      	cbz	r0, 8007d7e <_dtoa_r+0xce>
 8007d66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d68:	2301      	movs	r3, #1
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d6e:	b113      	cbz	r3, 8007d76 <_dtoa_r+0xc6>
 8007d70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d72:	4b84      	ldr	r3, [pc, #528]	@ (8007f84 <_dtoa_r+0x2d4>)
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007f98 <_dtoa_r+0x2e8>
 8007d7a:	f000 bd33 	b.w	80087e4 <_dtoa_r+0xb34>
 8007d7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d82:	aa16      	add	r2, sp, #88	@ 0x58
 8007d84:	a917      	add	r1, sp, #92	@ 0x5c
 8007d86:	4658      	mov	r0, fp
 8007d88:	f001 fa3a 	bl	8009200 <__d2b>
 8007d8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d90:	4681      	mov	r9, r0
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	d077      	beq.n	8007e86 <_dtoa_r+0x1d6>
 8007d96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007da4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007da8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007dac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007db0:	4619      	mov	r1, r3
 8007db2:	2200      	movs	r2, #0
 8007db4:	4b74      	ldr	r3, [pc, #464]	@ (8007f88 <_dtoa_r+0x2d8>)
 8007db6:	f7f8 fa87 	bl	80002c8 <__aeabi_dsub>
 8007dba:	a369      	add	r3, pc, #420	@ (adr r3, 8007f60 <_dtoa_r+0x2b0>)
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f7f8 fc3a 	bl	8000638 <__aeabi_dmul>
 8007dc4:	a368      	add	r3, pc, #416	@ (adr r3, 8007f68 <_dtoa_r+0x2b8>)
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f7f8 fa7f 	bl	80002cc <__adddf3>
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	f7f8 fbc6 	bl	8000564 <__aeabi_i2d>
 8007dd8:	a365      	add	r3, pc, #404	@ (adr r3, 8007f70 <_dtoa_r+0x2c0>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fc2b 	bl	8000638 <__aeabi_dmul>
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4620      	mov	r0, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7f8 fa6f 	bl	80002cc <__adddf3>
 8007dee:	4604      	mov	r4, r0
 8007df0:	460d      	mov	r5, r1
 8007df2:	f7f8 fed1 	bl	8000b98 <__aeabi_d2iz>
 8007df6:	2200      	movs	r2, #0
 8007df8:	4607      	mov	r7, r0
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	4629      	mov	r1, r5
 8007e00:	f7f8 fe8c 	bl	8000b1c <__aeabi_dcmplt>
 8007e04:	b140      	cbz	r0, 8007e18 <_dtoa_r+0x168>
 8007e06:	4638      	mov	r0, r7
 8007e08:	f7f8 fbac 	bl	8000564 <__aeabi_i2d>
 8007e0c:	4622      	mov	r2, r4
 8007e0e:	462b      	mov	r3, r5
 8007e10:	f7f8 fe7a 	bl	8000b08 <__aeabi_dcmpeq>
 8007e14:	b900      	cbnz	r0, 8007e18 <_dtoa_r+0x168>
 8007e16:	3f01      	subs	r7, #1
 8007e18:	2f16      	cmp	r7, #22
 8007e1a:	d851      	bhi.n	8007ec0 <_dtoa_r+0x210>
 8007e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8007f8c <_dtoa_r+0x2dc>)
 8007e1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e2a:	f7f8 fe77 	bl	8000b1c <__aeabi_dcmplt>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d048      	beq.n	8007ec4 <_dtoa_r+0x214>
 8007e32:	3f01      	subs	r7, #1
 8007e34:	2300      	movs	r3, #0
 8007e36:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e3a:	1b9b      	subs	r3, r3, r6
 8007e3c:	1e5a      	subs	r2, r3, #1
 8007e3e:	bf44      	itt	mi
 8007e40:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e44:	2300      	movmi	r3, #0
 8007e46:	9208      	str	r2, [sp, #32]
 8007e48:	bf54      	ite	pl
 8007e4a:	f04f 0800 	movpl.w	r8, #0
 8007e4e:	9308      	strmi	r3, [sp, #32]
 8007e50:	2f00      	cmp	r7, #0
 8007e52:	db39      	blt.n	8007ec8 <_dtoa_r+0x218>
 8007e54:	9b08      	ldr	r3, [sp, #32]
 8007e56:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007e58:	443b      	add	r3, r7
 8007e5a:	9308      	str	r3, [sp, #32]
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e62:	2b09      	cmp	r3, #9
 8007e64:	d864      	bhi.n	8007f30 <_dtoa_r+0x280>
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	bfc4      	itt	gt
 8007e6a:	3b04      	subgt	r3, #4
 8007e6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e70:	f1a3 0302 	sub.w	r3, r3, #2
 8007e74:	bfcc      	ite	gt
 8007e76:	2400      	movgt	r4, #0
 8007e78:	2401      	movle	r4, #1
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d863      	bhi.n	8007f46 <_dtoa_r+0x296>
 8007e7e:	e8df f003 	tbb	[pc, r3]
 8007e82:	372a      	.short	0x372a
 8007e84:	5535      	.short	0x5535
 8007e86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007e8a:	441e      	add	r6, r3
 8007e8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	bfc1      	itttt	gt
 8007e94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e98:	409f      	lslgt	r7, r3
 8007e9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ea2:	bfd6      	itet	le
 8007ea4:	f1c3 0320 	rsble	r3, r3, #32
 8007ea8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007eac:	fa04 f003 	lslle.w	r0, r4, r3
 8007eb0:	f7f8 fb48 	bl	8000544 <__aeabi_ui2d>
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007eba:	3e01      	subs	r6, #1
 8007ebc:	9214      	str	r2, [sp, #80]	@ 0x50
 8007ebe:	e777      	b.n	8007db0 <_dtoa_r+0x100>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e7b8      	b.n	8007e36 <_dtoa_r+0x186>
 8007ec4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007ec6:	e7b7      	b.n	8007e38 <_dtoa_r+0x188>
 8007ec8:	427b      	negs	r3, r7
 8007eca:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ecc:	2300      	movs	r3, #0
 8007ece:	eba8 0807 	sub.w	r8, r8, r7
 8007ed2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ed4:	e7c4      	b.n	8007e60 <_dtoa_r+0x1b0>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dc35      	bgt.n	8007f4c <_dtoa_r+0x29c>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	9307      	str	r3, [sp, #28]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007eea:	e00b      	b.n	8007f04 <_dtoa_r+0x254>
 8007eec:	2301      	movs	r3, #1
 8007eee:	e7f3      	b.n	8007ed8 <_dtoa_r+0x228>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ef6:	18fb      	adds	r3, r7, r3
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	3301      	adds	r3, #1
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	bfb8      	it	lt
 8007f02:	2301      	movlt	r3, #1
 8007f04:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007f08:	2100      	movs	r1, #0
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	f102 0514 	add.w	r5, r2, #20
 8007f10:	429d      	cmp	r5, r3
 8007f12:	d91f      	bls.n	8007f54 <_dtoa_r+0x2a4>
 8007f14:	6041      	str	r1, [r0, #4]
 8007f16:	4658      	mov	r0, fp
 8007f18:	f000 fd8e 	bl	8008a38 <_Balloc>
 8007f1c:	4682      	mov	sl, r0
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d13c      	bne.n	8007f9c <_dtoa_r+0x2ec>
 8007f22:	4b1b      	ldr	r3, [pc, #108]	@ (8007f90 <_dtoa_r+0x2e0>)
 8007f24:	4602      	mov	r2, r0
 8007f26:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f2a:	e6d8      	b.n	8007cde <_dtoa_r+0x2e>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e7e0      	b.n	8007ef2 <_dtoa_r+0x242>
 8007f30:	2401      	movs	r4, #1
 8007f32:	2300      	movs	r3, #0
 8007f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f36:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f38:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	9307      	str	r3, [sp, #28]
 8007f40:	2200      	movs	r2, #0
 8007f42:	2312      	movs	r3, #18
 8007f44:	e7d0      	b.n	8007ee8 <_dtoa_r+0x238>
 8007f46:	2301      	movs	r3, #1
 8007f48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f4a:	e7f5      	b.n	8007f38 <_dtoa_r+0x288>
 8007f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	9307      	str	r3, [sp, #28]
 8007f52:	e7d7      	b.n	8007f04 <_dtoa_r+0x254>
 8007f54:	3101      	adds	r1, #1
 8007f56:	0052      	lsls	r2, r2, #1
 8007f58:	e7d8      	b.n	8007f0c <_dtoa_r+0x25c>
 8007f5a:	bf00      	nop
 8007f5c:	f3af 8000 	nop.w
 8007f60:	636f4361 	.word	0x636f4361
 8007f64:	3fd287a7 	.word	0x3fd287a7
 8007f68:	8b60c8b3 	.word	0x8b60c8b3
 8007f6c:	3fc68a28 	.word	0x3fc68a28
 8007f70:	509f79fb 	.word	0x509f79fb
 8007f74:	3fd34413 	.word	0x3fd34413
 8007f78:	0800b26e 	.word	0x0800b26e
 8007f7c:	0800b285 	.word	0x0800b285
 8007f80:	7ff00000 	.word	0x7ff00000
 8007f84:	0800b239 	.word	0x0800b239
 8007f88:	3ff80000 	.word	0x3ff80000
 8007f8c:	0800b380 	.word	0x0800b380
 8007f90:	0800b2dd 	.word	0x0800b2dd
 8007f94:	0800b26a 	.word	0x0800b26a
 8007f98:	0800b238 	.word	0x0800b238
 8007f9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007fa0:	6018      	str	r0, [r3, #0]
 8007fa2:	9b07      	ldr	r3, [sp, #28]
 8007fa4:	2b0e      	cmp	r3, #14
 8007fa6:	f200 80a4 	bhi.w	80080f2 <_dtoa_r+0x442>
 8007faa:	2c00      	cmp	r4, #0
 8007fac:	f000 80a1 	beq.w	80080f2 <_dtoa_r+0x442>
 8007fb0:	2f00      	cmp	r7, #0
 8007fb2:	dd33      	ble.n	800801c <_dtoa_r+0x36c>
 8007fb4:	4bad      	ldr	r3, [pc, #692]	@ (800826c <_dtoa_r+0x5bc>)
 8007fb6:	f007 020f 	and.w	r2, r7, #15
 8007fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fbe:	ed93 7b00 	vldr	d7, [r3]
 8007fc2:	05f8      	lsls	r0, r7, #23
 8007fc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007fc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007fcc:	d516      	bpl.n	8007ffc <_dtoa_r+0x34c>
 8007fce:	4ba8      	ldr	r3, [pc, #672]	@ (8008270 <_dtoa_r+0x5c0>)
 8007fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fd8:	f7f8 fc58 	bl	800088c <__aeabi_ddiv>
 8007fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe0:	f004 040f 	and.w	r4, r4, #15
 8007fe4:	2603      	movs	r6, #3
 8007fe6:	4da2      	ldr	r5, [pc, #648]	@ (8008270 <_dtoa_r+0x5c0>)
 8007fe8:	b954      	cbnz	r4, 8008000 <_dtoa_r+0x350>
 8007fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ff2:	f7f8 fc4b 	bl	800088c <__aeabi_ddiv>
 8007ff6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ffa:	e028      	b.n	800804e <_dtoa_r+0x39e>
 8007ffc:	2602      	movs	r6, #2
 8007ffe:	e7f2      	b.n	8007fe6 <_dtoa_r+0x336>
 8008000:	07e1      	lsls	r1, r4, #31
 8008002:	d508      	bpl.n	8008016 <_dtoa_r+0x366>
 8008004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008008:	e9d5 2300 	ldrd	r2, r3, [r5]
 800800c:	f7f8 fb14 	bl	8000638 <__aeabi_dmul>
 8008010:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008014:	3601      	adds	r6, #1
 8008016:	1064      	asrs	r4, r4, #1
 8008018:	3508      	adds	r5, #8
 800801a:	e7e5      	b.n	8007fe8 <_dtoa_r+0x338>
 800801c:	f000 80d2 	beq.w	80081c4 <_dtoa_r+0x514>
 8008020:	427c      	negs	r4, r7
 8008022:	4b92      	ldr	r3, [pc, #584]	@ (800826c <_dtoa_r+0x5bc>)
 8008024:	4d92      	ldr	r5, [pc, #584]	@ (8008270 <_dtoa_r+0x5c0>)
 8008026:	f004 020f 	and.w	r2, r4, #15
 800802a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800802e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008032:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008036:	f7f8 faff 	bl	8000638 <__aeabi_dmul>
 800803a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800803e:	1124      	asrs	r4, r4, #4
 8008040:	2300      	movs	r3, #0
 8008042:	2602      	movs	r6, #2
 8008044:	2c00      	cmp	r4, #0
 8008046:	f040 80b2 	bne.w	80081ae <_dtoa_r+0x4fe>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1d3      	bne.n	8007ff6 <_dtoa_r+0x346>
 800804e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008050:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 80b7 	beq.w	80081c8 <_dtoa_r+0x518>
 800805a:	4b86      	ldr	r3, [pc, #536]	@ (8008274 <_dtoa_r+0x5c4>)
 800805c:	2200      	movs	r2, #0
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 fd5b 	bl	8000b1c <__aeabi_dcmplt>
 8008066:	2800      	cmp	r0, #0
 8008068:	f000 80ae 	beq.w	80081c8 <_dtoa_r+0x518>
 800806c:	9b07      	ldr	r3, [sp, #28]
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 80aa 	beq.w	80081c8 <_dtoa_r+0x518>
 8008074:	9b00      	ldr	r3, [sp, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	dd37      	ble.n	80080ea <_dtoa_r+0x43a>
 800807a:	1e7b      	subs	r3, r7, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	4620      	mov	r0, r4
 8008080:	4b7d      	ldr	r3, [pc, #500]	@ (8008278 <_dtoa_r+0x5c8>)
 8008082:	2200      	movs	r2, #0
 8008084:	4629      	mov	r1, r5
 8008086:	f7f8 fad7 	bl	8000638 <__aeabi_dmul>
 800808a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800808e:	9c00      	ldr	r4, [sp, #0]
 8008090:	3601      	adds	r6, #1
 8008092:	4630      	mov	r0, r6
 8008094:	f7f8 fa66 	bl	8000564 <__aeabi_i2d>
 8008098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800809c:	f7f8 facc 	bl	8000638 <__aeabi_dmul>
 80080a0:	4b76      	ldr	r3, [pc, #472]	@ (800827c <_dtoa_r+0x5cc>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	f7f8 f912 	bl	80002cc <__adddf3>
 80080a8:	4605      	mov	r5, r0
 80080aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80080ae:	2c00      	cmp	r4, #0
 80080b0:	f040 808d 	bne.w	80081ce <_dtoa_r+0x51e>
 80080b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b8:	4b71      	ldr	r3, [pc, #452]	@ (8008280 <_dtoa_r+0x5d0>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	f7f8 f904 	bl	80002c8 <__aeabi_dsub>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080c8:	462a      	mov	r2, r5
 80080ca:	4633      	mov	r3, r6
 80080cc:	f7f8 fd44 	bl	8000b58 <__aeabi_dcmpgt>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	f040 828b 	bne.w	80085ec <_dtoa_r+0x93c>
 80080d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080da:	462a      	mov	r2, r5
 80080dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080e0:	f7f8 fd1c 	bl	8000b1c <__aeabi_dcmplt>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	f040 8128 	bne.w	800833a <_dtoa_r+0x68a>
 80080ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80080ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f2c0 815a 	blt.w	80083ae <_dtoa_r+0x6fe>
 80080fa:	2f0e      	cmp	r7, #14
 80080fc:	f300 8157 	bgt.w	80083ae <_dtoa_r+0x6fe>
 8008100:	4b5a      	ldr	r3, [pc, #360]	@ (800826c <_dtoa_r+0x5bc>)
 8008102:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008106:	ed93 7b00 	vldr	d7, [r3]
 800810a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800810c:	2b00      	cmp	r3, #0
 800810e:	ed8d 7b00 	vstr	d7, [sp]
 8008112:	da03      	bge.n	800811c <_dtoa_r+0x46c>
 8008114:	9b07      	ldr	r3, [sp, #28]
 8008116:	2b00      	cmp	r3, #0
 8008118:	f340 8101 	ble.w	800831e <_dtoa_r+0x66e>
 800811c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008120:	4656      	mov	r6, sl
 8008122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 fbaf 	bl	800088c <__aeabi_ddiv>
 800812e:	f7f8 fd33 	bl	8000b98 <__aeabi_d2iz>
 8008132:	4680      	mov	r8, r0
 8008134:	f7f8 fa16 	bl	8000564 <__aeabi_i2d>
 8008138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800813c:	f7f8 fa7c 	bl	8000638 <__aeabi_dmul>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4620      	mov	r0, r4
 8008146:	4629      	mov	r1, r5
 8008148:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800814c:	f7f8 f8bc 	bl	80002c8 <__aeabi_dsub>
 8008150:	f806 4b01 	strb.w	r4, [r6], #1
 8008154:	9d07      	ldr	r5, [sp, #28]
 8008156:	eba6 040a 	sub.w	r4, r6, sl
 800815a:	42a5      	cmp	r5, r4
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	f040 8117 	bne.w	8008392 <_dtoa_r+0x6e2>
 8008164:	f7f8 f8b2 	bl	80002cc <__adddf3>
 8008168:	e9dd 2300 	ldrd	r2, r3, [sp]
 800816c:	4604      	mov	r4, r0
 800816e:	460d      	mov	r5, r1
 8008170:	f7f8 fcf2 	bl	8000b58 <__aeabi_dcmpgt>
 8008174:	2800      	cmp	r0, #0
 8008176:	f040 80f9 	bne.w	800836c <_dtoa_r+0x6bc>
 800817a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800817e:	4620      	mov	r0, r4
 8008180:	4629      	mov	r1, r5
 8008182:	f7f8 fcc1 	bl	8000b08 <__aeabi_dcmpeq>
 8008186:	b118      	cbz	r0, 8008190 <_dtoa_r+0x4e0>
 8008188:	f018 0f01 	tst.w	r8, #1
 800818c:	f040 80ee 	bne.w	800836c <_dtoa_r+0x6bc>
 8008190:	4649      	mov	r1, r9
 8008192:	4658      	mov	r0, fp
 8008194:	f000 fc90 	bl	8008ab8 <_Bfree>
 8008198:	2300      	movs	r3, #0
 800819a:	7033      	strb	r3, [r6, #0]
 800819c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800819e:	3701      	adds	r7, #1
 80081a0:	601f      	str	r7, [r3, #0]
 80081a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 831d 	beq.w	80087e4 <_dtoa_r+0xb34>
 80081aa:	601e      	str	r6, [r3, #0]
 80081ac:	e31a      	b.n	80087e4 <_dtoa_r+0xb34>
 80081ae:	07e2      	lsls	r2, r4, #31
 80081b0:	d505      	bpl.n	80081be <_dtoa_r+0x50e>
 80081b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081b6:	f7f8 fa3f 	bl	8000638 <__aeabi_dmul>
 80081ba:	3601      	adds	r6, #1
 80081bc:	2301      	movs	r3, #1
 80081be:	1064      	asrs	r4, r4, #1
 80081c0:	3508      	adds	r5, #8
 80081c2:	e73f      	b.n	8008044 <_dtoa_r+0x394>
 80081c4:	2602      	movs	r6, #2
 80081c6:	e742      	b.n	800804e <_dtoa_r+0x39e>
 80081c8:	9c07      	ldr	r4, [sp, #28]
 80081ca:	9704      	str	r7, [sp, #16]
 80081cc:	e761      	b.n	8008092 <_dtoa_r+0x3e2>
 80081ce:	4b27      	ldr	r3, [pc, #156]	@ (800826c <_dtoa_r+0x5bc>)
 80081d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081da:	4454      	add	r4, sl
 80081dc:	2900      	cmp	r1, #0
 80081de:	d053      	beq.n	8008288 <_dtoa_r+0x5d8>
 80081e0:	4928      	ldr	r1, [pc, #160]	@ (8008284 <_dtoa_r+0x5d4>)
 80081e2:	2000      	movs	r0, #0
 80081e4:	f7f8 fb52 	bl	800088c <__aeabi_ddiv>
 80081e8:	4633      	mov	r3, r6
 80081ea:	462a      	mov	r2, r5
 80081ec:	f7f8 f86c 	bl	80002c8 <__aeabi_dsub>
 80081f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081f4:	4656      	mov	r6, sl
 80081f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081fa:	f7f8 fccd 	bl	8000b98 <__aeabi_d2iz>
 80081fe:	4605      	mov	r5, r0
 8008200:	f7f8 f9b0 	bl	8000564 <__aeabi_i2d>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800820c:	f7f8 f85c 	bl	80002c8 <__aeabi_dsub>
 8008210:	3530      	adds	r5, #48	@ 0x30
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800821a:	f806 5b01 	strb.w	r5, [r6], #1
 800821e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008222:	f7f8 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 8008226:	2800      	cmp	r0, #0
 8008228:	d171      	bne.n	800830e <_dtoa_r+0x65e>
 800822a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800822e:	4911      	ldr	r1, [pc, #68]	@ (8008274 <_dtoa_r+0x5c4>)
 8008230:	2000      	movs	r0, #0
 8008232:	f7f8 f849 	bl	80002c8 <__aeabi_dsub>
 8008236:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800823a:	f7f8 fc6f 	bl	8000b1c <__aeabi_dcmplt>
 800823e:	2800      	cmp	r0, #0
 8008240:	f040 8095 	bne.w	800836e <_dtoa_r+0x6be>
 8008244:	42a6      	cmp	r6, r4
 8008246:	f43f af50 	beq.w	80080ea <_dtoa_r+0x43a>
 800824a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800824e:	4b0a      	ldr	r3, [pc, #40]	@ (8008278 <_dtoa_r+0x5c8>)
 8008250:	2200      	movs	r2, #0
 8008252:	f7f8 f9f1 	bl	8000638 <__aeabi_dmul>
 8008256:	4b08      	ldr	r3, [pc, #32]	@ (8008278 <_dtoa_r+0x5c8>)
 8008258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800825c:	2200      	movs	r2, #0
 800825e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008262:	f7f8 f9e9 	bl	8000638 <__aeabi_dmul>
 8008266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800826a:	e7c4      	b.n	80081f6 <_dtoa_r+0x546>
 800826c:	0800b380 	.word	0x0800b380
 8008270:	0800b358 	.word	0x0800b358
 8008274:	3ff00000 	.word	0x3ff00000
 8008278:	40240000 	.word	0x40240000
 800827c:	401c0000 	.word	0x401c0000
 8008280:	40140000 	.word	0x40140000
 8008284:	3fe00000 	.word	0x3fe00000
 8008288:	4631      	mov	r1, r6
 800828a:	4628      	mov	r0, r5
 800828c:	f7f8 f9d4 	bl	8000638 <__aeabi_dmul>
 8008290:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008294:	9415      	str	r4, [sp, #84]	@ 0x54
 8008296:	4656      	mov	r6, sl
 8008298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800829c:	f7f8 fc7c 	bl	8000b98 <__aeabi_d2iz>
 80082a0:	4605      	mov	r5, r0
 80082a2:	f7f8 f95f 	bl	8000564 <__aeabi_i2d>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ae:	f7f8 f80b 	bl	80002c8 <__aeabi_dsub>
 80082b2:	3530      	adds	r5, #48	@ 0x30
 80082b4:	f806 5b01 	strb.w	r5, [r6], #1
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	42a6      	cmp	r6, r4
 80082be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	d124      	bne.n	8008312 <_dtoa_r+0x662>
 80082c8:	4bac      	ldr	r3, [pc, #688]	@ (800857c <_dtoa_r+0x8cc>)
 80082ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082ce:	f7f7 fffd 	bl	80002cc <__adddf3>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082da:	f7f8 fc3d 	bl	8000b58 <__aeabi_dcmpgt>
 80082de:	2800      	cmp	r0, #0
 80082e0:	d145      	bne.n	800836e <_dtoa_r+0x6be>
 80082e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082e6:	49a5      	ldr	r1, [pc, #660]	@ (800857c <_dtoa_r+0x8cc>)
 80082e8:	2000      	movs	r0, #0
 80082ea:	f7f7 ffed 	bl	80002c8 <__aeabi_dsub>
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082f6:	f7f8 fc11 	bl	8000b1c <__aeabi_dcmplt>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f43f aef5 	beq.w	80080ea <_dtoa_r+0x43a>
 8008300:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008302:	1e73      	subs	r3, r6, #1
 8008304:	9315      	str	r3, [sp, #84]	@ 0x54
 8008306:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800830a:	2b30      	cmp	r3, #48	@ 0x30
 800830c:	d0f8      	beq.n	8008300 <_dtoa_r+0x650>
 800830e:	9f04      	ldr	r7, [sp, #16]
 8008310:	e73e      	b.n	8008190 <_dtoa_r+0x4e0>
 8008312:	4b9b      	ldr	r3, [pc, #620]	@ (8008580 <_dtoa_r+0x8d0>)
 8008314:	f7f8 f990 	bl	8000638 <__aeabi_dmul>
 8008318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800831c:	e7bc      	b.n	8008298 <_dtoa_r+0x5e8>
 800831e:	d10c      	bne.n	800833a <_dtoa_r+0x68a>
 8008320:	4b98      	ldr	r3, [pc, #608]	@ (8008584 <_dtoa_r+0x8d4>)
 8008322:	2200      	movs	r2, #0
 8008324:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008328:	f7f8 f986 	bl	8000638 <__aeabi_dmul>
 800832c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008330:	f7f8 fc08 	bl	8000b44 <__aeabi_dcmpge>
 8008334:	2800      	cmp	r0, #0
 8008336:	f000 8157 	beq.w	80085e8 <_dtoa_r+0x938>
 800833a:	2400      	movs	r4, #0
 800833c:	4625      	mov	r5, r4
 800833e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008340:	43db      	mvns	r3, r3
 8008342:	9304      	str	r3, [sp, #16]
 8008344:	4656      	mov	r6, sl
 8008346:	2700      	movs	r7, #0
 8008348:	4621      	mov	r1, r4
 800834a:	4658      	mov	r0, fp
 800834c:	f000 fbb4 	bl	8008ab8 <_Bfree>
 8008350:	2d00      	cmp	r5, #0
 8008352:	d0dc      	beq.n	800830e <_dtoa_r+0x65e>
 8008354:	b12f      	cbz	r7, 8008362 <_dtoa_r+0x6b2>
 8008356:	42af      	cmp	r7, r5
 8008358:	d003      	beq.n	8008362 <_dtoa_r+0x6b2>
 800835a:	4639      	mov	r1, r7
 800835c:	4658      	mov	r0, fp
 800835e:	f000 fbab 	bl	8008ab8 <_Bfree>
 8008362:	4629      	mov	r1, r5
 8008364:	4658      	mov	r0, fp
 8008366:	f000 fba7 	bl	8008ab8 <_Bfree>
 800836a:	e7d0      	b.n	800830e <_dtoa_r+0x65e>
 800836c:	9704      	str	r7, [sp, #16]
 800836e:	4633      	mov	r3, r6
 8008370:	461e      	mov	r6, r3
 8008372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008376:	2a39      	cmp	r2, #57	@ 0x39
 8008378:	d107      	bne.n	800838a <_dtoa_r+0x6da>
 800837a:	459a      	cmp	sl, r3
 800837c:	d1f8      	bne.n	8008370 <_dtoa_r+0x6c0>
 800837e:	9a04      	ldr	r2, [sp, #16]
 8008380:	3201      	adds	r2, #1
 8008382:	9204      	str	r2, [sp, #16]
 8008384:	2230      	movs	r2, #48	@ 0x30
 8008386:	f88a 2000 	strb.w	r2, [sl]
 800838a:	781a      	ldrb	r2, [r3, #0]
 800838c:	3201      	adds	r2, #1
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	e7bd      	b.n	800830e <_dtoa_r+0x65e>
 8008392:	4b7b      	ldr	r3, [pc, #492]	@ (8008580 <_dtoa_r+0x8d0>)
 8008394:	2200      	movs	r2, #0
 8008396:	f7f8 f94f 	bl	8000638 <__aeabi_dmul>
 800839a:	2200      	movs	r2, #0
 800839c:	2300      	movs	r3, #0
 800839e:	4604      	mov	r4, r0
 80083a0:	460d      	mov	r5, r1
 80083a2:	f7f8 fbb1 	bl	8000b08 <__aeabi_dcmpeq>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	f43f aebb 	beq.w	8008122 <_dtoa_r+0x472>
 80083ac:	e6f0      	b.n	8008190 <_dtoa_r+0x4e0>
 80083ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083b0:	2a00      	cmp	r2, #0
 80083b2:	f000 80db 	beq.w	800856c <_dtoa_r+0x8bc>
 80083b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083b8:	2a01      	cmp	r2, #1
 80083ba:	f300 80bf 	bgt.w	800853c <_dtoa_r+0x88c>
 80083be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80083c0:	2a00      	cmp	r2, #0
 80083c2:	f000 80b7 	beq.w	8008534 <_dtoa_r+0x884>
 80083c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083cc:	4646      	mov	r6, r8
 80083ce:	9a08      	ldr	r2, [sp, #32]
 80083d0:	2101      	movs	r1, #1
 80083d2:	441a      	add	r2, r3
 80083d4:	4658      	mov	r0, fp
 80083d6:	4498      	add	r8, r3
 80083d8:	9208      	str	r2, [sp, #32]
 80083da:	f000 fc6b 	bl	8008cb4 <__i2b>
 80083de:	4605      	mov	r5, r0
 80083e0:	b15e      	cbz	r6, 80083fa <_dtoa_r+0x74a>
 80083e2:	9b08      	ldr	r3, [sp, #32]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd08      	ble.n	80083fa <_dtoa_r+0x74a>
 80083e8:	42b3      	cmp	r3, r6
 80083ea:	9a08      	ldr	r2, [sp, #32]
 80083ec:	bfa8      	it	ge
 80083ee:	4633      	movge	r3, r6
 80083f0:	eba8 0803 	sub.w	r8, r8, r3
 80083f4:	1af6      	subs	r6, r6, r3
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	9308      	str	r3, [sp, #32]
 80083fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083fc:	b1f3      	cbz	r3, 800843c <_dtoa_r+0x78c>
 80083fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 80b7 	beq.w	8008574 <_dtoa_r+0x8c4>
 8008406:	b18c      	cbz	r4, 800842c <_dtoa_r+0x77c>
 8008408:	4629      	mov	r1, r5
 800840a:	4622      	mov	r2, r4
 800840c:	4658      	mov	r0, fp
 800840e:	f000 fd11 	bl	8008e34 <__pow5mult>
 8008412:	464a      	mov	r2, r9
 8008414:	4601      	mov	r1, r0
 8008416:	4605      	mov	r5, r0
 8008418:	4658      	mov	r0, fp
 800841a:	f000 fc61 	bl	8008ce0 <__multiply>
 800841e:	4649      	mov	r1, r9
 8008420:	9004      	str	r0, [sp, #16]
 8008422:	4658      	mov	r0, fp
 8008424:	f000 fb48 	bl	8008ab8 <_Bfree>
 8008428:	9b04      	ldr	r3, [sp, #16]
 800842a:	4699      	mov	r9, r3
 800842c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800842e:	1b1a      	subs	r2, r3, r4
 8008430:	d004      	beq.n	800843c <_dtoa_r+0x78c>
 8008432:	4649      	mov	r1, r9
 8008434:	4658      	mov	r0, fp
 8008436:	f000 fcfd 	bl	8008e34 <__pow5mult>
 800843a:	4681      	mov	r9, r0
 800843c:	2101      	movs	r1, #1
 800843e:	4658      	mov	r0, fp
 8008440:	f000 fc38 	bl	8008cb4 <__i2b>
 8008444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008446:	4604      	mov	r4, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 81cf 	beq.w	80087ec <_dtoa_r+0xb3c>
 800844e:	461a      	mov	r2, r3
 8008450:	4601      	mov	r1, r0
 8008452:	4658      	mov	r0, fp
 8008454:	f000 fcee 	bl	8008e34 <__pow5mult>
 8008458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800845a:	2b01      	cmp	r3, #1
 800845c:	4604      	mov	r4, r0
 800845e:	f300 8095 	bgt.w	800858c <_dtoa_r+0x8dc>
 8008462:	9b02      	ldr	r3, [sp, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	f040 8087 	bne.w	8008578 <_dtoa_r+0x8c8>
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008470:	2b00      	cmp	r3, #0
 8008472:	f040 8089 	bne.w	8008588 <_dtoa_r+0x8d8>
 8008476:	9b03      	ldr	r3, [sp, #12]
 8008478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800847c:	0d1b      	lsrs	r3, r3, #20
 800847e:	051b      	lsls	r3, r3, #20
 8008480:	b12b      	cbz	r3, 800848e <_dtoa_r+0x7de>
 8008482:	9b08      	ldr	r3, [sp, #32]
 8008484:	3301      	adds	r3, #1
 8008486:	9308      	str	r3, [sp, #32]
 8008488:	f108 0801 	add.w	r8, r8, #1
 800848c:	2301      	movs	r3, #1
 800848e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 81b0 	beq.w	80087f8 <_dtoa_r+0xb48>
 8008498:	6923      	ldr	r3, [r4, #16]
 800849a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800849e:	6918      	ldr	r0, [r3, #16]
 80084a0:	f000 fbbc 	bl	8008c1c <__hi0bits>
 80084a4:	f1c0 0020 	rsb	r0, r0, #32
 80084a8:	9b08      	ldr	r3, [sp, #32]
 80084aa:	4418      	add	r0, r3
 80084ac:	f010 001f 	ands.w	r0, r0, #31
 80084b0:	d077      	beq.n	80085a2 <_dtoa_r+0x8f2>
 80084b2:	f1c0 0320 	rsb	r3, r0, #32
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	dd6b      	ble.n	8008592 <_dtoa_r+0x8e2>
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	f1c0 001c 	rsb	r0, r0, #28
 80084c0:	4403      	add	r3, r0
 80084c2:	4480      	add	r8, r0
 80084c4:	4406      	add	r6, r0
 80084c6:	9308      	str	r3, [sp, #32]
 80084c8:	f1b8 0f00 	cmp.w	r8, #0
 80084cc:	dd05      	ble.n	80084da <_dtoa_r+0x82a>
 80084ce:	4649      	mov	r1, r9
 80084d0:	4642      	mov	r2, r8
 80084d2:	4658      	mov	r0, fp
 80084d4:	f000 fd08 	bl	8008ee8 <__lshift>
 80084d8:	4681      	mov	r9, r0
 80084da:	9b08      	ldr	r3, [sp, #32]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	dd05      	ble.n	80084ec <_dtoa_r+0x83c>
 80084e0:	4621      	mov	r1, r4
 80084e2:	461a      	mov	r2, r3
 80084e4:	4658      	mov	r0, fp
 80084e6:	f000 fcff 	bl	8008ee8 <__lshift>
 80084ea:	4604      	mov	r4, r0
 80084ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d059      	beq.n	80085a6 <_dtoa_r+0x8f6>
 80084f2:	4621      	mov	r1, r4
 80084f4:	4648      	mov	r0, r9
 80084f6:	f000 fd63 	bl	8008fc0 <__mcmp>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	da53      	bge.n	80085a6 <_dtoa_r+0x8f6>
 80084fe:	1e7b      	subs	r3, r7, #1
 8008500:	9304      	str	r3, [sp, #16]
 8008502:	4649      	mov	r1, r9
 8008504:	2300      	movs	r3, #0
 8008506:	220a      	movs	r2, #10
 8008508:	4658      	mov	r0, fp
 800850a:	f000 faf7 	bl	8008afc <__multadd>
 800850e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008510:	4681      	mov	r9, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 8172 	beq.w	80087fc <_dtoa_r+0xb4c>
 8008518:	2300      	movs	r3, #0
 800851a:	4629      	mov	r1, r5
 800851c:	220a      	movs	r2, #10
 800851e:	4658      	mov	r0, fp
 8008520:	f000 faec 	bl	8008afc <__multadd>
 8008524:	9b00      	ldr	r3, [sp, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	4605      	mov	r5, r0
 800852a:	dc67      	bgt.n	80085fc <_dtoa_r+0x94c>
 800852c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852e:	2b02      	cmp	r3, #2
 8008530:	dc41      	bgt.n	80085b6 <_dtoa_r+0x906>
 8008532:	e063      	b.n	80085fc <_dtoa_r+0x94c>
 8008534:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008536:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800853a:	e746      	b.n	80083ca <_dtoa_r+0x71a>
 800853c:	9b07      	ldr	r3, [sp, #28]
 800853e:	1e5c      	subs	r4, r3, #1
 8008540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008542:	42a3      	cmp	r3, r4
 8008544:	bfbf      	itttt	lt
 8008546:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008548:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800854a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800854c:	1ae3      	sublt	r3, r4, r3
 800854e:	bfb4      	ite	lt
 8008550:	18d2      	addlt	r2, r2, r3
 8008552:	1b1c      	subge	r4, r3, r4
 8008554:	9b07      	ldr	r3, [sp, #28]
 8008556:	bfbc      	itt	lt
 8008558:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800855a:	2400      	movlt	r4, #0
 800855c:	2b00      	cmp	r3, #0
 800855e:	bfb5      	itete	lt
 8008560:	eba8 0603 	sublt.w	r6, r8, r3
 8008564:	9b07      	ldrge	r3, [sp, #28]
 8008566:	2300      	movlt	r3, #0
 8008568:	4646      	movge	r6, r8
 800856a:	e730      	b.n	80083ce <_dtoa_r+0x71e>
 800856c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800856e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008570:	4646      	mov	r6, r8
 8008572:	e735      	b.n	80083e0 <_dtoa_r+0x730>
 8008574:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008576:	e75c      	b.n	8008432 <_dtoa_r+0x782>
 8008578:	2300      	movs	r3, #0
 800857a:	e788      	b.n	800848e <_dtoa_r+0x7de>
 800857c:	3fe00000 	.word	0x3fe00000
 8008580:	40240000 	.word	0x40240000
 8008584:	40140000 	.word	0x40140000
 8008588:	9b02      	ldr	r3, [sp, #8]
 800858a:	e780      	b.n	800848e <_dtoa_r+0x7de>
 800858c:	2300      	movs	r3, #0
 800858e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008590:	e782      	b.n	8008498 <_dtoa_r+0x7e8>
 8008592:	d099      	beq.n	80084c8 <_dtoa_r+0x818>
 8008594:	9a08      	ldr	r2, [sp, #32]
 8008596:	331c      	adds	r3, #28
 8008598:	441a      	add	r2, r3
 800859a:	4498      	add	r8, r3
 800859c:	441e      	add	r6, r3
 800859e:	9208      	str	r2, [sp, #32]
 80085a0:	e792      	b.n	80084c8 <_dtoa_r+0x818>
 80085a2:	4603      	mov	r3, r0
 80085a4:	e7f6      	b.n	8008594 <_dtoa_r+0x8e4>
 80085a6:	9b07      	ldr	r3, [sp, #28]
 80085a8:	9704      	str	r7, [sp, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	dc20      	bgt.n	80085f0 <_dtoa_r+0x940>
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	dd1e      	ble.n	80085f4 <_dtoa_r+0x944>
 80085b6:	9b00      	ldr	r3, [sp, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f47f aec0 	bne.w	800833e <_dtoa_r+0x68e>
 80085be:	4621      	mov	r1, r4
 80085c0:	2205      	movs	r2, #5
 80085c2:	4658      	mov	r0, fp
 80085c4:	f000 fa9a 	bl	8008afc <__multadd>
 80085c8:	4601      	mov	r1, r0
 80085ca:	4604      	mov	r4, r0
 80085cc:	4648      	mov	r0, r9
 80085ce:	f000 fcf7 	bl	8008fc0 <__mcmp>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	f77f aeb3 	ble.w	800833e <_dtoa_r+0x68e>
 80085d8:	4656      	mov	r6, sl
 80085da:	2331      	movs	r3, #49	@ 0x31
 80085dc:	f806 3b01 	strb.w	r3, [r6], #1
 80085e0:	9b04      	ldr	r3, [sp, #16]
 80085e2:	3301      	adds	r3, #1
 80085e4:	9304      	str	r3, [sp, #16]
 80085e6:	e6ae      	b.n	8008346 <_dtoa_r+0x696>
 80085e8:	9c07      	ldr	r4, [sp, #28]
 80085ea:	9704      	str	r7, [sp, #16]
 80085ec:	4625      	mov	r5, r4
 80085ee:	e7f3      	b.n	80085d8 <_dtoa_r+0x928>
 80085f0:	9b07      	ldr	r3, [sp, #28]
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 8104 	beq.w	8008804 <_dtoa_r+0xb54>
 80085fc:	2e00      	cmp	r6, #0
 80085fe:	dd05      	ble.n	800860c <_dtoa_r+0x95c>
 8008600:	4629      	mov	r1, r5
 8008602:	4632      	mov	r2, r6
 8008604:	4658      	mov	r0, fp
 8008606:	f000 fc6f 	bl	8008ee8 <__lshift>
 800860a:	4605      	mov	r5, r0
 800860c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800860e:	2b00      	cmp	r3, #0
 8008610:	d05a      	beq.n	80086c8 <_dtoa_r+0xa18>
 8008612:	6869      	ldr	r1, [r5, #4]
 8008614:	4658      	mov	r0, fp
 8008616:	f000 fa0f 	bl	8008a38 <_Balloc>
 800861a:	4606      	mov	r6, r0
 800861c:	b928      	cbnz	r0, 800862a <_dtoa_r+0x97a>
 800861e:	4b84      	ldr	r3, [pc, #528]	@ (8008830 <_dtoa_r+0xb80>)
 8008620:	4602      	mov	r2, r0
 8008622:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008626:	f7ff bb5a 	b.w	8007cde <_dtoa_r+0x2e>
 800862a:	692a      	ldr	r2, [r5, #16]
 800862c:	3202      	adds	r2, #2
 800862e:	0092      	lsls	r2, r2, #2
 8008630:	f105 010c 	add.w	r1, r5, #12
 8008634:	300c      	adds	r0, #12
 8008636:	f002 f93b 	bl	800a8b0 <memcpy>
 800863a:	2201      	movs	r2, #1
 800863c:	4631      	mov	r1, r6
 800863e:	4658      	mov	r0, fp
 8008640:	f000 fc52 	bl	8008ee8 <__lshift>
 8008644:	f10a 0301 	add.w	r3, sl, #1
 8008648:	9307      	str	r3, [sp, #28]
 800864a:	9b00      	ldr	r3, [sp, #0]
 800864c:	4453      	add	r3, sl
 800864e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	462f      	mov	r7, r5
 8008658:	930a      	str	r3, [sp, #40]	@ 0x28
 800865a:	4605      	mov	r5, r0
 800865c:	9b07      	ldr	r3, [sp, #28]
 800865e:	4621      	mov	r1, r4
 8008660:	3b01      	subs	r3, #1
 8008662:	4648      	mov	r0, r9
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	f7ff fa99 	bl	8007b9c <quorem>
 800866a:	4639      	mov	r1, r7
 800866c:	9002      	str	r0, [sp, #8]
 800866e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008672:	4648      	mov	r0, r9
 8008674:	f000 fca4 	bl	8008fc0 <__mcmp>
 8008678:	462a      	mov	r2, r5
 800867a:	9008      	str	r0, [sp, #32]
 800867c:	4621      	mov	r1, r4
 800867e:	4658      	mov	r0, fp
 8008680:	f000 fcba 	bl	8008ff8 <__mdiff>
 8008684:	68c2      	ldr	r2, [r0, #12]
 8008686:	4606      	mov	r6, r0
 8008688:	bb02      	cbnz	r2, 80086cc <_dtoa_r+0xa1c>
 800868a:	4601      	mov	r1, r0
 800868c:	4648      	mov	r0, r9
 800868e:	f000 fc97 	bl	8008fc0 <__mcmp>
 8008692:	4602      	mov	r2, r0
 8008694:	4631      	mov	r1, r6
 8008696:	4658      	mov	r0, fp
 8008698:	920e      	str	r2, [sp, #56]	@ 0x38
 800869a:	f000 fa0d 	bl	8008ab8 <_Bfree>
 800869e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086a2:	9e07      	ldr	r6, [sp, #28]
 80086a4:	ea43 0102 	orr.w	r1, r3, r2
 80086a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086aa:	4319      	orrs	r1, r3
 80086ac:	d110      	bne.n	80086d0 <_dtoa_r+0xa20>
 80086ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086b2:	d029      	beq.n	8008708 <_dtoa_r+0xa58>
 80086b4:	9b08      	ldr	r3, [sp, #32]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dd02      	ble.n	80086c0 <_dtoa_r+0xa10>
 80086ba:	9b02      	ldr	r3, [sp, #8]
 80086bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80086c0:	9b00      	ldr	r3, [sp, #0]
 80086c2:	f883 8000 	strb.w	r8, [r3]
 80086c6:	e63f      	b.n	8008348 <_dtoa_r+0x698>
 80086c8:	4628      	mov	r0, r5
 80086ca:	e7bb      	b.n	8008644 <_dtoa_r+0x994>
 80086cc:	2201      	movs	r2, #1
 80086ce:	e7e1      	b.n	8008694 <_dtoa_r+0x9e4>
 80086d0:	9b08      	ldr	r3, [sp, #32]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	db04      	blt.n	80086e0 <_dtoa_r+0xa30>
 80086d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086d8:	430b      	orrs	r3, r1
 80086da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086dc:	430b      	orrs	r3, r1
 80086de:	d120      	bne.n	8008722 <_dtoa_r+0xa72>
 80086e0:	2a00      	cmp	r2, #0
 80086e2:	dded      	ble.n	80086c0 <_dtoa_r+0xa10>
 80086e4:	4649      	mov	r1, r9
 80086e6:	2201      	movs	r2, #1
 80086e8:	4658      	mov	r0, fp
 80086ea:	f000 fbfd 	bl	8008ee8 <__lshift>
 80086ee:	4621      	mov	r1, r4
 80086f0:	4681      	mov	r9, r0
 80086f2:	f000 fc65 	bl	8008fc0 <__mcmp>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	dc03      	bgt.n	8008702 <_dtoa_r+0xa52>
 80086fa:	d1e1      	bne.n	80086c0 <_dtoa_r+0xa10>
 80086fc:	f018 0f01 	tst.w	r8, #1
 8008700:	d0de      	beq.n	80086c0 <_dtoa_r+0xa10>
 8008702:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008706:	d1d8      	bne.n	80086ba <_dtoa_r+0xa0a>
 8008708:	9a00      	ldr	r2, [sp, #0]
 800870a:	2339      	movs	r3, #57	@ 0x39
 800870c:	7013      	strb	r3, [r2, #0]
 800870e:	4633      	mov	r3, r6
 8008710:	461e      	mov	r6, r3
 8008712:	3b01      	subs	r3, #1
 8008714:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008718:	2a39      	cmp	r2, #57	@ 0x39
 800871a:	d052      	beq.n	80087c2 <_dtoa_r+0xb12>
 800871c:	3201      	adds	r2, #1
 800871e:	701a      	strb	r2, [r3, #0]
 8008720:	e612      	b.n	8008348 <_dtoa_r+0x698>
 8008722:	2a00      	cmp	r2, #0
 8008724:	dd07      	ble.n	8008736 <_dtoa_r+0xa86>
 8008726:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800872a:	d0ed      	beq.n	8008708 <_dtoa_r+0xa58>
 800872c:	9a00      	ldr	r2, [sp, #0]
 800872e:	f108 0301 	add.w	r3, r8, #1
 8008732:	7013      	strb	r3, [r2, #0]
 8008734:	e608      	b.n	8008348 <_dtoa_r+0x698>
 8008736:	9b07      	ldr	r3, [sp, #28]
 8008738:	9a07      	ldr	r2, [sp, #28]
 800873a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800873e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008740:	4293      	cmp	r3, r2
 8008742:	d028      	beq.n	8008796 <_dtoa_r+0xae6>
 8008744:	4649      	mov	r1, r9
 8008746:	2300      	movs	r3, #0
 8008748:	220a      	movs	r2, #10
 800874a:	4658      	mov	r0, fp
 800874c:	f000 f9d6 	bl	8008afc <__multadd>
 8008750:	42af      	cmp	r7, r5
 8008752:	4681      	mov	r9, r0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	f04f 020a 	mov.w	r2, #10
 800875c:	4639      	mov	r1, r7
 800875e:	4658      	mov	r0, fp
 8008760:	d107      	bne.n	8008772 <_dtoa_r+0xac2>
 8008762:	f000 f9cb 	bl	8008afc <__multadd>
 8008766:	4607      	mov	r7, r0
 8008768:	4605      	mov	r5, r0
 800876a:	9b07      	ldr	r3, [sp, #28]
 800876c:	3301      	adds	r3, #1
 800876e:	9307      	str	r3, [sp, #28]
 8008770:	e774      	b.n	800865c <_dtoa_r+0x9ac>
 8008772:	f000 f9c3 	bl	8008afc <__multadd>
 8008776:	4629      	mov	r1, r5
 8008778:	4607      	mov	r7, r0
 800877a:	2300      	movs	r3, #0
 800877c:	220a      	movs	r2, #10
 800877e:	4658      	mov	r0, fp
 8008780:	f000 f9bc 	bl	8008afc <__multadd>
 8008784:	4605      	mov	r5, r0
 8008786:	e7f0      	b.n	800876a <_dtoa_r+0xaba>
 8008788:	9b00      	ldr	r3, [sp, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	bfcc      	ite	gt
 800878e:	461e      	movgt	r6, r3
 8008790:	2601      	movle	r6, #1
 8008792:	4456      	add	r6, sl
 8008794:	2700      	movs	r7, #0
 8008796:	4649      	mov	r1, r9
 8008798:	2201      	movs	r2, #1
 800879a:	4658      	mov	r0, fp
 800879c:	f000 fba4 	bl	8008ee8 <__lshift>
 80087a0:	4621      	mov	r1, r4
 80087a2:	4681      	mov	r9, r0
 80087a4:	f000 fc0c 	bl	8008fc0 <__mcmp>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	dcb0      	bgt.n	800870e <_dtoa_r+0xa5e>
 80087ac:	d102      	bne.n	80087b4 <_dtoa_r+0xb04>
 80087ae:	f018 0f01 	tst.w	r8, #1
 80087b2:	d1ac      	bne.n	800870e <_dtoa_r+0xa5e>
 80087b4:	4633      	mov	r3, r6
 80087b6:	461e      	mov	r6, r3
 80087b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087bc:	2a30      	cmp	r2, #48	@ 0x30
 80087be:	d0fa      	beq.n	80087b6 <_dtoa_r+0xb06>
 80087c0:	e5c2      	b.n	8008348 <_dtoa_r+0x698>
 80087c2:	459a      	cmp	sl, r3
 80087c4:	d1a4      	bne.n	8008710 <_dtoa_r+0xa60>
 80087c6:	9b04      	ldr	r3, [sp, #16]
 80087c8:	3301      	adds	r3, #1
 80087ca:	9304      	str	r3, [sp, #16]
 80087cc:	2331      	movs	r3, #49	@ 0x31
 80087ce:	f88a 3000 	strb.w	r3, [sl]
 80087d2:	e5b9      	b.n	8008348 <_dtoa_r+0x698>
 80087d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008834 <_dtoa_r+0xb84>
 80087da:	b11b      	cbz	r3, 80087e4 <_dtoa_r+0xb34>
 80087dc:	f10a 0308 	add.w	r3, sl, #8
 80087e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	4650      	mov	r0, sl
 80087e6:	b019      	add	sp, #100	@ 0x64
 80087e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	f77f ae37 	ble.w	8008462 <_dtoa_r+0x7b2>
 80087f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f8:	2001      	movs	r0, #1
 80087fa:	e655      	b.n	80084a8 <_dtoa_r+0x7f8>
 80087fc:	9b00      	ldr	r3, [sp, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f77f aed6 	ble.w	80085b0 <_dtoa_r+0x900>
 8008804:	4656      	mov	r6, sl
 8008806:	4621      	mov	r1, r4
 8008808:	4648      	mov	r0, r9
 800880a:	f7ff f9c7 	bl	8007b9c <quorem>
 800880e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008812:	f806 8b01 	strb.w	r8, [r6], #1
 8008816:	9b00      	ldr	r3, [sp, #0]
 8008818:	eba6 020a 	sub.w	r2, r6, sl
 800881c:	4293      	cmp	r3, r2
 800881e:	ddb3      	ble.n	8008788 <_dtoa_r+0xad8>
 8008820:	4649      	mov	r1, r9
 8008822:	2300      	movs	r3, #0
 8008824:	220a      	movs	r2, #10
 8008826:	4658      	mov	r0, fp
 8008828:	f000 f968 	bl	8008afc <__multadd>
 800882c:	4681      	mov	r9, r0
 800882e:	e7ea      	b.n	8008806 <_dtoa_r+0xb56>
 8008830:	0800b2dd 	.word	0x0800b2dd
 8008834:	0800b261 	.word	0x0800b261

08008838 <_free_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4605      	mov	r5, r0
 800883c:	2900      	cmp	r1, #0
 800883e:	d041      	beq.n	80088c4 <_free_r+0x8c>
 8008840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008844:	1f0c      	subs	r4, r1, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	bfb8      	it	lt
 800884a:	18e4      	addlt	r4, r4, r3
 800884c:	f000 f8e8 	bl	8008a20 <__malloc_lock>
 8008850:	4a1d      	ldr	r2, [pc, #116]	@ (80088c8 <_free_r+0x90>)
 8008852:	6813      	ldr	r3, [r2, #0]
 8008854:	b933      	cbnz	r3, 8008864 <_free_r+0x2c>
 8008856:	6063      	str	r3, [r4, #4]
 8008858:	6014      	str	r4, [r2, #0]
 800885a:	4628      	mov	r0, r5
 800885c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008860:	f000 b8e4 	b.w	8008a2c <__malloc_unlock>
 8008864:	42a3      	cmp	r3, r4
 8008866:	d908      	bls.n	800887a <_free_r+0x42>
 8008868:	6820      	ldr	r0, [r4, #0]
 800886a:	1821      	adds	r1, r4, r0
 800886c:	428b      	cmp	r3, r1
 800886e:	bf01      	itttt	eq
 8008870:	6819      	ldreq	r1, [r3, #0]
 8008872:	685b      	ldreq	r3, [r3, #4]
 8008874:	1809      	addeq	r1, r1, r0
 8008876:	6021      	streq	r1, [r4, #0]
 8008878:	e7ed      	b.n	8008856 <_free_r+0x1e>
 800887a:	461a      	mov	r2, r3
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	b10b      	cbz	r3, 8008884 <_free_r+0x4c>
 8008880:	42a3      	cmp	r3, r4
 8008882:	d9fa      	bls.n	800887a <_free_r+0x42>
 8008884:	6811      	ldr	r1, [r2, #0]
 8008886:	1850      	adds	r0, r2, r1
 8008888:	42a0      	cmp	r0, r4
 800888a:	d10b      	bne.n	80088a4 <_free_r+0x6c>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	4401      	add	r1, r0
 8008890:	1850      	adds	r0, r2, r1
 8008892:	4283      	cmp	r3, r0
 8008894:	6011      	str	r1, [r2, #0]
 8008896:	d1e0      	bne.n	800885a <_free_r+0x22>
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	6053      	str	r3, [r2, #4]
 800889e:	4408      	add	r0, r1
 80088a0:	6010      	str	r0, [r2, #0]
 80088a2:	e7da      	b.n	800885a <_free_r+0x22>
 80088a4:	d902      	bls.n	80088ac <_free_r+0x74>
 80088a6:	230c      	movs	r3, #12
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	e7d6      	b.n	800885a <_free_r+0x22>
 80088ac:	6820      	ldr	r0, [r4, #0]
 80088ae:	1821      	adds	r1, r4, r0
 80088b0:	428b      	cmp	r3, r1
 80088b2:	bf04      	itt	eq
 80088b4:	6819      	ldreq	r1, [r3, #0]
 80088b6:	685b      	ldreq	r3, [r3, #4]
 80088b8:	6063      	str	r3, [r4, #4]
 80088ba:	bf04      	itt	eq
 80088bc:	1809      	addeq	r1, r1, r0
 80088be:	6021      	streq	r1, [r4, #0]
 80088c0:	6054      	str	r4, [r2, #4]
 80088c2:	e7ca      	b.n	800885a <_free_r+0x22>
 80088c4:	bd38      	pop	{r3, r4, r5, pc}
 80088c6:	bf00      	nop
 80088c8:	20000594 	.word	0x20000594

080088cc <malloc>:
 80088cc:	4b02      	ldr	r3, [pc, #8]	@ (80088d8 <malloc+0xc>)
 80088ce:	4601      	mov	r1, r0
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	f000 b825 	b.w	8008920 <_malloc_r>
 80088d6:	bf00      	nop
 80088d8:	2000002c 	.word	0x2000002c

080088dc <sbrk_aligned>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	4e0f      	ldr	r6, [pc, #60]	@ (800891c <sbrk_aligned+0x40>)
 80088e0:	460c      	mov	r4, r1
 80088e2:	6831      	ldr	r1, [r6, #0]
 80088e4:	4605      	mov	r5, r0
 80088e6:	b911      	cbnz	r1, 80088ee <sbrk_aligned+0x12>
 80088e8:	f001 ffd2 	bl	800a890 <_sbrk_r>
 80088ec:	6030      	str	r0, [r6, #0]
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f001 ffcd 	bl	800a890 <_sbrk_r>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d103      	bne.n	8008902 <sbrk_aligned+0x26>
 80088fa:	f04f 34ff 	mov.w	r4, #4294967295
 80088fe:	4620      	mov	r0, r4
 8008900:	bd70      	pop	{r4, r5, r6, pc}
 8008902:	1cc4      	adds	r4, r0, #3
 8008904:	f024 0403 	bic.w	r4, r4, #3
 8008908:	42a0      	cmp	r0, r4
 800890a:	d0f8      	beq.n	80088fe <sbrk_aligned+0x22>
 800890c:	1a21      	subs	r1, r4, r0
 800890e:	4628      	mov	r0, r5
 8008910:	f001 ffbe 	bl	800a890 <_sbrk_r>
 8008914:	3001      	adds	r0, #1
 8008916:	d1f2      	bne.n	80088fe <sbrk_aligned+0x22>
 8008918:	e7ef      	b.n	80088fa <sbrk_aligned+0x1e>
 800891a:	bf00      	nop
 800891c:	20000590 	.word	0x20000590

08008920 <_malloc_r>:
 8008920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008924:	1ccd      	adds	r5, r1, #3
 8008926:	f025 0503 	bic.w	r5, r5, #3
 800892a:	3508      	adds	r5, #8
 800892c:	2d0c      	cmp	r5, #12
 800892e:	bf38      	it	cc
 8008930:	250c      	movcc	r5, #12
 8008932:	2d00      	cmp	r5, #0
 8008934:	4606      	mov	r6, r0
 8008936:	db01      	blt.n	800893c <_malloc_r+0x1c>
 8008938:	42a9      	cmp	r1, r5
 800893a:	d904      	bls.n	8008946 <_malloc_r+0x26>
 800893c:	230c      	movs	r3, #12
 800893e:	6033      	str	r3, [r6, #0]
 8008940:	2000      	movs	r0, #0
 8008942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a1c <_malloc_r+0xfc>
 800894a:	f000 f869 	bl	8008a20 <__malloc_lock>
 800894e:	f8d8 3000 	ldr.w	r3, [r8]
 8008952:	461c      	mov	r4, r3
 8008954:	bb44      	cbnz	r4, 80089a8 <_malloc_r+0x88>
 8008956:	4629      	mov	r1, r5
 8008958:	4630      	mov	r0, r6
 800895a:	f7ff ffbf 	bl	80088dc <sbrk_aligned>
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	4604      	mov	r4, r0
 8008962:	d158      	bne.n	8008a16 <_malloc_r+0xf6>
 8008964:	f8d8 4000 	ldr.w	r4, [r8]
 8008968:	4627      	mov	r7, r4
 800896a:	2f00      	cmp	r7, #0
 800896c:	d143      	bne.n	80089f6 <_malloc_r+0xd6>
 800896e:	2c00      	cmp	r4, #0
 8008970:	d04b      	beq.n	8008a0a <_malloc_r+0xea>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	4639      	mov	r1, r7
 8008976:	4630      	mov	r0, r6
 8008978:	eb04 0903 	add.w	r9, r4, r3
 800897c:	f001 ff88 	bl	800a890 <_sbrk_r>
 8008980:	4581      	cmp	r9, r0
 8008982:	d142      	bne.n	8008a0a <_malloc_r+0xea>
 8008984:	6821      	ldr	r1, [r4, #0]
 8008986:	1a6d      	subs	r5, r5, r1
 8008988:	4629      	mov	r1, r5
 800898a:	4630      	mov	r0, r6
 800898c:	f7ff ffa6 	bl	80088dc <sbrk_aligned>
 8008990:	3001      	adds	r0, #1
 8008992:	d03a      	beq.n	8008a0a <_malloc_r+0xea>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	442b      	add	r3, r5
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	f8d8 3000 	ldr.w	r3, [r8]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	bb62      	cbnz	r2, 80089fc <_malloc_r+0xdc>
 80089a2:	f8c8 7000 	str.w	r7, [r8]
 80089a6:	e00f      	b.n	80089c8 <_malloc_r+0xa8>
 80089a8:	6822      	ldr	r2, [r4, #0]
 80089aa:	1b52      	subs	r2, r2, r5
 80089ac:	d420      	bmi.n	80089f0 <_malloc_r+0xd0>
 80089ae:	2a0b      	cmp	r2, #11
 80089b0:	d917      	bls.n	80089e2 <_malloc_r+0xc2>
 80089b2:	1961      	adds	r1, r4, r5
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	6025      	str	r5, [r4, #0]
 80089b8:	bf18      	it	ne
 80089ba:	6059      	strne	r1, [r3, #4]
 80089bc:	6863      	ldr	r3, [r4, #4]
 80089be:	bf08      	it	eq
 80089c0:	f8c8 1000 	streq.w	r1, [r8]
 80089c4:	5162      	str	r2, [r4, r5]
 80089c6:	604b      	str	r3, [r1, #4]
 80089c8:	4630      	mov	r0, r6
 80089ca:	f000 f82f 	bl	8008a2c <__malloc_unlock>
 80089ce:	f104 000b 	add.w	r0, r4, #11
 80089d2:	1d23      	adds	r3, r4, #4
 80089d4:	f020 0007 	bic.w	r0, r0, #7
 80089d8:	1ac2      	subs	r2, r0, r3
 80089da:	bf1c      	itt	ne
 80089dc:	1a1b      	subne	r3, r3, r0
 80089de:	50a3      	strne	r3, [r4, r2]
 80089e0:	e7af      	b.n	8008942 <_malloc_r+0x22>
 80089e2:	6862      	ldr	r2, [r4, #4]
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	bf0c      	ite	eq
 80089e8:	f8c8 2000 	streq.w	r2, [r8]
 80089ec:	605a      	strne	r2, [r3, #4]
 80089ee:	e7eb      	b.n	80089c8 <_malloc_r+0xa8>
 80089f0:	4623      	mov	r3, r4
 80089f2:	6864      	ldr	r4, [r4, #4]
 80089f4:	e7ae      	b.n	8008954 <_malloc_r+0x34>
 80089f6:	463c      	mov	r4, r7
 80089f8:	687f      	ldr	r7, [r7, #4]
 80089fa:	e7b6      	b.n	800896a <_malloc_r+0x4a>
 80089fc:	461a      	mov	r2, r3
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	d1fb      	bne.n	80089fc <_malloc_r+0xdc>
 8008a04:	2300      	movs	r3, #0
 8008a06:	6053      	str	r3, [r2, #4]
 8008a08:	e7de      	b.n	80089c8 <_malloc_r+0xa8>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	6033      	str	r3, [r6, #0]
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f000 f80c 	bl	8008a2c <__malloc_unlock>
 8008a14:	e794      	b.n	8008940 <_malloc_r+0x20>
 8008a16:	6005      	str	r5, [r0, #0]
 8008a18:	e7d6      	b.n	80089c8 <_malloc_r+0xa8>
 8008a1a:	bf00      	nop
 8008a1c:	20000594 	.word	0x20000594

08008a20 <__malloc_lock>:
 8008a20:	4801      	ldr	r0, [pc, #4]	@ (8008a28 <__malloc_lock+0x8>)
 8008a22:	f7ff b8b2 	b.w	8007b8a <__retarget_lock_acquire_recursive>
 8008a26:	bf00      	nop
 8008a28:	2000058c 	.word	0x2000058c

08008a2c <__malloc_unlock>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	@ (8008a34 <__malloc_unlock+0x8>)
 8008a2e:	f7ff b8ad 	b.w	8007b8c <__retarget_lock_release_recursive>
 8008a32:	bf00      	nop
 8008a34:	2000058c 	.word	0x2000058c

08008a38 <_Balloc>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	69c6      	ldr	r6, [r0, #28]
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	460d      	mov	r5, r1
 8008a40:	b976      	cbnz	r6, 8008a60 <_Balloc+0x28>
 8008a42:	2010      	movs	r0, #16
 8008a44:	f7ff ff42 	bl	80088cc <malloc>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	61e0      	str	r0, [r4, #28]
 8008a4c:	b920      	cbnz	r0, 8008a58 <_Balloc+0x20>
 8008a4e:	4b18      	ldr	r3, [pc, #96]	@ (8008ab0 <_Balloc+0x78>)
 8008a50:	4818      	ldr	r0, [pc, #96]	@ (8008ab4 <_Balloc+0x7c>)
 8008a52:	216b      	movs	r1, #107	@ 0x6b
 8008a54:	f001 ff44 	bl	800a8e0 <__assert_func>
 8008a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a5c:	6006      	str	r6, [r0, #0]
 8008a5e:	60c6      	str	r6, [r0, #12]
 8008a60:	69e6      	ldr	r6, [r4, #28]
 8008a62:	68f3      	ldr	r3, [r6, #12]
 8008a64:	b183      	cbz	r3, 8008a88 <_Balloc+0x50>
 8008a66:	69e3      	ldr	r3, [r4, #28]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a6e:	b9b8      	cbnz	r0, 8008aa0 <_Balloc+0x68>
 8008a70:	2101      	movs	r1, #1
 8008a72:	fa01 f605 	lsl.w	r6, r1, r5
 8008a76:	1d72      	adds	r2, r6, #5
 8008a78:	0092      	lsls	r2, r2, #2
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f001 ff4e 	bl	800a91c <_calloc_r>
 8008a80:	b160      	cbz	r0, 8008a9c <_Balloc+0x64>
 8008a82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a86:	e00e      	b.n	8008aa6 <_Balloc+0x6e>
 8008a88:	2221      	movs	r2, #33	@ 0x21
 8008a8a:	2104      	movs	r1, #4
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f001 ff45 	bl	800a91c <_calloc_r>
 8008a92:	69e3      	ldr	r3, [r4, #28]
 8008a94:	60f0      	str	r0, [r6, #12]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1e4      	bne.n	8008a66 <_Balloc+0x2e>
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	6802      	ldr	r2, [r0, #0]
 8008aa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008aac:	e7f7      	b.n	8008a9e <_Balloc+0x66>
 8008aae:	bf00      	nop
 8008ab0:	0800b26e 	.word	0x0800b26e
 8008ab4:	0800b2ee 	.word	0x0800b2ee

08008ab8 <_Bfree>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	69c6      	ldr	r6, [r0, #28]
 8008abc:	4605      	mov	r5, r0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	b976      	cbnz	r6, 8008ae0 <_Bfree+0x28>
 8008ac2:	2010      	movs	r0, #16
 8008ac4:	f7ff ff02 	bl	80088cc <malloc>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	61e8      	str	r0, [r5, #28]
 8008acc:	b920      	cbnz	r0, 8008ad8 <_Bfree+0x20>
 8008ace:	4b09      	ldr	r3, [pc, #36]	@ (8008af4 <_Bfree+0x3c>)
 8008ad0:	4809      	ldr	r0, [pc, #36]	@ (8008af8 <_Bfree+0x40>)
 8008ad2:	218f      	movs	r1, #143	@ 0x8f
 8008ad4:	f001 ff04 	bl	800a8e0 <__assert_func>
 8008ad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008adc:	6006      	str	r6, [r0, #0]
 8008ade:	60c6      	str	r6, [r0, #12]
 8008ae0:	b13c      	cbz	r4, 8008af2 <_Bfree+0x3a>
 8008ae2:	69eb      	ldr	r3, [r5, #28]
 8008ae4:	6862      	ldr	r2, [r4, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008aec:	6021      	str	r1, [r4, #0]
 8008aee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
 8008af4:	0800b26e 	.word	0x0800b26e
 8008af8:	0800b2ee 	.word	0x0800b2ee

08008afc <__multadd>:
 8008afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b00:	690d      	ldr	r5, [r1, #16]
 8008b02:	4607      	mov	r7, r0
 8008b04:	460c      	mov	r4, r1
 8008b06:	461e      	mov	r6, r3
 8008b08:	f101 0c14 	add.w	ip, r1, #20
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f8dc 3000 	ldr.w	r3, [ip]
 8008b12:	b299      	uxth	r1, r3
 8008b14:	fb02 6101 	mla	r1, r2, r1, r6
 8008b18:	0c1e      	lsrs	r6, r3, #16
 8008b1a:	0c0b      	lsrs	r3, r1, #16
 8008b1c:	fb02 3306 	mla	r3, r2, r6, r3
 8008b20:	b289      	uxth	r1, r1
 8008b22:	3001      	adds	r0, #1
 8008b24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b28:	4285      	cmp	r5, r0
 8008b2a:	f84c 1b04 	str.w	r1, [ip], #4
 8008b2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b32:	dcec      	bgt.n	8008b0e <__multadd+0x12>
 8008b34:	b30e      	cbz	r6, 8008b7a <__multadd+0x7e>
 8008b36:	68a3      	ldr	r3, [r4, #8]
 8008b38:	42ab      	cmp	r3, r5
 8008b3a:	dc19      	bgt.n	8008b70 <__multadd+0x74>
 8008b3c:	6861      	ldr	r1, [r4, #4]
 8008b3e:	4638      	mov	r0, r7
 8008b40:	3101      	adds	r1, #1
 8008b42:	f7ff ff79 	bl	8008a38 <_Balloc>
 8008b46:	4680      	mov	r8, r0
 8008b48:	b928      	cbnz	r0, 8008b56 <__multadd+0x5a>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b80 <__multadd+0x84>)
 8008b4e:	480d      	ldr	r0, [pc, #52]	@ (8008b84 <__multadd+0x88>)
 8008b50:	21ba      	movs	r1, #186	@ 0xba
 8008b52:	f001 fec5 	bl	800a8e0 <__assert_func>
 8008b56:	6922      	ldr	r2, [r4, #16]
 8008b58:	3202      	adds	r2, #2
 8008b5a:	f104 010c 	add.w	r1, r4, #12
 8008b5e:	0092      	lsls	r2, r2, #2
 8008b60:	300c      	adds	r0, #12
 8008b62:	f001 fea5 	bl	800a8b0 <memcpy>
 8008b66:	4621      	mov	r1, r4
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f7ff ffa5 	bl	8008ab8 <_Bfree>
 8008b6e:	4644      	mov	r4, r8
 8008b70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b74:	3501      	adds	r5, #1
 8008b76:	615e      	str	r6, [r3, #20]
 8008b78:	6125      	str	r5, [r4, #16]
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b80:	0800b2dd 	.word	0x0800b2dd
 8008b84:	0800b2ee 	.word	0x0800b2ee

08008b88 <__s2b>:
 8008b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	4615      	mov	r5, r2
 8008b90:	461f      	mov	r7, r3
 8008b92:	2209      	movs	r2, #9
 8008b94:	3308      	adds	r3, #8
 8008b96:	4606      	mov	r6, r0
 8008b98:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	db09      	blt.n	8008bb8 <__s2b+0x30>
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f7ff ff47 	bl	8008a38 <_Balloc>
 8008baa:	b940      	cbnz	r0, 8008bbe <__s2b+0x36>
 8008bac:	4602      	mov	r2, r0
 8008bae:	4b19      	ldr	r3, [pc, #100]	@ (8008c14 <__s2b+0x8c>)
 8008bb0:	4819      	ldr	r0, [pc, #100]	@ (8008c18 <__s2b+0x90>)
 8008bb2:	21d3      	movs	r1, #211	@ 0xd3
 8008bb4:	f001 fe94 	bl	800a8e0 <__assert_func>
 8008bb8:	0052      	lsls	r2, r2, #1
 8008bba:	3101      	adds	r1, #1
 8008bbc:	e7f0      	b.n	8008ba0 <__s2b+0x18>
 8008bbe:	9b08      	ldr	r3, [sp, #32]
 8008bc0:	6143      	str	r3, [r0, #20]
 8008bc2:	2d09      	cmp	r5, #9
 8008bc4:	f04f 0301 	mov.w	r3, #1
 8008bc8:	6103      	str	r3, [r0, #16]
 8008bca:	dd16      	ble.n	8008bfa <__s2b+0x72>
 8008bcc:	f104 0909 	add.w	r9, r4, #9
 8008bd0:	46c8      	mov	r8, r9
 8008bd2:	442c      	add	r4, r5
 8008bd4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008bd8:	4601      	mov	r1, r0
 8008bda:	3b30      	subs	r3, #48	@ 0x30
 8008bdc:	220a      	movs	r2, #10
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7ff ff8c 	bl	8008afc <__multadd>
 8008be4:	45a0      	cmp	r8, r4
 8008be6:	d1f5      	bne.n	8008bd4 <__s2b+0x4c>
 8008be8:	f1a5 0408 	sub.w	r4, r5, #8
 8008bec:	444c      	add	r4, r9
 8008bee:	1b2d      	subs	r5, r5, r4
 8008bf0:	1963      	adds	r3, r4, r5
 8008bf2:	42bb      	cmp	r3, r7
 8008bf4:	db04      	blt.n	8008c00 <__s2b+0x78>
 8008bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfa:	340a      	adds	r4, #10
 8008bfc:	2509      	movs	r5, #9
 8008bfe:	e7f6      	b.n	8008bee <__s2b+0x66>
 8008c00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c04:	4601      	mov	r1, r0
 8008c06:	3b30      	subs	r3, #48	@ 0x30
 8008c08:	220a      	movs	r2, #10
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f7ff ff76 	bl	8008afc <__multadd>
 8008c10:	e7ee      	b.n	8008bf0 <__s2b+0x68>
 8008c12:	bf00      	nop
 8008c14:	0800b2dd 	.word	0x0800b2dd
 8008c18:	0800b2ee 	.word	0x0800b2ee

08008c1c <__hi0bits>:
 8008c1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c20:	4603      	mov	r3, r0
 8008c22:	bf36      	itet	cc
 8008c24:	0403      	lslcc	r3, r0, #16
 8008c26:	2000      	movcs	r0, #0
 8008c28:	2010      	movcc	r0, #16
 8008c2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c2e:	bf3c      	itt	cc
 8008c30:	021b      	lslcc	r3, r3, #8
 8008c32:	3008      	addcc	r0, #8
 8008c34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c38:	bf3c      	itt	cc
 8008c3a:	011b      	lslcc	r3, r3, #4
 8008c3c:	3004      	addcc	r0, #4
 8008c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c42:	bf3c      	itt	cc
 8008c44:	009b      	lslcc	r3, r3, #2
 8008c46:	3002      	addcc	r0, #2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	db05      	blt.n	8008c58 <__hi0bits+0x3c>
 8008c4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c50:	f100 0001 	add.w	r0, r0, #1
 8008c54:	bf08      	it	eq
 8008c56:	2020      	moveq	r0, #32
 8008c58:	4770      	bx	lr

08008c5a <__lo0bits>:
 8008c5a:	6803      	ldr	r3, [r0, #0]
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	f013 0007 	ands.w	r0, r3, #7
 8008c62:	d00b      	beq.n	8008c7c <__lo0bits+0x22>
 8008c64:	07d9      	lsls	r1, r3, #31
 8008c66:	d421      	bmi.n	8008cac <__lo0bits+0x52>
 8008c68:	0798      	lsls	r0, r3, #30
 8008c6a:	bf49      	itett	mi
 8008c6c:	085b      	lsrmi	r3, r3, #1
 8008c6e:	089b      	lsrpl	r3, r3, #2
 8008c70:	2001      	movmi	r0, #1
 8008c72:	6013      	strmi	r3, [r2, #0]
 8008c74:	bf5c      	itt	pl
 8008c76:	6013      	strpl	r3, [r2, #0]
 8008c78:	2002      	movpl	r0, #2
 8008c7a:	4770      	bx	lr
 8008c7c:	b299      	uxth	r1, r3
 8008c7e:	b909      	cbnz	r1, 8008c84 <__lo0bits+0x2a>
 8008c80:	0c1b      	lsrs	r3, r3, #16
 8008c82:	2010      	movs	r0, #16
 8008c84:	b2d9      	uxtb	r1, r3
 8008c86:	b909      	cbnz	r1, 8008c8c <__lo0bits+0x32>
 8008c88:	3008      	adds	r0, #8
 8008c8a:	0a1b      	lsrs	r3, r3, #8
 8008c8c:	0719      	lsls	r1, r3, #28
 8008c8e:	bf04      	itt	eq
 8008c90:	091b      	lsreq	r3, r3, #4
 8008c92:	3004      	addeq	r0, #4
 8008c94:	0799      	lsls	r1, r3, #30
 8008c96:	bf04      	itt	eq
 8008c98:	089b      	lsreq	r3, r3, #2
 8008c9a:	3002      	addeq	r0, #2
 8008c9c:	07d9      	lsls	r1, r3, #31
 8008c9e:	d403      	bmi.n	8008ca8 <__lo0bits+0x4e>
 8008ca0:	085b      	lsrs	r3, r3, #1
 8008ca2:	f100 0001 	add.w	r0, r0, #1
 8008ca6:	d003      	beq.n	8008cb0 <__lo0bits+0x56>
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	4770      	bx	lr
 8008cac:	2000      	movs	r0, #0
 8008cae:	4770      	bx	lr
 8008cb0:	2020      	movs	r0, #32
 8008cb2:	4770      	bx	lr

08008cb4 <__i2b>:
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	2101      	movs	r1, #1
 8008cba:	f7ff febd 	bl	8008a38 <_Balloc>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	b928      	cbnz	r0, 8008cce <__i2b+0x1a>
 8008cc2:	4b05      	ldr	r3, [pc, #20]	@ (8008cd8 <__i2b+0x24>)
 8008cc4:	4805      	ldr	r0, [pc, #20]	@ (8008cdc <__i2b+0x28>)
 8008cc6:	f240 1145 	movw	r1, #325	@ 0x145
 8008cca:	f001 fe09 	bl	800a8e0 <__assert_func>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	6144      	str	r4, [r0, #20]
 8008cd2:	6103      	str	r3, [r0, #16]
 8008cd4:	bd10      	pop	{r4, pc}
 8008cd6:	bf00      	nop
 8008cd8:	0800b2dd 	.word	0x0800b2dd
 8008cdc:	0800b2ee 	.word	0x0800b2ee

08008ce0 <__multiply>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	4614      	mov	r4, r2
 8008ce6:	690a      	ldr	r2, [r1, #16]
 8008ce8:	6923      	ldr	r3, [r4, #16]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	bfa8      	it	ge
 8008cee:	4623      	movge	r3, r4
 8008cf0:	460f      	mov	r7, r1
 8008cf2:	bfa4      	itt	ge
 8008cf4:	460c      	movge	r4, r1
 8008cf6:	461f      	movge	r7, r3
 8008cf8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008cfc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008d00:	68a3      	ldr	r3, [r4, #8]
 8008d02:	6861      	ldr	r1, [r4, #4]
 8008d04:	eb0a 0609 	add.w	r6, sl, r9
 8008d08:	42b3      	cmp	r3, r6
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	bfb8      	it	lt
 8008d0e:	3101      	addlt	r1, #1
 8008d10:	f7ff fe92 	bl	8008a38 <_Balloc>
 8008d14:	b930      	cbnz	r0, 8008d24 <__multiply+0x44>
 8008d16:	4602      	mov	r2, r0
 8008d18:	4b44      	ldr	r3, [pc, #272]	@ (8008e2c <__multiply+0x14c>)
 8008d1a:	4845      	ldr	r0, [pc, #276]	@ (8008e30 <__multiply+0x150>)
 8008d1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d20:	f001 fdde 	bl	800a8e0 <__assert_func>
 8008d24:	f100 0514 	add.w	r5, r0, #20
 8008d28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d2c:	462b      	mov	r3, r5
 8008d2e:	2200      	movs	r2, #0
 8008d30:	4543      	cmp	r3, r8
 8008d32:	d321      	bcc.n	8008d78 <__multiply+0x98>
 8008d34:	f107 0114 	add.w	r1, r7, #20
 8008d38:	f104 0214 	add.w	r2, r4, #20
 8008d3c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d40:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d44:	9302      	str	r3, [sp, #8]
 8008d46:	1b13      	subs	r3, r2, r4
 8008d48:	3b15      	subs	r3, #21
 8008d4a:	f023 0303 	bic.w	r3, r3, #3
 8008d4e:	3304      	adds	r3, #4
 8008d50:	f104 0715 	add.w	r7, r4, #21
 8008d54:	42ba      	cmp	r2, r7
 8008d56:	bf38      	it	cc
 8008d58:	2304      	movcc	r3, #4
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	9b02      	ldr	r3, [sp, #8]
 8008d5e:	9103      	str	r1, [sp, #12]
 8008d60:	428b      	cmp	r3, r1
 8008d62:	d80c      	bhi.n	8008d7e <__multiply+0x9e>
 8008d64:	2e00      	cmp	r6, #0
 8008d66:	dd03      	ble.n	8008d70 <__multiply+0x90>
 8008d68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d05b      	beq.n	8008e28 <__multiply+0x148>
 8008d70:	6106      	str	r6, [r0, #16]
 8008d72:	b005      	add	sp, #20
 8008d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d78:	f843 2b04 	str.w	r2, [r3], #4
 8008d7c:	e7d8      	b.n	8008d30 <__multiply+0x50>
 8008d7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d82:	f1ba 0f00 	cmp.w	sl, #0
 8008d86:	d024      	beq.n	8008dd2 <__multiply+0xf2>
 8008d88:	f104 0e14 	add.w	lr, r4, #20
 8008d8c:	46a9      	mov	r9, r5
 8008d8e:	f04f 0c00 	mov.w	ip, #0
 8008d92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d96:	f8d9 3000 	ldr.w	r3, [r9]
 8008d9a:	fa1f fb87 	uxth.w	fp, r7
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	fb0a 330b 	mla	r3, sl, fp, r3
 8008da4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008da8:	f8d9 7000 	ldr.w	r7, [r9]
 8008dac:	4463      	add	r3, ip
 8008dae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008db2:	fb0a c70b 	mla	r7, sl, fp, ip
 8008db6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008dc0:	4572      	cmp	r2, lr
 8008dc2:	f849 3b04 	str.w	r3, [r9], #4
 8008dc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008dca:	d8e2      	bhi.n	8008d92 <__multiply+0xb2>
 8008dcc:	9b01      	ldr	r3, [sp, #4]
 8008dce:	f845 c003 	str.w	ip, [r5, r3]
 8008dd2:	9b03      	ldr	r3, [sp, #12]
 8008dd4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008dd8:	3104      	adds	r1, #4
 8008dda:	f1b9 0f00 	cmp.w	r9, #0
 8008dde:	d021      	beq.n	8008e24 <__multiply+0x144>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	f104 0c14 	add.w	ip, r4, #20
 8008de6:	46ae      	mov	lr, r5
 8008de8:	f04f 0a00 	mov.w	sl, #0
 8008dec:	f8bc b000 	ldrh.w	fp, [ip]
 8008df0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008df4:	fb09 770b 	mla	r7, r9, fp, r7
 8008df8:	4457      	add	r7, sl
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e00:	f84e 3b04 	str.w	r3, [lr], #4
 8008e04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e0c:	f8be 3000 	ldrh.w	r3, [lr]
 8008e10:	fb09 330a 	mla	r3, r9, sl, r3
 8008e14:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008e18:	4562      	cmp	r2, ip
 8008e1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e1e:	d8e5      	bhi.n	8008dec <__multiply+0x10c>
 8008e20:	9f01      	ldr	r7, [sp, #4]
 8008e22:	51eb      	str	r3, [r5, r7]
 8008e24:	3504      	adds	r5, #4
 8008e26:	e799      	b.n	8008d5c <__multiply+0x7c>
 8008e28:	3e01      	subs	r6, #1
 8008e2a:	e79b      	b.n	8008d64 <__multiply+0x84>
 8008e2c:	0800b2dd 	.word	0x0800b2dd
 8008e30:	0800b2ee 	.word	0x0800b2ee

08008e34 <__pow5mult>:
 8008e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e38:	4615      	mov	r5, r2
 8008e3a:	f012 0203 	ands.w	r2, r2, #3
 8008e3e:	4607      	mov	r7, r0
 8008e40:	460e      	mov	r6, r1
 8008e42:	d007      	beq.n	8008e54 <__pow5mult+0x20>
 8008e44:	4c25      	ldr	r4, [pc, #148]	@ (8008edc <__pow5mult+0xa8>)
 8008e46:	3a01      	subs	r2, #1
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e4e:	f7ff fe55 	bl	8008afc <__multadd>
 8008e52:	4606      	mov	r6, r0
 8008e54:	10ad      	asrs	r5, r5, #2
 8008e56:	d03d      	beq.n	8008ed4 <__pow5mult+0xa0>
 8008e58:	69fc      	ldr	r4, [r7, #28]
 8008e5a:	b97c      	cbnz	r4, 8008e7c <__pow5mult+0x48>
 8008e5c:	2010      	movs	r0, #16
 8008e5e:	f7ff fd35 	bl	80088cc <malloc>
 8008e62:	4602      	mov	r2, r0
 8008e64:	61f8      	str	r0, [r7, #28]
 8008e66:	b928      	cbnz	r0, 8008e74 <__pow5mult+0x40>
 8008e68:	4b1d      	ldr	r3, [pc, #116]	@ (8008ee0 <__pow5mult+0xac>)
 8008e6a:	481e      	ldr	r0, [pc, #120]	@ (8008ee4 <__pow5mult+0xb0>)
 8008e6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e70:	f001 fd36 	bl	800a8e0 <__assert_func>
 8008e74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e78:	6004      	str	r4, [r0, #0]
 8008e7a:	60c4      	str	r4, [r0, #12]
 8008e7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e84:	b94c      	cbnz	r4, 8008e9a <__pow5mult+0x66>
 8008e86:	f240 2171 	movw	r1, #625	@ 0x271
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	f7ff ff12 	bl	8008cb4 <__i2b>
 8008e90:	2300      	movs	r3, #0
 8008e92:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e96:	4604      	mov	r4, r0
 8008e98:	6003      	str	r3, [r0, #0]
 8008e9a:	f04f 0900 	mov.w	r9, #0
 8008e9e:	07eb      	lsls	r3, r5, #31
 8008ea0:	d50a      	bpl.n	8008eb8 <__pow5mult+0x84>
 8008ea2:	4631      	mov	r1, r6
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	f7ff ff1a 	bl	8008ce0 <__multiply>
 8008eac:	4631      	mov	r1, r6
 8008eae:	4680      	mov	r8, r0
 8008eb0:	4638      	mov	r0, r7
 8008eb2:	f7ff fe01 	bl	8008ab8 <_Bfree>
 8008eb6:	4646      	mov	r6, r8
 8008eb8:	106d      	asrs	r5, r5, #1
 8008eba:	d00b      	beq.n	8008ed4 <__pow5mult+0xa0>
 8008ebc:	6820      	ldr	r0, [r4, #0]
 8008ebe:	b938      	cbnz	r0, 8008ed0 <__pow5mult+0x9c>
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	f7ff ff0b 	bl	8008ce0 <__multiply>
 8008eca:	6020      	str	r0, [r4, #0]
 8008ecc:	f8c0 9000 	str.w	r9, [r0]
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	e7e4      	b.n	8008e9e <__pow5mult+0x6a>
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eda:	bf00      	nop
 8008edc:	0800b348 	.word	0x0800b348
 8008ee0:	0800b26e 	.word	0x0800b26e
 8008ee4:	0800b2ee 	.word	0x0800b2ee

08008ee8 <__lshift>:
 8008ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eec:	460c      	mov	r4, r1
 8008eee:	6849      	ldr	r1, [r1, #4]
 8008ef0:	6923      	ldr	r3, [r4, #16]
 8008ef2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	4607      	mov	r7, r0
 8008efa:	4691      	mov	r9, r2
 8008efc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f00:	f108 0601 	add.w	r6, r8, #1
 8008f04:	42b3      	cmp	r3, r6
 8008f06:	db0b      	blt.n	8008f20 <__lshift+0x38>
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff fd95 	bl	8008a38 <_Balloc>
 8008f0e:	4605      	mov	r5, r0
 8008f10:	b948      	cbnz	r0, 8008f26 <__lshift+0x3e>
 8008f12:	4602      	mov	r2, r0
 8008f14:	4b28      	ldr	r3, [pc, #160]	@ (8008fb8 <__lshift+0xd0>)
 8008f16:	4829      	ldr	r0, [pc, #164]	@ (8008fbc <__lshift+0xd4>)
 8008f18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f1c:	f001 fce0 	bl	800a8e0 <__assert_func>
 8008f20:	3101      	adds	r1, #1
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	e7ee      	b.n	8008f04 <__lshift+0x1c>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f100 0114 	add.w	r1, r0, #20
 8008f2c:	f100 0210 	add.w	r2, r0, #16
 8008f30:	4618      	mov	r0, r3
 8008f32:	4553      	cmp	r3, sl
 8008f34:	db33      	blt.n	8008f9e <__lshift+0xb6>
 8008f36:	6920      	ldr	r0, [r4, #16]
 8008f38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f3c:	f104 0314 	add.w	r3, r4, #20
 8008f40:	f019 091f 	ands.w	r9, r9, #31
 8008f44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f4c:	d02b      	beq.n	8008fa6 <__lshift+0xbe>
 8008f4e:	f1c9 0e20 	rsb	lr, r9, #32
 8008f52:	468a      	mov	sl, r1
 8008f54:	2200      	movs	r2, #0
 8008f56:	6818      	ldr	r0, [r3, #0]
 8008f58:	fa00 f009 	lsl.w	r0, r0, r9
 8008f5c:	4310      	orrs	r0, r2
 8008f5e:	f84a 0b04 	str.w	r0, [sl], #4
 8008f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f66:	459c      	cmp	ip, r3
 8008f68:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f6c:	d8f3      	bhi.n	8008f56 <__lshift+0x6e>
 8008f6e:	ebac 0304 	sub.w	r3, ip, r4
 8008f72:	3b15      	subs	r3, #21
 8008f74:	f023 0303 	bic.w	r3, r3, #3
 8008f78:	3304      	adds	r3, #4
 8008f7a:	f104 0015 	add.w	r0, r4, #21
 8008f7e:	4584      	cmp	ip, r0
 8008f80:	bf38      	it	cc
 8008f82:	2304      	movcc	r3, #4
 8008f84:	50ca      	str	r2, [r1, r3]
 8008f86:	b10a      	cbz	r2, 8008f8c <__lshift+0xa4>
 8008f88:	f108 0602 	add.w	r6, r8, #2
 8008f8c:	3e01      	subs	r6, #1
 8008f8e:	4638      	mov	r0, r7
 8008f90:	612e      	str	r6, [r5, #16]
 8008f92:	4621      	mov	r1, r4
 8008f94:	f7ff fd90 	bl	8008ab8 <_Bfree>
 8008f98:	4628      	mov	r0, r5
 8008f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	e7c5      	b.n	8008f32 <__lshift+0x4a>
 8008fa6:	3904      	subs	r1, #4
 8008fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fac:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fb0:	459c      	cmp	ip, r3
 8008fb2:	d8f9      	bhi.n	8008fa8 <__lshift+0xc0>
 8008fb4:	e7ea      	b.n	8008f8c <__lshift+0xa4>
 8008fb6:	bf00      	nop
 8008fb8:	0800b2dd 	.word	0x0800b2dd
 8008fbc:	0800b2ee 	.word	0x0800b2ee

08008fc0 <__mcmp>:
 8008fc0:	690a      	ldr	r2, [r1, #16]
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	6900      	ldr	r0, [r0, #16]
 8008fc6:	1a80      	subs	r0, r0, r2
 8008fc8:	b530      	push	{r4, r5, lr}
 8008fca:	d10e      	bne.n	8008fea <__mcmp+0x2a>
 8008fcc:	3314      	adds	r3, #20
 8008fce:	3114      	adds	r1, #20
 8008fd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fe0:	4295      	cmp	r5, r2
 8008fe2:	d003      	beq.n	8008fec <__mcmp+0x2c>
 8008fe4:	d205      	bcs.n	8008ff2 <__mcmp+0x32>
 8008fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fea:	bd30      	pop	{r4, r5, pc}
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d3f3      	bcc.n	8008fd8 <__mcmp+0x18>
 8008ff0:	e7fb      	b.n	8008fea <__mcmp+0x2a>
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	e7f9      	b.n	8008fea <__mcmp+0x2a>
	...

08008ff8 <__mdiff>:
 8008ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	4689      	mov	r9, r1
 8008ffe:	4606      	mov	r6, r0
 8009000:	4611      	mov	r1, r2
 8009002:	4648      	mov	r0, r9
 8009004:	4614      	mov	r4, r2
 8009006:	f7ff ffdb 	bl	8008fc0 <__mcmp>
 800900a:	1e05      	subs	r5, r0, #0
 800900c:	d112      	bne.n	8009034 <__mdiff+0x3c>
 800900e:	4629      	mov	r1, r5
 8009010:	4630      	mov	r0, r6
 8009012:	f7ff fd11 	bl	8008a38 <_Balloc>
 8009016:	4602      	mov	r2, r0
 8009018:	b928      	cbnz	r0, 8009026 <__mdiff+0x2e>
 800901a:	4b3f      	ldr	r3, [pc, #252]	@ (8009118 <__mdiff+0x120>)
 800901c:	f240 2137 	movw	r1, #567	@ 0x237
 8009020:	483e      	ldr	r0, [pc, #248]	@ (800911c <__mdiff+0x124>)
 8009022:	f001 fc5d 	bl	800a8e0 <__assert_func>
 8009026:	2301      	movs	r3, #1
 8009028:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800902c:	4610      	mov	r0, r2
 800902e:	b003      	add	sp, #12
 8009030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009034:	bfbc      	itt	lt
 8009036:	464b      	movlt	r3, r9
 8009038:	46a1      	movlt	r9, r4
 800903a:	4630      	mov	r0, r6
 800903c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009040:	bfba      	itte	lt
 8009042:	461c      	movlt	r4, r3
 8009044:	2501      	movlt	r5, #1
 8009046:	2500      	movge	r5, #0
 8009048:	f7ff fcf6 	bl	8008a38 <_Balloc>
 800904c:	4602      	mov	r2, r0
 800904e:	b918      	cbnz	r0, 8009058 <__mdiff+0x60>
 8009050:	4b31      	ldr	r3, [pc, #196]	@ (8009118 <__mdiff+0x120>)
 8009052:	f240 2145 	movw	r1, #581	@ 0x245
 8009056:	e7e3      	b.n	8009020 <__mdiff+0x28>
 8009058:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800905c:	6926      	ldr	r6, [r4, #16]
 800905e:	60c5      	str	r5, [r0, #12]
 8009060:	f109 0310 	add.w	r3, r9, #16
 8009064:	f109 0514 	add.w	r5, r9, #20
 8009068:	f104 0e14 	add.w	lr, r4, #20
 800906c:	f100 0b14 	add.w	fp, r0, #20
 8009070:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009074:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009078:	9301      	str	r3, [sp, #4]
 800907a:	46d9      	mov	r9, fp
 800907c:	f04f 0c00 	mov.w	ip, #0
 8009080:	9b01      	ldr	r3, [sp, #4]
 8009082:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009086:	f853 af04 	ldr.w	sl, [r3, #4]!
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	fa1f f38a 	uxth.w	r3, sl
 8009090:	4619      	mov	r1, r3
 8009092:	b283      	uxth	r3, r0
 8009094:	1acb      	subs	r3, r1, r3
 8009096:	0c00      	lsrs	r0, r0, #16
 8009098:	4463      	add	r3, ip
 800909a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800909e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80090a8:	4576      	cmp	r6, lr
 80090aa:	f849 3b04 	str.w	r3, [r9], #4
 80090ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090b2:	d8e5      	bhi.n	8009080 <__mdiff+0x88>
 80090b4:	1b33      	subs	r3, r6, r4
 80090b6:	3b15      	subs	r3, #21
 80090b8:	f023 0303 	bic.w	r3, r3, #3
 80090bc:	3415      	adds	r4, #21
 80090be:	3304      	adds	r3, #4
 80090c0:	42a6      	cmp	r6, r4
 80090c2:	bf38      	it	cc
 80090c4:	2304      	movcc	r3, #4
 80090c6:	441d      	add	r5, r3
 80090c8:	445b      	add	r3, fp
 80090ca:	461e      	mov	r6, r3
 80090cc:	462c      	mov	r4, r5
 80090ce:	4544      	cmp	r4, r8
 80090d0:	d30e      	bcc.n	80090f0 <__mdiff+0xf8>
 80090d2:	f108 0103 	add.w	r1, r8, #3
 80090d6:	1b49      	subs	r1, r1, r5
 80090d8:	f021 0103 	bic.w	r1, r1, #3
 80090dc:	3d03      	subs	r5, #3
 80090de:	45a8      	cmp	r8, r5
 80090e0:	bf38      	it	cc
 80090e2:	2100      	movcc	r1, #0
 80090e4:	440b      	add	r3, r1
 80090e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090ea:	b191      	cbz	r1, 8009112 <__mdiff+0x11a>
 80090ec:	6117      	str	r7, [r2, #16]
 80090ee:	e79d      	b.n	800902c <__mdiff+0x34>
 80090f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80090f4:	46e6      	mov	lr, ip
 80090f6:	0c08      	lsrs	r0, r1, #16
 80090f8:	fa1c fc81 	uxtah	ip, ip, r1
 80090fc:	4471      	add	r1, lr
 80090fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009102:	b289      	uxth	r1, r1
 8009104:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009108:	f846 1b04 	str.w	r1, [r6], #4
 800910c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009110:	e7dd      	b.n	80090ce <__mdiff+0xd6>
 8009112:	3f01      	subs	r7, #1
 8009114:	e7e7      	b.n	80090e6 <__mdiff+0xee>
 8009116:	bf00      	nop
 8009118:	0800b2dd 	.word	0x0800b2dd
 800911c:	0800b2ee 	.word	0x0800b2ee

08009120 <__ulp>:
 8009120:	b082      	sub	sp, #8
 8009122:	ed8d 0b00 	vstr	d0, [sp]
 8009126:	9a01      	ldr	r2, [sp, #4]
 8009128:	4b0f      	ldr	r3, [pc, #60]	@ (8009168 <__ulp+0x48>)
 800912a:	4013      	ands	r3, r2
 800912c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009130:	2b00      	cmp	r3, #0
 8009132:	dc08      	bgt.n	8009146 <__ulp+0x26>
 8009134:	425b      	negs	r3, r3
 8009136:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800913a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800913e:	da04      	bge.n	800914a <__ulp+0x2a>
 8009140:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009144:	4113      	asrs	r3, r2
 8009146:	2200      	movs	r2, #0
 8009148:	e008      	b.n	800915c <__ulp+0x3c>
 800914a:	f1a2 0314 	sub.w	r3, r2, #20
 800914e:	2b1e      	cmp	r3, #30
 8009150:	bfda      	itte	le
 8009152:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009156:	40da      	lsrle	r2, r3
 8009158:	2201      	movgt	r2, #1
 800915a:	2300      	movs	r3, #0
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	ec41 0b10 	vmov	d0, r0, r1
 8009164:	b002      	add	sp, #8
 8009166:	4770      	bx	lr
 8009168:	7ff00000 	.word	0x7ff00000

0800916c <__b2d>:
 800916c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009170:	6906      	ldr	r6, [r0, #16]
 8009172:	f100 0814 	add.w	r8, r0, #20
 8009176:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800917a:	1f37      	subs	r7, r6, #4
 800917c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009180:	4610      	mov	r0, r2
 8009182:	f7ff fd4b 	bl	8008c1c <__hi0bits>
 8009186:	f1c0 0320 	rsb	r3, r0, #32
 800918a:	280a      	cmp	r0, #10
 800918c:	600b      	str	r3, [r1, #0]
 800918e:	491b      	ldr	r1, [pc, #108]	@ (80091fc <__b2d+0x90>)
 8009190:	dc15      	bgt.n	80091be <__b2d+0x52>
 8009192:	f1c0 0c0b 	rsb	ip, r0, #11
 8009196:	fa22 f30c 	lsr.w	r3, r2, ip
 800919a:	45b8      	cmp	r8, r7
 800919c:	ea43 0501 	orr.w	r5, r3, r1
 80091a0:	bf34      	ite	cc
 80091a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80091a6:	2300      	movcs	r3, #0
 80091a8:	3015      	adds	r0, #21
 80091aa:	fa02 f000 	lsl.w	r0, r2, r0
 80091ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80091b2:	4303      	orrs	r3, r0
 80091b4:	461c      	mov	r4, r3
 80091b6:	ec45 4b10 	vmov	d0, r4, r5
 80091ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091be:	45b8      	cmp	r8, r7
 80091c0:	bf3a      	itte	cc
 80091c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80091c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80091ca:	2300      	movcs	r3, #0
 80091cc:	380b      	subs	r0, #11
 80091ce:	d012      	beq.n	80091f6 <__b2d+0x8a>
 80091d0:	f1c0 0120 	rsb	r1, r0, #32
 80091d4:	fa23 f401 	lsr.w	r4, r3, r1
 80091d8:	4082      	lsls	r2, r0
 80091da:	4322      	orrs	r2, r4
 80091dc:	4547      	cmp	r7, r8
 80091de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80091e2:	bf8c      	ite	hi
 80091e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80091e8:	2200      	movls	r2, #0
 80091ea:	4083      	lsls	r3, r0
 80091ec:	40ca      	lsrs	r2, r1
 80091ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80091f2:	4313      	orrs	r3, r2
 80091f4:	e7de      	b.n	80091b4 <__b2d+0x48>
 80091f6:	ea42 0501 	orr.w	r5, r2, r1
 80091fa:	e7db      	b.n	80091b4 <__b2d+0x48>
 80091fc:	3ff00000 	.word	0x3ff00000

08009200 <__d2b>:
 8009200:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009204:	460f      	mov	r7, r1
 8009206:	2101      	movs	r1, #1
 8009208:	ec59 8b10 	vmov	r8, r9, d0
 800920c:	4616      	mov	r6, r2
 800920e:	f7ff fc13 	bl	8008a38 <_Balloc>
 8009212:	4604      	mov	r4, r0
 8009214:	b930      	cbnz	r0, 8009224 <__d2b+0x24>
 8009216:	4602      	mov	r2, r0
 8009218:	4b23      	ldr	r3, [pc, #140]	@ (80092a8 <__d2b+0xa8>)
 800921a:	4824      	ldr	r0, [pc, #144]	@ (80092ac <__d2b+0xac>)
 800921c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009220:	f001 fb5e 	bl	800a8e0 <__assert_func>
 8009224:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009228:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800922c:	b10d      	cbz	r5, 8009232 <__d2b+0x32>
 800922e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	f1b8 0300 	subs.w	r3, r8, #0
 8009238:	d023      	beq.n	8009282 <__d2b+0x82>
 800923a:	4668      	mov	r0, sp
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	f7ff fd0c 	bl	8008c5a <__lo0bits>
 8009242:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009246:	b1d0      	cbz	r0, 800927e <__d2b+0x7e>
 8009248:	f1c0 0320 	rsb	r3, r0, #32
 800924c:	fa02 f303 	lsl.w	r3, r2, r3
 8009250:	430b      	orrs	r3, r1
 8009252:	40c2      	lsrs	r2, r0
 8009254:	6163      	str	r3, [r4, #20]
 8009256:	9201      	str	r2, [sp, #4]
 8009258:	9b01      	ldr	r3, [sp, #4]
 800925a:	61a3      	str	r3, [r4, #24]
 800925c:	2b00      	cmp	r3, #0
 800925e:	bf0c      	ite	eq
 8009260:	2201      	moveq	r2, #1
 8009262:	2202      	movne	r2, #2
 8009264:	6122      	str	r2, [r4, #16]
 8009266:	b1a5      	cbz	r5, 8009292 <__d2b+0x92>
 8009268:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800926c:	4405      	add	r5, r0
 800926e:	603d      	str	r5, [r7, #0]
 8009270:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009274:	6030      	str	r0, [r6, #0]
 8009276:	4620      	mov	r0, r4
 8009278:	b003      	add	sp, #12
 800927a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800927e:	6161      	str	r1, [r4, #20]
 8009280:	e7ea      	b.n	8009258 <__d2b+0x58>
 8009282:	a801      	add	r0, sp, #4
 8009284:	f7ff fce9 	bl	8008c5a <__lo0bits>
 8009288:	9b01      	ldr	r3, [sp, #4]
 800928a:	6163      	str	r3, [r4, #20]
 800928c:	3020      	adds	r0, #32
 800928e:	2201      	movs	r2, #1
 8009290:	e7e8      	b.n	8009264 <__d2b+0x64>
 8009292:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009296:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800929a:	6038      	str	r0, [r7, #0]
 800929c:	6918      	ldr	r0, [r3, #16]
 800929e:	f7ff fcbd 	bl	8008c1c <__hi0bits>
 80092a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092a6:	e7e5      	b.n	8009274 <__d2b+0x74>
 80092a8:	0800b2dd 	.word	0x0800b2dd
 80092ac:	0800b2ee 	.word	0x0800b2ee

080092b0 <__ratio>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	b085      	sub	sp, #20
 80092b6:	e9cd 1000 	strd	r1, r0, [sp]
 80092ba:	a902      	add	r1, sp, #8
 80092bc:	f7ff ff56 	bl	800916c <__b2d>
 80092c0:	9800      	ldr	r0, [sp, #0]
 80092c2:	a903      	add	r1, sp, #12
 80092c4:	ec55 4b10 	vmov	r4, r5, d0
 80092c8:	f7ff ff50 	bl	800916c <__b2d>
 80092cc:	9b01      	ldr	r3, [sp, #4]
 80092ce:	6919      	ldr	r1, [r3, #16]
 80092d0:	9b00      	ldr	r3, [sp, #0]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	1ac9      	subs	r1, r1, r3
 80092d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80092da:	1a9b      	subs	r3, r3, r2
 80092dc:	ec5b ab10 	vmov	sl, fp, d0
 80092e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	bfce      	itee	gt
 80092e8:	462a      	movgt	r2, r5
 80092ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092ee:	465a      	movle	r2, fp
 80092f0:	462f      	mov	r7, r5
 80092f2:	46d9      	mov	r9, fp
 80092f4:	bfcc      	ite	gt
 80092f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80092fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80092fe:	464b      	mov	r3, r9
 8009300:	4652      	mov	r2, sl
 8009302:	4620      	mov	r0, r4
 8009304:	4639      	mov	r1, r7
 8009306:	f7f7 fac1 	bl	800088c <__aeabi_ddiv>
 800930a:	ec41 0b10 	vmov	d0, r0, r1
 800930e:	b005      	add	sp, #20
 8009310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009314 <__copybits>:
 8009314:	3901      	subs	r1, #1
 8009316:	b570      	push	{r4, r5, r6, lr}
 8009318:	1149      	asrs	r1, r1, #5
 800931a:	6914      	ldr	r4, [r2, #16]
 800931c:	3101      	adds	r1, #1
 800931e:	f102 0314 	add.w	r3, r2, #20
 8009322:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009326:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800932a:	1f05      	subs	r5, r0, #4
 800932c:	42a3      	cmp	r3, r4
 800932e:	d30c      	bcc.n	800934a <__copybits+0x36>
 8009330:	1aa3      	subs	r3, r4, r2
 8009332:	3b11      	subs	r3, #17
 8009334:	f023 0303 	bic.w	r3, r3, #3
 8009338:	3211      	adds	r2, #17
 800933a:	42a2      	cmp	r2, r4
 800933c:	bf88      	it	hi
 800933e:	2300      	movhi	r3, #0
 8009340:	4418      	add	r0, r3
 8009342:	2300      	movs	r3, #0
 8009344:	4288      	cmp	r0, r1
 8009346:	d305      	bcc.n	8009354 <__copybits+0x40>
 8009348:	bd70      	pop	{r4, r5, r6, pc}
 800934a:	f853 6b04 	ldr.w	r6, [r3], #4
 800934e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009352:	e7eb      	b.n	800932c <__copybits+0x18>
 8009354:	f840 3b04 	str.w	r3, [r0], #4
 8009358:	e7f4      	b.n	8009344 <__copybits+0x30>

0800935a <__any_on>:
 800935a:	f100 0214 	add.w	r2, r0, #20
 800935e:	6900      	ldr	r0, [r0, #16]
 8009360:	114b      	asrs	r3, r1, #5
 8009362:	4298      	cmp	r0, r3
 8009364:	b510      	push	{r4, lr}
 8009366:	db11      	blt.n	800938c <__any_on+0x32>
 8009368:	dd0a      	ble.n	8009380 <__any_on+0x26>
 800936a:	f011 011f 	ands.w	r1, r1, #31
 800936e:	d007      	beq.n	8009380 <__any_on+0x26>
 8009370:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009374:	fa24 f001 	lsr.w	r0, r4, r1
 8009378:	fa00 f101 	lsl.w	r1, r0, r1
 800937c:	428c      	cmp	r4, r1
 800937e:	d10b      	bne.n	8009398 <__any_on+0x3e>
 8009380:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009384:	4293      	cmp	r3, r2
 8009386:	d803      	bhi.n	8009390 <__any_on+0x36>
 8009388:	2000      	movs	r0, #0
 800938a:	bd10      	pop	{r4, pc}
 800938c:	4603      	mov	r3, r0
 800938e:	e7f7      	b.n	8009380 <__any_on+0x26>
 8009390:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009394:	2900      	cmp	r1, #0
 8009396:	d0f5      	beq.n	8009384 <__any_on+0x2a>
 8009398:	2001      	movs	r0, #1
 800939a:	e7f6      	b.n	800938a <__any_on+0x30>

0800939c <sulp>:
 800939c:	b570      	push	{r4, r5, r6, lr}
 800939e:	4604      	mov	r4, r0
 80093a0:	460d      	mov	r5, r1
 80093a2:	ec45 4b10 	vmov	d0, r4, r5
 80093a6:	4616      	mov	r6, r2
 80093a8:	f7ff feba 	bl	8009120 <__ulp>
 80093ac:	ec51 0b10 	vmov	r0, r1, d0
 80093b0:	b17e      	cbz	r6, 80093d2 <sulp+0x36>
 80093b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80093b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	dd09      	ble.n	80093d2 <sulp+0x36>
 80093be:	051b      	lsls	r3, r3, #20
 80093c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80093c4:	2400      	movs	r4, #0
 80093c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80093ca:	4622      	mov	r2, r4
 80093cc:	462b      	mov	r3, r5
 80093ce:	f7f7 f933 	bl	8000638 <__aeabi_dmul>
 80093d2:	ec41 0b10 	vmov	d0, r0, r1
 80093d6:	bd70      	pop	{r4, r5, r6, pc}

080093d8 <_strtod_l>:
 80093d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	b09f      	sub	sp, #124	@ 0x7c
 80093de:	460c      	mov	r4, r1
 80093e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80093e2:	2200      	movs	r2, #0
 80093e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80093e6:	9005      	str	r0, [sp, #20]
 80093e8:	f04f 0a00 	mov.w	sl, #0
 80093ec:	f04f 0b00 	mov.w	fp, #0
 80093f0:	460a      	mov	r2, r1
 80093f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80093f4:	7811      	ldrb	r1, [r2, #0]
 80093f6:	292b      	cmp	r1, #43	@ 0x2b
 80093f8:	d04a      	beq.n	8009490 <_strtod_l+0xb8>
 80093fa:	d838      	bhi.n	800946e <_strtod_l+0x96>
 80093fc:	290d      	cmp	r1, #13
 80093fe:	d832      	bhi.n	8009466 <_strtod_l+0x8e>
 8009400:	2908      	cmp	r1, #8
 8009402:	d832      	bhi.n	800946a <_strtod_l+0x92>
 8009404:	2900      	cmp	r1, #0
 8009406:	d03b      	beq.n	8009480 <_strtod_l+0xa8>
 8009408:	2200      	movs	r2, #0
 800940a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800940c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800940e:	782a      	ldrb	r2, [r5, #0]
 8009410:	2a30      	cmp	r2, #48	@ 0x30
 8009412:	f040 80b3 	bne.w	800957c <_strtod_l+0x1a4>
 8009416:	786a      	ldrb	r2, [r5, #1]
 8009418:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800941c:	2a58      	cmp	r2, #88	@ 0x58
 800941e:	d16e      	bne.n	80094fe <_strtod_l+0x126>
 8009420:	9302      	str	r3, [sp, #8]
 8009422:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	ab1a      	add	r3, sp, #104	@ 0x68
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	4a8e      	ldr	r2, [pc, #568]	@ (8009664 <_strtod_l+0x28c>)
 800942c:	9805      	ldr	r0, [sp, #20]
 800942e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009430:	a919      	add	r1, sp, #100	@ 0x64
 8009432:	f001 faef 	bl	800aa14 <__gethex>
 8009436:	f010 060f 	ands.w	r6, r0, #15
 800943a:	4604      	mov	r4, r0
 800943c:	d005      	beq.n	800944a <_strtod_l+0x72>
 800943e:	2e06      	cmp	r6, #6
 8009440:	d128      	bne.n	8009494 <_strtod_l+0xbc>
 8009442:	3501      	adds	r5, #1
 8009444:	2300      	movs	r3, #0
 8009446:	9519      	str	r5, [sp, #100]	@ 0x64
 8009448:	930b      	str	r3, [sp, #44]	@ 0x2c
 800944a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800944c:	2b00      	cmp	r3, #0
 800944e:	f040 858e 	bne.w	8009f6e <_strtod_l+0xb96>
 8009452:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009454:	b1cb      	cbz	r3, 800948a <_strtod_l+0xb2>
 8009456:	4652      	mov	r2, sl
 8009458:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800945c:	ec43 2b10 	vmov	d0, r2, r3
 8009460:	b01f      	add	sp, #124	@ 0x7c
 8009462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009466:	2920      	cmp	r1, #32
 8009468:	d1ce      	bne.n	8009408 <_strtod_l+0x30>
 800946a:	3201      	adds	r2, #1
 800946c:	e7c1      	b.n	80093f2 <_strtod_l+0x1a>
 800946e:	292d      	cmp	r1, #45	@ 0x2d
 8009470:	d1ca      	bne.n	8009408 <_strtod_l+0x30>
 8009472:	2101      	movs	r1, #1
 8009474:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009476:	1c51      	adds	r1, r2, #1
 8009478:	9119      	str	r1, [sp, #100]	@ 0x64
 800947a:	7852      	ldrb	r2, [r2, #1]
 800947c:	2a00      	cmp	r2, #0
 800947e:	d1c5      	bne.n	800940c <_strtod_l+0x34>
 8009480:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009482:	9419      	str	r4, [sp, #100]	@ 0x64
 8009484:	2b00      	cmp	r3, #0
 8009486:	f040 8570 	bne.w	8009f6a <_strtod_l+0xb92>
 800948a:	4652      	mov	r2, sl
 800948c:	465b      	mov	r3, fp
 800948e:	e7e5      	b.n	800945c <_strtod_l+0x84>
 8009490:	2100      	movs	r1, #0
 8009492:	e7ef      	b.n	8009474 <_strtod_l+0x9c>
 8009494:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009496:	b13a      	cbz	r2, 80094a8 <_strtod_l+0xd0>
 8009498:	2135      	movs	r1, #53	@ 0x35
 800949a:	a81c      	add	r0, sp, #112	@ 0x70
 800949c:	f7ff ff3a 	bl	8009314 <__copybits>
 80094a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094a2:	9805      	ldr	r0, [sp, #20]
 80094a4:	f7ff fb08 	bl	8008ab8 <_Bfree>
 80094a8:	3e01      	subs	r6, #1
 80094aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80094ac:	2e04      	cmp	r6, #4
 80094ae:	d806      	bhi.n	80094be <_strtod_l+0xe6>
 80094b0:	e8df f006 	tbb	[pc, r6]
 80094b4:	201d0314 	.word	0x201d0314
 80094b8:	14          	.byte	0x14
 80094b9:	00          	.byte	0x00
 80094ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80094be:	05e1      	lsls	r1, r4, #23
 80094c0:	bf48      	it	mi
 80094c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80094c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094ca:	0d1b      	lsrs	r3, r3, #20
 80094cc:	051b      	lsls	r3, r3, #20
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1bb      	bne.n	800944a <_strtod_l+0x72>
 80094d2:	f7fe fb2f 	bl	8007b34 <__errno>
 80094d6:	2322      	movs	r3, #34	@ 0x22
 80094d8:	6003      	str	r3, [r0, #0]
 80094da:	e7b6      	b.n	800944a <_strtod_l+0x72>
 80094dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80094e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80094e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80094e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80094ec:	e7e7      	b.n	80094be <_strtod_l+0xe6>
 80094ee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800966c <_strtod_l+0x294>
 80094f2:	e7e4      	b.n	80094be <_strtod_l+0xe6>
 80094f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80094f8:	f04f 3aff 	mov.w	sl, #4294967295
 80094fc:	e7df      	b.n	80094be <_strtod_l+0xe6>
 80094fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	9219      	str	r2, [sp, #100]	@ 0x64
 8009504:	785b      	ldrb	r3, [r3, #1]
 8009506:	2b30      	cmp	r3, #48	@ 0x30
 8009508:	d0f9      	beq.n	80094fe <_strtod_l+0x126>
 800950a:	2b00      	cmp	r3, #0
 800950c:	d09d      	beq.n	800944a <_strtod_l+0x72>
 800950e:	2301      	movs	r3, #1
 8009510:	9309      	str	r3, [sp, #36]	@ 0x24
 8009512:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009514:	930c      	str	r3, [sp, #48]	@ 0x30
 8009516:	2300      	movs	r3, #0
 8009518:	9308      	str	r3, [sp, #32]
 800951a:	930a      	str	r3, [sp, #40]	@ 0x28
 800951c:	461f      	mov	r7, r3
 800951e:	220a      	movs	r2, #10
 8009520:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009522:	7805      	ldrb	r5, [r0, #0]
 8009524:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009528:	b2d9      	uxtb	r1, r3
 800952a:	2909      	cmp	r1, #9
 800952c:	d928      	bls.n	8009580 <_strtod_l+0x1a8>
 800952e:	494e      	ldr	r1, [pc, #312]	@ (8009668 <_strtod_l+0x290>)
 8009530:	2201      	movs	r2, #1
 8009532:	f001 f979 	bl	800a828 <strncmp>
 8009536:	2800      	cmp	r0, #0
 8009538:	d032      	beq.n	80095a0 <_strtod_l+0x1c8>
 800953a:	2000      	movs	r0, #0
 800953c:	462a      	mov	r2, r5
 800953e:	4681      	mov	r9, r0
 8009540:	463d      	mov	r5, r7
 8009542:	4603      	mov	r3, r0
 8009544:	2a65      	cmp	r2, #101	@ 0x65
 8009546:	d001      	beq.n	800954c <_strtod_l+0x174>
 8009548:	2a45      	cmp	r2, #69	@ 0x45
 800954a:	d114      	bne.n	8009576 <_strtod_l+0x19e>
 800954c:	b91d      	cbnz	r5, 8009556 <_strtod_l+0x17e>
 800954e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009550:	4302      	orrs	r2, r0
 8009552:	d095      	beq.n	8009480 <_strtod_l+0xa8>
 8009554:	2500      	movs	r5, #0
 8009556:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009558:	1c62      	adds	r2, r4, #1
 800955a:	9219      	str	r2, [sp, #100]	@ 0x64
 800955c:	7862      	ldrb	r2, [r4, #1]
 800955e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009560:	d077      	beq.n	8009652 <_strtod_l+0x27a>
 8009562:	2a2d      	cmp	r2, #45	@ 0x2d
 8009564:	d07b      	beq.n	800965e <_strtod_l+0x286>
 8009566:	f04f 0c00 	mov.w	ip, #0
 800956a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800956e:	2909      	cmp	r1, #9
 8009570:	f240 8082 	bls.w	8009678 <_strtod_l+0x2a0>
 8009574:	9419      	str	r4, [sp, #100]	@ 0x64
 8009576:	f04f 0800 	mov.w	r8, #0
 800957a:	e0a2      	b.n	80096c2 <_strtod_l+0x2ea>
 800957c:	2300      	movs	r3, #0
 800957e:	e7c7      	b.n	8009510 <_strtod_l+0x138>
 8009580:	2f08      	cmp	r7, #8
 8009582:	bfd5      	itete	le
 8009584:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009586:	9908      	ldrgt	r1, [sp, #32]
 8009588:	fb02 3301 	mlale	r3, r2, r1, r3
 800958c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009590:	f100 0001 	add.w	r0, r0, #1
 8009594:	bfd4      	ite	le
 8009596:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009598:	9308      	strgt	r3, [sp, #32]
 800959a:	3701      	adds	r7, #1
 800959c:	9019      	str	r0, [sp, #100]	@ 0x64
 800959e:	e7bf      	b.n	8009520 <_strtod_l+0x148>
 80095a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095a2:	1c5a      	adds	r2, r3, #1
 80095a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80095a6:	785a      	ldrb	r2, [r3, #1]
 80095a8:	b37f      	cbz	r7, 800960a <_strtod_l+0x232>
 80095aa:	4681      	mov	r9, r0
 80095ac:	463d      	mov	r5, r7
 80095ae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80095b2:	2b09      	cmp	r3, #9
 80095b4:	d912      	bls.n	80095dc <_strtod_l+0x204>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e7c4      	b.n	8009544 <_strtod_l+0x16c>
 80095ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	9219      	str	r2, [sp, #100]	@ 0x64
 80095c0:	785a      	ldrb	r2, [r3, #1]
 80095c2:	3001      	adds	r0, #1
 80095c4:	2a30      	cmp	r2, #48	@ 0x30
 80095c6:	d0f8      	beq.n	80095ba <_strtod_l+0x1e2>
 80095c8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80095cc:	2b08      	cmp	r3, #8
 80095ce:	f200 84d3 	bhi.w	8009f78 <_strtod_l+0xba0>
 80095d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80095d6:	4681      	mov	r9, r0
 80095d8:	2000      	movs	r0, #0
 80095da:	4605      	mov	r5, r0
 80095dc:	3a30      	subs	r2, #48	@ 0x30
 80095de:	f100 0301 	add.w	r3, r0, #1
 80095e2:	d02a      	beq.n	800963a <_strtod_l+0x262>
 80095e4:	4499      	add	r9, r3
 80095e6:	eb00 0c05 	add.w	ip, r0, r5
 80095ea:	462b      	mov	r3, r5
 80095ec:	210a      	movs	r1, #10
 80095ee:	4563      	cmp	r3, ip
 80095f0:	d10d      	bne.n	800960e <_strtod_l+0x236>
 80095f2:	1c69      	adds	r1, r5, #1
 80095f4:	4401      	add	r1, r0
 80095f6:	4428      	add	r0, r5
 80095f8:	2808      	cmp	r0, #8
 80095fa:	dc16      	bgt.n	800962a <_strtod_l+0x252>
 80095fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095fe:	230a      	movs	r3, #10
 8009600:	fb03 2300 	mla	r3, r3, r0, r2
 8009604:	930a      	str	r3, [sp, #40]	@ 0x28
 8009606:	2300      	movs	r3, #0
 8009608:	e018      	b.n	800963c <_strtod_l+0x264>
 800960a:	4638      	mov	r0, r7
 800960c:	e7da      	b.n	80095c4 <_strtod_l+0x1ec>
 800960e:	2b08      	cmp	r3, #8
 8009610:	f103 0301 	add.w	r3, r3, #1
 8009614:	dc03      	bgt.n	800961e <_strtod_l+0x246>
 8009616:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009618:	434e      	muls	r6, r1
 800961a:	960a      	str	r6, [sp, #40]	@ 0x28
 800961c:	e7e7      	b.n	80095ee <_strtod_l+0x216>
 800961e:	2b10      	cmp	r3, #16
 8009620:	bfde      	ittt	le
 8009622:	9e08      	ldrle	r6, [sp, #32]
 8009624:	434e      	mulle	r6, r1
 8009626:	9608      	strle	r6, [sp, #32]
 8009628:	e7e1      	b.n	80095ee <_strtod_l+0x216>
 800962a:	280f      	cmp	r0, #15
 800962c:	dceb      	bgt.n	8009606 <_strtod_l+0x22e>
 800962e:	9808      	ldr	r0, [sp, #32]
 8009630:	230a      	movs	r3, #10
 8009632:	fb03 2300 	mla	r3, r3, r0, r2
 8009636:	9308      	str	r3, [sp, #32]
 8009638:	e7e5      	b.n	8009606 <_strtod_l+0x22e>
 800963a:	4629      	mov	r1, r5
 800963c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800963e:	1c50      	adds	r0, r2, #1
 8009640:	9019      	str	r0, [sp, #100]	@ 0x64
 8009642:	7852      	ldrb	r2, [r2, #1]
 8009644:	4618      	mov	r0, r3
 8009646:	460d      	mov	r5, r1
 8009648:	e7b1      	b.n	80095ae <_strtod_l+0x1d6>
 800964a:	f04f 0900 	mov.w	r9, #0
 800964e:	2301      	movs	r3, #1
 8009650:	e77d      	b.n	800954e <_strtod_l+0x176>
 8009652:	f04f 0c00 	mov.w	ip, #0
 8009656:	1ca2      	adds	r2, r4, #2
 8009658:	9219      	str	r2, [sp, #100]	@ 0x64
 800965a:	78a2      	ldrb	r2, [r4, #2]
 800965c:	e785      	b.n	800956a <_strtod_l+0x192>
 800965e:	f04f 0c01 	mov.w	ip, #1
 8009662:	e7f8      	b.n	8009656 <_strtod_l+0x27e>
 8009664:	0800b460 	.word	0x0800b460
 8009668:	0800b448 	.word	0x0800b448
 800966c:	7ff00000 	.word	0x7ff00000
 8009670:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009672:	1c51      	adds	r1, r2, #1
 8009674:	9119      	str	r1, [sp, #100]	@ 0x64
 8009676:	7852      	ldrb	r2, [r2, #1]
 8009678:	2a30      	cmp	r2, #48	@ 0x30
 800967a:	d0f9      	beq.n	8009670 <_strtod_l+0x298>
 800967c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009680:	2908      	cmp	r1, #8
 8009682:	f63f af78 	bhi.w	8009576 <_strtod_l+0x19e>
 8009686:	3a30      	subs	r2, #48	@ 0x30
 8009688:	920e      	str	r2, [sp, #56]	@ 0x38
 800968a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800968c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800968e:	f04f 080a 	mov.w	r8, #10
 8009692:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009694:	1c56      	adds	r6, r2, #1
 8009696:	9619      	str	r6, [sp, #100]	@ 0x64
 8009698:	7852      	ldrb	r2, [r2, #1]
 800969a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800969e:	f1be 0f09 	cmp.w	lr, #9
 80096a2:	d939      	bls.n	8009718 <_strtod_l+0x340>
 80096a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80096a6:	1a76      	subs	r6, r6, r1
 80096a8:	2e08      	cmp	r6, #8
 80096aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80096ae:	dc03      	bgt.n	80096b8 <_strtod_l+0x2e0>
 80096b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80096b2:	4588      	cmp	r8, r1
 80096b4:	bfa8      	it	ge
 80096b6:	4688      	movge	r8, r1
 80096b8:	f1bc 0f00 	cmp.w	ip, #0
 80096bc:	d001      	beq.n	80096c2 <_strtod_l+0x2ea>
 80096be:	f1c8 0800 	rsb	r8, r8, #0
 80096c2:	2d00      	cmp	r5, #0
 80096c4:	d14e      	bne.n	8009764 <_strtod_l+0x38c>
 80096c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096c8:	4308      	orrs	r0, r1
 80096ca:	f47f aebe 	bne.w	800944a <_strtod_l+0x72>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f47f aed6 	bne.w	8009480 <_strtod_l+0xa8>
 80096d4:	2a69      	cmp	r2, #105	@ 0x69
 80096d6:	d028      	beq.n	800972a <_strtod_l+0x352>
 80096d8:	dc25      	bgt.n	8009726 <_strtod_l+0x34e>
 80096da:	2a49      	cmp	r2, #73	@ 0x49
 80096dc:	d025      	beq.n	800972a <_strtod_l+0x352>
 80096de:	2a4e      	cmp	r2, #78	@ 0x4e
 80096e0:	f47f aece 	bne.w	8009480 <_strtod_l+0xa8>
 80096e4:	499b      	ldr	r1, [pc, #620]	@ (8009954 <_strtod_l+0x57c>)
 80096e6:	a819      	add	r0, sp, #100	@ 0x64
 80096e8:	f001 fbb6 	bl	800ae58 <__match>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	f43f aec7 	beq.w	8009480 <_strtod_l+0xa8>
 80096f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	2b28      	cmp	r3, #40	@ 0x28
 80096f8:	d12e      	bne.n	8009758 <_strtod_l+0x380>
 80096fa:	4997      	ldr	r1, [pc, #604]	@ (8009958 <_strtod_l+0x580>)
 80096fc:	aa1c      	add	r2, sp, #112	@ 0x70
 80096fe:	a819      	add	r0, sp, #100	@ 0x64
 8009700:	f001 fbbe 	bl	800ae80 <__hexnan>
 8009704:	2805      	cmp	r0, #5
 8009706:	d127      	bne.n	8009758 <_strtod_l+0x380>
 8009708:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800970a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800970e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009712:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009716:	e698      	b.n	800944a <_strtod_l+0x72>
 8009718:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800971a:	fb08 2101 	mla	r1, r8, r1, r2
 800971e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009722:	920e      	str	r2, [sp, #56]	@ 0x38
 8009724:	e7b5      	b.n	8009692 <_strtod_l+0x2ba>
 8009726:	2a6e      	cmp	r2, #110	@ 0x6e
 8009728:	e7da      	b.n	80096e0 <_strtod_l+0x308>
 800972a:	498c      	ldr	r1, [pc, #560]	@ (800995c <_strtod_l+0x584>)
 800972c:	a819      	add	r0, sp, #100	@ 0x64
 800972e:	f001 fb93 	bl	800ae58 <__match>
 8009732:	2800      	cmp	r0, #0
 8009734:	f43f aea4 	beq.w	8009480 <_strtod_l+0xa8>
 8009738:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800973a:	4989      	ldr	r1, [pc, #548]	@ (8009960 <_strtod_l+0x588>)
 800973c:	3b01      	subs	r3, #1
 800973e:	a819      	add	r0, sp, #100	@ 0x64
 8009740:	9319      	str	r3, [sp, #100]	@ 0x64
 8009742:	f001 fb89 	bl	800ae58 <__match>
 8009746:	b910      	cbnz	r0, 800974e <_strtod_l+0x376>
 8009748:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800974a:	3301      	adds	r3, #1
 800974c:	9319      	str	r3, [sp, #100]	@ 0x64
 800974e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009970 <_strtod_l+0x598>
 8009752:	f04f 0a00 	mov.w	sl, #0
 8009756:	e678      	b.n	800944a <_strtod_l+0x72>
 8009758:	4882      	ldr	r0, [pc, #520]	@ (8009964 <_strtod_l+0x58c>)
 800975a:	f001 f8b9 	bl	800a8d0 <nan>
 800975e:	ec5b ab10 	vmov	sl, fp, d0
 8009762:	e672      	b.n	800944a <_strtod_l+0x72>
 8009764:	eba8 0309 	sub.w	r3, r8, r9
 8009768:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800976a:	9309      	str	r3, [sp, #36]	@ 0x24
 800976c:	2f00      	cmp	r7, #0
 800976e:	bf08      	it	eq
 8009770:	462f      	moveq	r7, r5
 8009772:	2d10      	cmp	r5, #16
 8009774:	462c      	mov	r4, r5
 8009776:	bfa8      	it	ge
 8009778:	2410      	movge	r4, #16
 800977a:	f7f6 fee3 	bl	8000544 <__aeabi_ui2d>
 800977e:	2d09      	cmp	r5, #9
 8009780:	4682      	mov	sl, r0
 8009782:	468b      	mov	fp, r1
 8009784:	dc13      	bgt.n	80097ae <_strtod_l+0x3d6>
 8009786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009788:	2b00      	cmp	r3, #0
 800978a:	f43f ae5e 	beq.w	800944a <_strtod_l+0x72>
 800978e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009790:	dd78      	ble.n	8009884 <_strtod_l+0x4ac>
 8009792:	2b16      	cmp	r3, #22
 8009794:	dc5f      	bgt.n	8009856 <_strtod_l+0x47e>
 8009796:	4974      	ldr	r1, [pc, #464]	@ (8009968 <_strtod_l+0x590>)
 8009798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800979c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a0:	4652      	mov	r2, sl
 80097a2:	465b      	mov	r3, fp
 80097a4:	f7f6 ff48 	bl	8000638 <__aeabi_dmul>
 80097a8:	4682      	mov	sl, r0
 80097aa:	468b      	mov	fp, r1
 80097ac:	e64d      	b.n	800944a <_strtod_l+0x72>
 80097ae:	4b6e      	ldr	r3, [pc, #440]	@ (8009968 <_strtod_l+0x590>)
 80097b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80097b8:	f7f6 ff3e 	bl	8000638 <__aeabi_dmul>
 80097bc:	4682      	mov	sl, r0
 80097be:	9808      	ldr	r0, [sp, #32]
 80097c0:	468b      	mov	fp, r1
 80097c2:	f7f6 febf 	bl	8000544 <__aeabi_ui2d>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4650      	mov	r0, sl
 80097cc:	4659      	mov	r1, fp
 80097ce:	f7f6 fd7d 	bl	80002cc <__adddf3>
 80097d2:	2d0f      	cmp	r5, #15
 80097d4:	4682      	mov	sl, r0
 80097d6:	468b      	mov	fp, r1
 80097d8:	ddd5      	ble.n	8009786 <_strtod_l+0x3ae>
 80097da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097dc:	1b2c      	subs	r4, r5, r4
 80097de:	441c      	add	r4, r3
 80097e0:	2c00      	cmp	r4, #0
 80097e2:	f340 8096 	ble.w	8009912 <_strtod_l+0x53a>
 80097e6:	f014 030f 	ands.w	r3, r4, #15
 80097ea:	d00a      	beq.n	8009802 <_strtod_l+0x42a>
 80097ec:	495e      	ldr	r1, [pc, #376]	@ (8009968 <_strtod_l+0x590>)
 80097ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097f2:	4652      	mov	r2, sl
 80097f4:	465b      	mov	r3, fp
 80097f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097fa:	f7f6 ff1d 	bl	8000638 <__aeabi_dmul>
 80097fe:	4682      	mov	sl, r0
 8009800:	468b      	mov	fp, r1
 8009802:	f034 040f 	bics.w	r4, r4, #15
 8009806:	d073      	beq.n	80098f0 <_strtod_l+0x518>
 8009808:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800980c:	dd48      	ble.n	80098a0 <_strtod_l+0x4c8>
 800980e:	2400      	movs	r4, #0
 8009810:	46a0      	mov	r8, r4
 8009812:	940a      	str	r4, [sp, #40]	@ 0x28
 8009814:	46a1      	mov	r9, r4
 8009816:	9a05      	ldr	r2, [sp, #20]
 8009818:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009970 <_strtod_l+0x598>
 800981c:	2322      	movs	r3, #34	@ 0x22
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	f04f 0a00 	mov.w	sl, #0
 8009824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009826:	2b00      	cmp	r3, #0
 8009828:	f43f ae0f 	beq.w	800944a <_strtod_l+0x72>
 800982c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800982e:	9805      	ldr	r0, [sp, #20]
 8009830:	f7ff f942 	bl	8008ab8 <_Bfree>
 8009834:	9805      	ldr	r0, [sp, #20]
 8009836:	4649      	mov	r1, r9
 8009838:	f7ff f93e 	bl	8008ab8 <_Bfree>
 800983c:	9805      	ldr	r0, [sp, #20]
 800983e:	4641      	mov	r1, r8
 8009840:	f7ff f93a 	bl	8008ab8 <_Bfree>
 8009844:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009846:	9805      	ldr	r0, [sp, #20]
 8009848:	f7ff f936 	bl	8008ab8 <_Bfree>
 800984c:	9805      	ldr	r0, [sp, #20]
 800984e:	4621      	mov	r1, r4
 8009850:	f7ff f932 	bl	8008ab8 <_Bfree>
 8009854:	e5f9      	b.n	800944a <_strtod_l+0x72>
 8009856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009858:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800985c:	4293      	cmp	r3, r2
 800985e:	dbbc      	blt.n	80097da <_strtod_l+0x402>
 8009860:	4c41      	ldr	r4, [pc, #260]	@ (8009968 <_strtod_l+0x590>)
 8009862:	f1c5 050f 	rsb	r5, r5, #15
 8009866:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800986a:	4652      	mov	r2, sl
 800986c:	465b      	mov	r3, fp
 800986e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009872:	f7f6 fee1 	bl	8000638 <__aeabi_dmul>
 8009876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009878:	1b5d      	subs	r5, r3, r5
 800987a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800987e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009882:	e78f      	b.n	80097a4 <_strtod_l+0x3cc>
 8009884:	3316      	adds	r3, #22
 8009886:	dba8      	blt.n	80097da <_strtod_l+0x402>
 8009888:	4b37      	ldr	r3, [pc, #220]	@ (8009968 <_strtod_l+0x590>)
 800988a:	eba9 0808 	sub.w	r8, r9, r8
 800988e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009892:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009896:	4650      	mov	r0, sl
 8009898:	4659      	mov	r1, fp
 800989a:	f7f6 fff7 	bl	800088c <__aeabi_ddiv>
 800989e:	e783      	b.n	80097a8 <_strtod_l+0x3d0>
 80098a0:	4b32      	ldr	r3, [pc, #200]	@ (800996c <_strtod_l+0x594>)
 80098a2:	9308      	str	r3, [sp, #32]
 80098a4:	2300      	movs	r3, #0
 80098a6:	1124      	asrs	r4, r4, #4
 80098a8:	4650      	mov	r0, sl
 80098aa:	4659      	mov	r1, fp
 80098ac:	461e      	mov	r6, r3
 80098ae:	2c01      	cmp	r4, #1
 80098b0:	dc21      	bgt.n	80098f6 <_strtod_l+0x51e>
 80098b2:	b10b      	cbz	r3, 80098b8 <_strtod_l+0x4e0>
 80098b4:	4682      	mov	sl, r0
 80098b6:	468b      	mov	fp, r1
 80098b8:	492c      	ldr	r1, [pc, #176]	@ (800996c <_strtod_l+0x594>)
 80098ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80098be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80098c2:	4652      	mov	r2, sl
 80098c4:	465b      	mov	r3, fp
 80098c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ca:	f7f6 feb5 	bl	8000638 <__aeabi_dmul>
 80098ce:	4b28      	ldr	r3, [pc, #160]	@ (8009970 <_strtod_l+0x598>)
 80098d0:	460a      	mov	r2, r1
 80098d2:	400b      	ands	r3, r1
 80098d4:	4927      	ldr	r1, [pc, #156]	@ (8009974 <_strtod_l+0x59c>)
 80098d6:	428b      	cmp	r3, r1
 80098d8:	4682      	mov	sl, r0
 80098da:	d898      	bhi.n	800980e <_strtod_l+0x436>
 80098dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80098e0:	428b      	cmp	r3, r1
 80098e2:	bf86      	itte	hi
 80098e4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009978 <_strtod_l+0x5a0>
 80098e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80098ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80098f0:	2300      	movs	r3, #0
 80098f2:	9308      	str	r3, [sp, #32]
 80098f4:	e07a      	b.n	80099ec <_strtod_l+0x614>
 80098f6:	07e2      	lsls	r2, r4, #31
 80098f8:	d505      	bpl.n	8009906 <_strtod_l+0x52e>
 80098fa:	9b08      	ldr	r3, [sp, #32]
 80098fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009900:	f7f6 fe9a 	bl	8000638 <__aeabi_dmul>
 8009904:	2301      	movs	r3, #1
 8009906:	9a08      	ldr	r2, [sp, #32]
 8009908:	3208      	adds	r2, #8
 800990a:	3601      	adds	r6, #1
 800990c:	1064      	asrs	r4, r4, #1
 800990e:	9208      	str	r2, [sp, #32]
 8009910:	e7cd      	b.n	80098ae <_strtod_l+0x4d6>
 8009912:	d0ed      	beq.n	80098f0 <_strtod_l+0x518>
 8009914:	4264      	negs	r4, r4
 8009916:	f014 020f 	ands.w	r2, r4, #15
 800991a:	d00a      	beq.n	8009932 <_strtod_l+0x55a>
 800991c:	4b12      	ldr	r3, [pc, #72]	@ (8009968 <_strtod_l+0x590>)
 800991e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009922:	4650      	mov	r0, sl
 8009924:	4659      	mov	r1, fp
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f7f6 ffaf 	bl	800088c <__aeabi_ddiv>
 800992e:	4682      	mov	sl, r0
 8009930:	468b      	mov	fp, r1
 8009932:	1124      	asrs	r4, r4, #4
 8009934:	d0dc      	beq.n	80098f0 <_strtod_l+0x518>
 8009936:	2c1f      	cmp	r4, #31
 8009938:	dd20      	ble.n	800997c <_strtod_l+0x5a4>
 800993a:	2400      	movs	r4, #0
 800993c:	46a0      	mov	r8, r4
 800993e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009940:	46a1      	mov	r9, r4
 8009942:	9a05      	ldr	r2, [sp, #20]
 8009944:	2322      	movs	r3, #34	@ 0x22
 8009946:	f04f 0a00 	mov.w	sl, #0
 800994a:	f04f 0b00 	mov.w	fp, #0
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	e768      	b.n	8009824 <_strtod_l+0x44c>
 8009952:	bf00      	nop
 8009954:	0800b235 	.word	0x0800b235
 8009958:	0800b44c 	.word	0x0800b44c
 800995c:	0800b22d 	.word	0x0800b22d
 8009960:	0800b264 	.word	0x0800b264
 8009964:	0800b5f5 	.word	0x0800b5f5
 8009968:	0800b380 	.word	0x0800b380
 800996c:	0800b358 	.word	0x0800b358
 8009970:	7ff00000 	.word	0x7ff00000
 8009974:	7ca00000 	.word	0x7ca00000
 8009978:	7fefffff 	.word	0x7fefffff
 800997c:	f014 0310 	ands.w	r3, r4, #16
 8009980:	bf18      	it	ne
 8009982:	236a      	movne	r3, #106	@ 0x6a
 8009984:	4ea9      	ldr	r6, [pc, #676]	@ (8009c2c <_strtod_l+0x854>)
 8009986:	9308      	str	r3, [sp, #32]
 8009988:	4650      	mov	r0, sl
 800998a:	4659      	mov	r1, fp
 800998c:	2300      	movs	r3, #0
 800998e:	07e2      	lsls	r2, r4, #31
 8009990:	d504      	bpl.n	800999c <_strtod_l+0x5c4>
 8009992:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009996:	f7f6 fe4f 	bl	8000638 <__aeabi_dmul>
 800999a:	2301      	movs	r3, #1
 800999c:	1064      	asrs	r4, r4, #1
 800999e:	f106 0608 	add.w	r6, r6, #8
 80099a2:	d1f4      	bne.n	800998e <_strtod_l+0x5b6>
 80099a4:	b10b      	cbz	r3, 80099aa <_strtod_l+0x5d2>
 80099a6:	4682      	mov	sl, r0
 80099a8:	468b      	mov	fp, r1
 80099aa:	9b08      	ldr	r3, [sp, #32]
 80099ac:	b1b3      	cbz	r3, 80099dc <_strtod_l+0x604>
 80099ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80099b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	4659      	mov	r1, fp
 80099ba:	dd0f      	ble.n	80099dc <_strtod_l+0x604>
 80099bc:	2b1f      	cmp	r3, #31
 80099be:	dd55      	ble.n	8009a6c <_strtod_l+0x694>
 80099c0:	2b34      	cmp	r3, #52	@ 0x34
 80099c2:	bfde      	ittt	le
 80099c4:	f04f 33ff 	movle.w	r3, #4294967295
 80099c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80099cc:	4093      	lslle	r3, r2
 80099ce:	f04f 0a00 	mov.w	sl, #0
 80099d2:	bfcc      	ite	gt
 80099d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80099d8:	ea03 0b01 	andle.w	fp, r3, r1
 80099dc:	2200      	movs	r2, #0
 80099de:	2300      	movs	r3, #0
 80099e0:	4650      	mov	r0, sl
 80099e2:	4659      	mov	r1, fp
 80099e4:	f7f7 f890 	bl	8000b08 <__aeabi_dcmpeq>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d1a6      	bne.n	800993a <_strtod_l+0x562>
 80099ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80099f2:	9805      	ldr	r0, [sp, #20]
 80099f4:	462b      	mov	r3, r5
 80099f6:	463a      	mov	r2, r7
 80099f8:	f7ff f8c6 	bl	8008b88 <__s2b>
 80099fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80099fe:	2800      	cmp	r0, #0
 8009a00:	f43f af05 	beq.w	800980e <_strtod_l+0x436>
 8009a04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a06:	2a00      	cmp	r2, #0
 8009a08:	eba9 0308 	sub.w	r3, r9, r8
 8009a0c:	bfa8      	it	ge
 8009a0e:	2300      	movge	r3, #0
 8009a10:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a12:	2400      	movs	r4, #0
 8009a14:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009a18:	9316      	str	r3, [sp, #88]	@ 0x58
 8009a1a:	46a0      	mov	r8, r4
 8009a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a1e:	9805      	ldr	r0, [sp, #20]
 8009a20:	6859      	ldr	r1, [r3, #4]
 8009a22:	f7ff f809 	bl	8008a38 <_Balloc>
 8009a26:	4681      	mov	r9, r0
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f43f aef4 	beq.w	8009816 <_strtod_l+0x43e>
 8009a2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a30:	691a      	ldr	r2, [r3, #16]
 8009a32:	3202      	adds	r2, #2
 8009a34:	f103 010c 	add.w	r1, r3, #12
 8009a38:	0092      	lsls	r2, r2, #2
 8009a3a:	300c      	adds	r0, #12
 8009a3c:	f000 ff38 	bl	800a8b0 <memcpy>
 8009a40:	ec4b ab10 	vmov	d0, sl, fp
 8009a44:	9805      	ldr	r0, [sp, #20]
 8009a46:	aa1c      	add	r2, sp, #112	@ 0x70
 8009a48:	a91b      	add	r1, sp, #108	@ 0x6c
 8009a4a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009a4e:	f7ff fbd7 	bl	8009200 <__d2b>
 8009a52:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a54:	2800      	cmp	r0, #0
 8009a56:	f43f aede 	beq.w	8009816 <_strtod_l+0x43e>
 8009a5a:	9805      	ldr	r0, [sp, #20]
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	f7ff f929 	bl	8008cb4 <__i2b>
 8009a62:	4680      	mov	r8, r0
 8009a64:	b948      	cbnz	r0, 8009a7a <_strtod_l+0x6a2>
 8009a66:	f04f 0800 	mov.w	r8, #0
 8009a6a:	e6d4      	b.n	8009816 <_strtod_l+0x43e>
 8009a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a70:	fa02 f303 	lsl.w	r3, r2, r3
 8009a74:	ea03 0a0a 	and.w	sl, r3, sl
 8009a78:	e7b0      	b.n	80099dc <_strtod_l+0x604>
 8009a7a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009a7c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009a7e:	2d00      	cmp	r5, #0
 8009a80:	bfab      	itete	ge
 8009a82:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009a84:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009a86:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009a88:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009a8a:	bfac      	ite	ge
 8009a8c:	18ef      	addge	r7, r5, r3
 8009a8e:	1b5e      	sublt	r6, r3, r5
 8009a90:	9b08      	ldr	r3, [sp, #32]
 8009a92:	1aed      	subs	r5, r5, r3
 8009a94:	4415      	add	r5, r2
 8009a96:	4b66      	ldr	r3, [pc, #408]	@ (8009c30 <_strtod_l+0x858>)
 8009a98:	3d01      	subs	r5, #1
 8009a9a:	429d      	cmp	r5, r3
 8009a9c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009aa0:	da50      	bge.n	8009b44 <_strtod_l+0x76c>
 8009aa2:	1b5b      	subs	r3, r3, r5
 8009aa4:	2b1f      	cmp	r3, #31
 8009aa6:	eba2 0203 	sub.w	r2, r2, r3
 8009aaa:	f04f 0101 	mov.w	r1, #1
 8009aae:	dc3d      	bgt.n	8009b2c <_strtod_l+0x754>
 8009ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009aba:	18bd      	adds	r5, r7, r2
 8009abc:	9b08      	ldr	r3, [sp, #32]
 8009abe:	42af      	cmp	r7, r5
 8009ac0:	4416      	add	r6, r2
 8009ac2:	441e      	add	r6, r3
 8009ac4:	463b      	mov	r3, r7
 8009ac6:	bfa8      	it	ge
 8009ac8:	462b      	movge	r3, r5
 8009aca:	42b3      	cmp	r3, r6
 8009acc:	bfa8      	it	ge
 8009ace:	4633      	movge	r3, r6
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	bfc2      	ittt	gt
 8009ad4:	1aed      	subgt	r5, r5, r3
 8009ad6:	1af6      	subgt	r6, r6, r3
 8009ad8:	1aff      	subgt	r7, r7, r3
 8009ada:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	dd16      	ble.n	8009b0e <_strtod_l+0x736>
 8009ae0:	4641      	mov	r1, r8
 8009ae2:	9805      	ldr	r0, [sp, #20]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	f7ff f9a5 	bl	8008e34 <__pow5mult>
 8009aea:	4680      	mov	r8, r0
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d0ba      	beq.n	8009a66 <_strtod_l+0x68e>
 8009af0:	4601      	mov	r1, r0
 8009af2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009af4:	9805      	ldr	r0, [sp, #20]
 8009af6:	f7ff f8f3 	bl	8008ce0 <__multiply>
 8009afa:	900e      	str	r0, [sp, #56]	@ 0x38
 8009afc:	2800      	cmp	r0, #0
 8009afe:	f43f ae8a 	beq.w	8009816 <_strtod_l+0x43e>
 8009b02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b04:	9805      	ldr	r0, [sp, #20]
 8009b06:	f7fe ffd7 	bl	8008ab8 <_Bfree>
 8009b0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b0e:	2d00      	cmp	r5, #0
 8009b10:	dc1d      	bgt.n	8009b4e <_strtod_l+0x776>
 8009b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	dd23      	ble.n	8009b60 <_strtod_l+0x788>
 8009b18:	4649      	mov	r1, r9
 8009b1a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009b1c:	9805      	ldr	r0, [sp, #20]
 8009b1e:	f7ff f989 	bl	8008e34 <__pow5mult>
 8009b22:	4681      	mov	r9, r0
 8009b24:	b9e0      	cbnz	r0, 8009b60 <_strtod_l+0x788>
 8009b26:	f04f 0900 	mov.w	r9, #0
 8009b2a:	e674      	b.n	8009816 <_strtod_l+0x43e>
 8009b2c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009b30:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009b34:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009b38:	35e2      	adds	r5, #226	@ 0xe2
 8009b3a:	fa01 f305 	lsl.w	r3, r1, r5
 8009b3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b40:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009b42:	e7ba      	b.n	8009aba <_strtod_l+0x6e2>
 8009b44:	2300      	movs	r3, #0
 8009b46:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b48:	2301      	movs	r3, #1
 8009b4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b4c:	e7b5      	b.n	8009aba <_strtod_l+0x6e2>
 8009b4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b50:	9805      	ldr	r0, [sp, #20]
 8009b52:	462a      	mov	r2, r5
 8009b54:	f7ff f9c8 	bl	8008ee8 <__lshift>
 8009b58:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d1d9      	bne.n	8009b12 <_strtod_l+0x73a>
 8009b5e:	e65a      	b.n	8009816 <_strtod_l+0x43e>
 8009b60:	2e00      	cmp	r6, #0
 8009b62:	dd07      	ble.n	8009b74 <_strtod_l+0x79c>
 8009b64:	4649      	mov	r1, r9
 8009b66:	9805      	ldr	r0, [sp, #20]
 8009b68:	4632      	mov	r2, r6
 8009b6a:	f7ff f9bd 	bl	8008ee8 <__lshift>
 8009b6e:	4681      	mov	r9, r0
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d0d8      	beq.n	8009b26 <_strtod_l+0x74e>
 8009b74:	2f00      	cmp	r7, #0
 8009b76:	dd08      	ble.n	8009b8a <_strtod_l+0x7b2>
 8009b78:	4641      	mov	r1, r8
 8009b7a:	9805      	ldr	r0, [sp, #20]
 8009b7c:	463a      	mov	r2, r7
 8009b7e:	f7ff f9b3 	bl	8008ee8 <__lshift>
 8009b82:	4680      	mov	r8, r0
 8009b84:	2800      	cmp	r0, #0
 8009b86:	f43f ae46 	beq.w	8009816 <_strtod_l+0x43e>
 8009b8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b8c:	9805      	ldr	r0, [sp, #20]
 8009b8e:	464a      	mov	r2, r9
 8009b90:	f7ff fa32 	bl	8008ff8 <__mdiff>
 8009b94:	4604      	mov	r4, r0
 8009b96:	2800      	cmp	r0, #0
 8009b98:	f43f ae3d 	beq.w	8009816 <_strtod_l+0x43e>
 8009b9c:	68c3      	ldr	r3, [r0, #12]
 8009b9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	60c3      	str	r3, [r0, #12]
 8009ba4:	4641      	mov	r1, r8
 8009ba6:	f7ff fa0b 	bl	8008fc0 <__mcmp>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	da46      	bge.n	8009c3c <_strtod_l+0x864>
 8009bae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bb0:	ea53 030a 	orrs.w	r3, r3, sl
 8009bb4:	d16c      	bne.n	8009c90 <_strtod_l+0x8b8>
 8009bb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d168      	bne.n	8009c90 <_strtod_l+0x8b8>
 8009bbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bc2:	0d1b      	lsrs	r3, r3, #20
 8009bc4:	051b      	lsls	r3, r3, #20
 8009bc6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009bca:	d961      	bls.n	8009c90 <_strtod_l+0x8b8>
 8009bcc:	6963      	ldr	r3, [r4, #20]
 8009bce:	b913      	cbnz	r3, 8009bd6 <_strtod_l+0x7fe>
 8009bd0:	6923      	ldr	r3, [r4, #16]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	dd5c      	ble.n	8009c90 <_strtod_l+0x8b8>
 8009bd6:	4621      	mov	r1, r4
 8009bd8:	2201      	movs	r2, #1
 8009bda:	9805      	ldr	r0, [sp, #20]
 8009bdc:	f7ff f984 	bl	8008ee8 <__lshift>
 8009be0:	4641      	mov	r1, r8
 8009be2:	4604      	mov	r4, r0
 8009be4:	f7ff f9ec 	bl	8008fc0 <__mcmp>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	dd51      	ble.n	8009c90 <_strtod_l+0x8b8>
 8009bec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bf0:	9a08      	ldr	r2, [sp, #32]
 8009bf2:	0d1b      	lsrs	r3, r3, #20
 8009bf4:	051b      	lsls	r3, r3, #20
 8009bf6:	2a00      	cmp	r2, #0
 8009bf8:	d06b      	beq.n	8009cd2 <_strtod_l+0x8fa>
 8009bfa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009bfe:	d868      	bhi.n	8009cd2 <_strtod_l+0x8fa>
 8009c00:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009c04:	f67f ae9d 	bls.w	8009942 <_strtod_l+0x56a>
 8009c08:	4b0a      	ldr	r3, [pc, #40]	@ (8009c34 <_strtod_l+0x85c>)
 8009c0a:	4650      	mov	r0, sl
 8009c0c:	4659      	mov	r1, fp
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f7f6 fd12 	bl	8000638 <__aeabi_dmul>
 8009c14:	4b08      	ldr	r3, [pc, #32]	@ (8009c38 <_strtod_l+0x860>)
 8009c16:	400b      	ands	r3, r1
 8009c18:	4682      	mov	sl, r0
 8009c1a:	468b      	mov	fp, r1
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f47f ae05 	bne.w	800982c <_strtod_l+0x454>
 8009c22:	9a05      	ldr	r2, [sp, #20]
 8009c24:	2322      	movs	r3, #34	@ 0x22
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	e600      	b.n	800982c <_strtod_l+0x454>
 8009c2a:	bf00      	nop
 8009c2c:	0800b478 	.word	0x0800b478
 8009c30:	fffffc02 	.word	0xfffffc02
 8009c34:	39500000 	.word	0x39500000
 8009c38:	7ff00000 	.word	0x7ff00000
 8009c3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c40:	d165      	bne.n	8009d0e <_strtod_l+0x936>
 8009c42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c48:	b35a      	cbz	r2, 8009ca2 <_strtod_l+0x8ca>
 8009c4a:	4a9f      	ldr	r2, [pc, #636]	@ (8009ec8 <_strtod_l+0xaf0>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d12b      	bne.n	8009ca8 <_strtod_l+0x8d0>
 8009c50:	9b08      	ldr	r3, [sp, #32]
 8009c52:	4651      	mov	r1, sl
 8009c54:	b303      	cbz	r3, 8009c98 <_strtod_l+0x8c0>
 8009c56:	4b9d      	ldr	r3, [pc, #628]	@ (8009ecc <_strtod_l+0xaf4>)
 8009c58:	465a      	mov	r2, fp
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009c60:	f04f 32ff 	mov.w	r2, #4294967295
 8009c64:	d81b      	bhi.n	8009c9e <_strtod_l+0x8c6>
 8009c66:	0d1b      	lsrs	r3, r3, #20
 8009c68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c70:	4299      	cmp	r1, r3
 8009c72:	d119      	bne.n	8009ca8 <_strtod_l+0x8d0>
 8009c74:	4b96      	ldr	r3, [pc, #600]	@ (8009ed0 <_strtod_l+0xaf8>)
 8009c76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d102      	bne.n	8009c82 <_strtod_l+0x8aa>
 8009c7c:	3101      	adds	r1, #1
 8009c7e:	f43f adca 	beq.w	8009816 <_strtod_l+0x43e>
 8009c82:	4b92      	ldr	r3, [pc, #584]	@ (8009ecc <_strtod_l+0xaf4>)
 8009c84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c86:	401a      	ands	r2, r3
 8009c88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009c8c:	f04f 0a00 	mov.w	sl, #0
 8009c90:	9b08      	ldr	r3, [sp, #32]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1b8      	bne.n	8009c08 <_strtod_l+0x830>
 8009c96:	e5c9      	b.n	800982c <_strtod_l+0x454>
 8009c98:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9c:	e7e8      	b.n	8009c70 <_strtod_l+0x898>
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	e7e6      	b.n	8009c70 <_strtod_l+0x898>
 8009ca2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ca6:	d0a1      	beq.n	8009bec <_strtod_l+0x814>
 8009ca8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009caa:	b1db      	cbz	r3, 8009ce4 <_strtod_l+0x90c>
 8009cac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cae:	4213      	tst	r3, r2
 8009cb0:	d0ee      	beq.n	8009c90 <_strtod_l+0x8b8>
 8009cb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cb4:	9a08      	ldr	r2, [sp, #32]
 8009cb6:	4650      	mov	r0, sl
 8009cb8:	4659      	mov	r1, fp
 8009cba:	b1bb      	cbz	r3, 8009cec <_strtod_l+0x914>
 8009cbc:	f7ff fb6e 	bl	800939c <sulp>
 8009cc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cc4:	ec53 2b10 	vmov	r2, r3, d0
 8009cc8:	f7f6 fb00 	bl	80002cc <__adddf3>
 8009ccc:	4682      	mov	sl, r0
 8009cce:	468b      	mov	fp, r1
 8009cd0:	e7de      	b.n	8009c90 <_strtod_l+0x8b8>
 8009cd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009cd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009cda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009cde:	f04f 3aff 	mov.w	sl, #4294967295
 8009ce2:	e7d5      	b.n	8009c90 <_strtod_l+0x8b8>
 8009ce4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ce6:	ea13 0f0a 	tst.w	r3, sl
 8009cea:	e7e1      	b.n	8009cb0 <_strtod_l+0x8d8>
 8009cec:	f7ff fb56 	bl	800939c <sulp>
 8009cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cf4:	ec53 2b10 	vmov	r2, r3, d0
 8009cf8:	f7f6 fae6 	bl	80002c8 <__aeabi_dsub>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2300      	movs	r3, #0
 8009d00:	4682      	mov	sl, r0
 8009d02:	468b      	mov	fp, r1
 8009d04:	f7f6 ff00 	bl	8000b08 <__aeabi_dcmpeq>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d0c1      	beq.n	8009c90 <_strtod_l+0x8b8>
 8009d0c:	e619      	b.n	8009942 <_strtod_l+0x56a>
 8009d0e:	4641      	mov	r1, r8
 8009d10:	4620      	mov	r0, r4
 8009d12:	f7ff facd 	bl	80092b0 <__ratio>
 8009d16:	ec57 6b10 	vmov	r6, r7, d0
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	f7f6 ff04 	bl	8000b30 <__aeabi_dcmple>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d06f      	beq.n	8009e0c <_strtod_l+0xa34>
 8009d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d17a      	bne.n	8009e28 <_strtod_l+0xa50>
 8009d32:	f1ba 0f00 	cmp.w	sl, #0
 8009d36:	d158      	bne.n	8009dea <_strtod_l+0xa12>
 8009d38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d15a      	bne.n	8009df8 <_strtod_l+0xa20>
 8009d42:	4b64      	ldr	r3, [pc, #400]	@ (8009ed4 <_strtod_l+0xafc>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	4630      	mov	r0, r6
 8009d48:	4639      	mov	r1, r7
 8009d4a:	f7f6 fee7 	bl	8000b1c <__aeabi_dcmplt>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d159      	bne.n	8009e06 <_strtod_l+0xa2e>
 8009d52:	4630      	mov	r0, r6
 8009d54:	4639      	mov	r1, r7
 8009d56:	4b60      	ldr	r3, [pc, #384]	@ (8009ed8 <_strtod_l+0xb00>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f7f6 fc6d 	bl	8000638 <__aeabi_dmul>
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460f      	mov	r7, r1
 8009d62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009d66:	9606      	str	r6, [sp, #24]
 8009d68:	9307      	str	r3, [sp, #28]
 8009d6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d6e:	4d57      	ldr	r5, [pc, #348]	@ (8009ecc <_strtod_l+0xaf4>)
 8009d70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d76:	401d      	ands	r5, r3
 8009d78:	4b58      	ldr	r3, [pc, #352]	@ (8009edc <_strtod_l+0xb04>)
 8009d7a:	429d      	cmp	r5, r3
 8009d7c:	f040 80b2 	bne.w	8009ee4 <_strtod_l+0xb0c>
 8009d80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009d86:	ec4b ab10 	vmov	d0, sl, fp
 8009d8a:	f7ff f9c9 	bl	8009120 <__ulp>
 8009d8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d92:	ec51 0b10 	vmov	r0, r1, d0
 8009d96:	f7f6 fc4f 	bl	8000638 <__aeabi_dmul>
 8009d9a:	4652      	mov	r2, sl
 8009d9c:	465b      	mov	r3, fp
 8009d9e:	f7f6 fa95 	bl	80002cc <__adddf3>
 8009da2:	460b      	mov	r3, r1
 8009da4:	4949      	ldr	r1, [pc, #292]	@ (8009ecc <_strtod_l+0xaf4>)
 8009da6:	4a4e      	ldr	r2, [pc, #312]	@ (8009ee0 <_strtod_l+0xb08>)
 8009da8:	4019      	ands	r1, r3
 8009daa:	4291      	cmp	r1, r2
 8009dac:	4682      	mov	sl, r0
 8009dae:	d942      	bls.n	8009e36 <_strtod_l+0xa5e>
 8009db0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009db2:	4b47      	ldr	r3, [pc, #284]	@ (8009ed0 <_strtod_l+0xaf8>)
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d103      	bne.n	8009dc0 <_strtod_l+0x9e8>
 8009db8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009dba:	3301      	adds	r3, #1
 8009dbc:	f43f ad2b 	beq.w	8009816 <_strtod_l+0x43e>
 8009dc0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009ed0 <_strtod_l+0xaf8>
 8009dc4:	f04f 3aff 	mov.w	sl, #4294967295
 8009dc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009dca:	9805      	ldr	r0, [sp, #20]
 8009dcc:	f7fe fe74 	bl	8008ab8 <_Bfree>
 8009dd0:	9805      	ldr	r0, [sp, #20]
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	f7fe fe70 	bl	8008ab8 <_Bfree>
 8009dd8:	9805      	ldr	r0, [sp, #20]
 8009dda:	4641      	mov	r1, r8
 8009ddc:	f7fe fe6c 	bl	8008ab8 <_Bfree>
 8009de0:	9805      	ldr	r0, [sp, #20]
 8009de2:	4621      	mov	r1, r4
 8009de4:	f7fe fe68 	bl	8008ab8 <_Bfree>
 8009de8:	e618      	b.n	8009a1c <_strtod_l+0x644>
 8009dea:	f1ba 0f01 	cmp.w	sl, #1
 8009dee:	d103      	bne.n	8009df8 <_strtod_l+0xa20>
 8009df0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f43f ada5 	beq.w	8009942 <_strtod_l+0x56a>
 8009df8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009ea8 <_strtod_l+0xad0>
 8009dfc:	4f35      	ldr	r7, [pc, #212]	@ (8009ed4 <_strtod_l+0xafc>)
 8009dfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e02:	2600      	movs	r6, #0
 8009e04:	e7b1      	b.n	8009d6a <_strtod_l+0x992>
 8009e06:	4f34      	ldr	r7, [pc, #208]	@ (8009ed8 <_strtod_l+0xb00>)
 8009e08:	2600      	movs	r6, #0
 8009e0a:	e7aa      	b.n	8009d62 <_strtod_l+0x98a>
 8009e0c:	4b32      	ldr	r3, [pc, #200]	@ (8009ed8 <_strtod_l+0xb00>)
 8009e0e:	4630      	mov	r0, r6
 8009e10:	4639      	mov	r1, r7
 8009e12:	2200      	movs	r2, #0
 8009e14:	f7f6 fc10 	bl	8000638 <__aeabi_dmul>
 8009e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	460f      	mov	r7, r1
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d09f      	beq.n	8009d62 <_strtod_l+0x98a>
 8009e22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009e26:	e7a0      	b.n	8009d6a <_strtod_l+0x992>
 8009e28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009eb0 <_strtod_l+0xad8>
 8009e2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e30:	ec57 6b17 	vmov	r6, r7, d7
 8009e34:	e799      	b.n	8009d6a <_strtod_l+0x992>
 8009e36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009e3a:	9b08      	ldr	r3, [sp, #32]
 8009e3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1c1      	bne.n	8009dc8 <_strtod_l+0x9f0>
 8009e44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e48:	0d1b      	lsrs	r3, r3, #20
 8009e4a:	051b      	lsls	r3, r3, #20
 8009e4c:	429d      	cmp	r5, r3
 8009e4e:	d1bb      	bne.n	8009dc8 <_strtod_l+0x9f0>
 8009e50:	4630      	mov	r0, r6
 8009e52:	4639      	mov	r1, r7
 8009e54:	f7f6 ff50 	bl	8000cf8 <__aeabi_d2lz>
 8009e58:	f7f6 fbc0 	bl	80005dc <__aeabi_l2d>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4630      	mov	r0, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7f6 fa30 	bl	80002c8 <__aeabi_dsub>
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009e70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e76:	ea46 060a 	orr.w	r6, r6, sl
 8009e7a:	431e      	orrs	r6, r3
 8009e7c:	d06f      	beq.n	8009f5e <_strtod_l+0xb86>
 8009e7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009eb8 <_strtod_l+0xae0>)
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	f7f6 fe4a 	bl	8000b1c <__aeabi_dcmplt>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	f47f accf 	bne.w	800982c <_strtod_l+0x454>
 8009e8e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009ec0 <_strtod_l+0xae8>)
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e98:	f7f6 fe5e 	bl	8000b58 <__aeabi_dcmpgt>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d093      	beq.n	8009dc8 <_strtod_l+0x9f0>
 8009ea0:	e4c4      	b.n	800982c <_strtod_l+0x454>
 8009ea2:	bf00      	nop
 8009ea4:	f3af 8000 	nop.w
 8009ea8:	00000000 	.word	0x00000000
 8009eac:	bff00000 	.word	0xbff00000
 8009eb0:	00000000 	.word	0x00000000
 8009eb4:	3ff00000 	.word	0x3ff00000
 8009eb8:	94a03595 	.word	0x94a03595
 8009ebc:	3fdfffff 	.word	0x3fdfffff
 8009ec0:	35afe535 	.word	0x35afe535
 8009ec4:	3fe00000 	.word	0x3fe00000
 8009ec8:	000fffff 	.word	0x000fffff
 8009ecc:	7ff00000 	.word	0x7ff00000
 8009ed0:	7fefffff 	.word	0x7fefffff
 8009ed4:	3ff00000 	.word	0x3ff00000
 8009ed8:	3fe00000 	.word	0x3fe00000
 8009edc:	7fe00000 	.word	0x7fe00000
 8009ee0:	7c9fffff 	.word	0x7c9fffff
 8009ee4:	9b08      	ldr	r3, [sp, #32]
 8009ee6:	b323      	cbz	r3, 8009f32 <_strtod_l+0xb5a>
 8009ee8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009eec:	d821      	bhi.n	8009f32 <_strtod_l+0xb5a>
 8009eee:	a328      	add	r3, pc, #160	@ (adr r3, 8009f90 <_strtod_l+0xbb8>)
 8009ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 fe1a 	bl	8000b30 <__aeabi_dcmple>
 8009efc:	b1a0      	cbz	r0, 8009f28 <_strtod_l+0xb50>
 8009efe:	4639      	mov	r1, r7
 8009f00:	4630      	mov	r0, r6
 8009f02:	f7f6 fe71 	bl	8000be8 <__aeabi_d2uiz>
 8009f06:	2801      	cmp	r0, #1
 8009f08:	bf38      	it	cc
 8009f0a:	2001      	movcc	r0, #1
 8009f0c:	f7f6 fb1a 	bl	8000544 <__aeabi_ui2d>
 8009f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f12:	4606      	mov	r6, r0
 8009f14:	460f      	mov	r7, r1
 8009f16:	b9fb      	cbnz	r3, 8009f58 <_strtod_l+0xb80>
 8009f18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f1c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009f1e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f20:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009f24:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f2a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009f2e:	1b5b      	subs	r3, r3, r5
 8009f30:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f32:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f36:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009f3a:	f7ff f8f1 	bl	8009120 <__ulp>
 8009f3e:	4650      	mov	r0, sl
 8009f40:	ec53 2b10 	vmov	r2, r3, d0
 8009f44:	4659      	mov	r1, fp
 8009f46:	f7f6 fb77 	bl	8000638 <__aeabi_dmul>
 8009f4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009f4e:	f7f6 f9bd 	bl	80002cc <__adddf3>
 8009f52:	4682      	mov	sl, r0
 8009f54:	468b      	mov	fp, r1
 8009f56:	e770      	b.n	8009e3a <_strtod_l+0xa62>
 8009f58:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009f5c:	e7e0      	b.n	8009f20 <_strtod_l+0xb48>
 8009f5e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009f98 <_strtod_l+0xbc0>)
 8009f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f64:	f7f6 fdda 	bl	8000b1c <__aeabi_dcmplt>
 8009f68:	e798      	b.n	8009e9c <_strtod_l+0xac4>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f6e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009f70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	f7ff ba6d 	b.w	8009452 <_strtod_l+0x7a>
 8009f78:	2a65      	cmp	r2, #101	@ 0x65
 8009f7a:	f43f ab66 	beq.w	800964a <_strtod_l+0x272>
 8009f7e:	2a45      	cmp	r2, #69	@ 0x45
 8009f80:	f43f ab63 	beq.w	800964a <_strtod_l+0x272>
 8009f84:	2301      	movs	r3, #1
 8009f86:	f7ff bb9e 	b.w	80096c6 <_strtod_l+0x2ee>
 8009f8a:	bf00      	nop
 8009f8c:	f3af 8000 	nop.w
 8009f90:	ffc00000 	.word	0xffc00000
 8009f94:	41dfffff 	.word	0x41dfffff
 8009f98:	94a03595 	.word	0x94a03595
 8009f9c:	3fcfffff 	.word	0x3fcfffff

08009fa0 <_strtod_r>:
 8009fa0:	4b01      	ldr	r3, [pc, #4]	@ (8009fa8 <_strtod_r+0x8>)
 8009fa2:	f7ff ba19 	b.w	80093d8 <_strtod_l>
 8009fa6:	bf00      	nop
 8009fa8:	2000007c 	.word	0x2000007c

08009fac <_strtol_l.constprop.0>:
 8009fac:	2b24      	cmp	r3, #36	@ 0x24
 8009fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fb2:	4686      	mov	lr, r0
 8009fb4:	4690      	mov	r8, r2
 8009fb6:	d801      	bhi.n	8009fbc <_strtol_l.constprop.0+0x10>
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d106      	bne.n	8009fca <_strtol_l.constprop.0+0x1e>
 8009fbc:	f7fd fdba 	bl	8007b34 <__errno>
 8009fc0:	2316      	movs	r3, #22
 8009fc2:	6003      	str	r3, [r0, #0]
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fca:	4834      	ldr	r0, [pc, #208]	@ (800a09c <_strtol_l.constprop.0+0xf0>)
 8009fcc:	460d      	mov	r5, r1
 8009fce:	462a      	mov	r2, r5
 8009fd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fd4:	5d06      	ldrb	r6, [r0, r4]
 8009fd6:	f016 0608 	ands.w	r6, r6, #8
 8009fda:	d1f8      	bne.n	8009fce <_strtol_l.constprop.0+0x22>
 8009fdc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009fde:	d12d      	bne.n	800a03c <_strtol_l.constprop.0+0x90>
 8009fe0:	782c      	ldrb	r4, [r5, #0]
 8009fe2:	2601      	movs	r6, #1
 8009fe4:	1c95      	adds	r5, r2, #2
 8009fe6:	f033 0210 	bics.w	r2, r3, #16
 8009fea:	d109      	bne.n	800a000 <_strtol_l.constprop.0+0x54>
 8009fec:	2c30      	cmp	r4, #48	@ 0x30
 8009fee:	d12a      	bne.n	800a046 <_strtol_l.constprop.0+0x9a>
 8009ff0:	782a      	ldrb	r2, [r5, #0]
 8009ff2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ff6:	2a58      	cmp	r2, #88	@ 0x58
 8009ff8:	d125      	bne.n	800a046 <_strtol_l.constprop.0+0x9a>
 8009ffa:	786c      	ldrb	r4, [r5, #1]
 8009ffc:	2310      	movs	r3, #16
 8009ffe:	3502      	adds	r5, #2
 800a000:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a004:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a008:	2200      	movs	r2, #0
 800a00a:	fbbc f9f3 	udiv	r9, ip, r3
 800a00e:	4610      	mov	r0, r2
 800a010:	fb03 ca19 	mls	sl, r3, r9, ip
 800a014:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a018:	2f09      	cmp	r7, #9
 800a01a:	d81b      	bhi.n	800a054 <_strtol_l.constprop.0+0xa8>
 800a01c:	463c      	mov	r4, r7
 800a01e:	42a3      	cmp	r3, r4
 800a020:	dd27      	ble.n	800a072 <_strtol_l.constprop.0+0xc6>
 800a022:	1c57      	adds	r7, r2, #1
 800a024:	d007      	beq.n	800a036 <_strtol_l.constprop.0+0x8a>
 800a026:	4581      	cmp	r9, r0
 800a028:	d320      	bcc.n	800a06c <_strtol_l.constprop.0+0xc0>
 800a02a:	d101      	bne.n	800a030 <_strtol_l.constprop.0+0x84>
 800a02c:	45a2      	cmp	sl, r4
 800a02e:	db1d      	blt.n	800a06c <_strtol_l.constprop.0+0xc0>
 800a030:	fb00 4003 	mla	r0, r0, r3, r4
 800a034:	2201      	movs	r2, #1
 800a036:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a03a:	e7eb      	b.n	800a014 <_strtol_l.constprop.0+0x68>
 800a03c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a03e:	bf04      	itt	eq
 800a040:	782c      	ldrbeq	r4, [r5, #0]
 800a042:	1c95      	addeq	r5, r2, #2
 800a044:	e7cf      	b.n	8009fe6 <_strtol_l.constprop.0+0x3a>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1da      	bne.n	800a000 <_strtol_l.constprop.0+0x54>
 800a04a:	2c30      	cmp	r4, #48	@ 0x30
 800a04c:	bf0c      	ite	eq
 800a04e:	2308      	moveq	r3, #8
 800a050:	230a      	movne	r3, #10
 800a052:	e7d5      	b.n	800a000 <_strtol_l.constprop.0+0x54>
 800a054:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a058:	2f19      	cmp	r7, #25
 800a05a:	d801      	bhi.n	800a060 <_strtol_l.constprop.0+0xb4>
 800a05c:	3c37      	subs	r4, #55	@ 0x37
 800a05e:	e7de      	b.n	800a01e <_strtol_l.constprop.0+0x72>
 800a060:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a064:	2f19      	cmp	r7, #25
 800a066:	d804      	bhi.n	800a072 <_strtol_l.constprop.0+0xc6>
 800a068:	3c57      	subs	r4, #87	@ 0x57
 800a06a:	e7d8      	b.n	800a01e <_strtol_l.constprop.0+0x72>
 800a06c:	f04f 32ff 	mov.w	r2, #4294967295
 800a070:	e7e1      	b.n	800a036 <_strtol_l.constprop.0+0x8a>
 800a072:	1c53      	adds	r3, r2, #1
 800a074:	d108      	bne.n	800a088 <_strtol_l.constprop.0+0xdc>
 800a076:	2322      	movs	r3, #34	@ 0x22
 800a078:	f8ce 3000 	str.w	r3, [lr]
 800a07c:	4660      	mov	r0, ip
 800a07e:	f1b8 0f00 	cmp.w	r8, #0
 800a082:	d0a0      	beq.n	8009fc6 <_strtol_l.constprop.0+0x1a>
 800a084:	1e69      	subs	r1, r5, #1
 800a086:	e006      	b.n	800a096 <_strtol_l.constprop.0+0xea>
 800a088:	b106      	cbz	r6, 800a08c <_strtol_l.constprop.0+0xe0>
 800a08a:	4240      	negs	r0, r0
 800a08c:	f1b8 0f00 	cmp.w	r8, #0
 800a090:	d099      	beq.n	8009fc6 <_strtol_l.constprop.0+0x1a>
 800a092:	2a00      	cmp	r2, #0
 800a094:	d1f6      	bne.n	800a084 <_strtol_l.constprop.0+0xd8>
 800a096:	f8c8 1000 	str.w	r1, [r8]
 800a09a:	e794      	b.n	8009fc6 <_strtol_l.constprop.0+0x1a>
 800a09c:	0800b4a1 	.word	0x0800b4a1

0800a0a0 <_strtol_r>:
 800a0a0:	f7ff bf84 	b.w	8009fac <_strtol_l.constprop.0>

0800a0a4 <__ssputs_r>:
 800a0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a8:	688e      	ldr	r6, [r1, #8]
 800a0aa:	461f      	mov	r7, r3
 800a0ac:	42be      	cmp	r6, r7
 800a0ae:	680b      	ldr	r3, [r1, #0]
 800a0b0:	4682      	mov	sl, r0
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	4690      	mov	r8, r2
 800a0b6:	d82d      	bhi.n	800a114 <__ssputs_r+0x70>
 800a0b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0c0:	d026      	beq.n	800a110 <__ssputs_r+0x6c>
 800a0c2:	6965      	ldr	r5, [r4, #20]
 800a0c4:	6909      	ldr	r1, [r1, #16]
 800a0c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0ca:	eba3 0901 	sub.w	r9, r3, r1
 800a0ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0d2:	1c7b      	adds	r3, r7, #1
 800a0d4:	444b      	add	r3, r9
 800a0d6:	106d      	asrs	r5, r5, #1
 800a0d8:	429d      	cmp	r5, r3
 800a0da:	bf38      	it	cc
 800a0dc:	461d      	movcc	r5, r3
 800a0de:	0553      	lsls	r3, r2, #21
 800a0e0:	d527      	bpl.n	800a132 <__ssputs_r+0x8e>
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	f7fe fc1c 	bl	8008920 <_malloc_r>
 800a0e8:	4606      	mov	r6, r0
 800a0ea:	b360      	cbz	r0, 800a146 <__ssputs_r+0xa2>
 800a0ec:	6921      	ldr	r1, [r4, #16]
 800a0ee:	464a      	mov	r2, r9
 800a0f0:	f000 fbde 	bl	800a8b0 <memcpy>
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a0fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0fe:	81a3      	strh	r3, [r4, #12]
 800a100:	6126      	str	r6, [r4, #16]
 800a102:	6165      	str	r5, [r4, #20]
 800a104:	444e      	add	r6, r9
 800a106:	eba5 0509 	sub.w	r5, r5, r9
 800a10a:	6026      	str	r6, [r4, #0]
 800a10c:	60a5      	str	r5, [r4, #8]
 800a10e:	463e      	mov	r6, r7
 800a110:	42be      	cmp	r6, r7
 800a112:	d900      	bls.n	800a116 <__ssputs_r+0x72>
 800a114:	463e      	mov	r6, r7
 800a116:	6820      	ldr	r0, [r4, #0]
 800a118:	4632      	mov	r2, r6
 800a11a:	4641      	mov	r1, r8
 800a11c:	f000 fb6a 	bl	800a7f4 <memmove>
 800a120:	68a3      	ldr	r3, [r4, #8]
 800a122:	1b9b      	subs	r3, r3, r6
 800a124:	60a3      	str	r3, [r4, #8]
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	4433      	add	r3, r6
 800a12a:	6023      	str	r3, [r4, #0]
 800a12c:	2000      	movs	r0, #0
 800a12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a132:	462a      	mov	r2, r5
 800a134:	f000 ff51 	bl	800afda <_realloc_r>
 800a138:	4606      	mov	r6, r0
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d1e0      	bne.n	800a100 <__ssputs_r+0x5c>
 800a13e:	6921      	ldr	r1, [r4, #16]
 800a140:	4650      	mov	r0, sl
 800a142:	f7fe fb79 	bl	8008838 <_free_r>
 800a146:	230c      	movs	r3, #12
 800a148:	f8ca 3000 	str.w	r3, [sl]
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	f04f 30ff 	mov.w	r0, #4294967295
 800a158:	e7e9      	b.n	800a12e <__ssputs_r+0x8a>
	...

0800a15c <_svfiprintf_r>:
 800a15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a160:	4698      	mov	r8, r3
 800a162:	898b      	ldrh	r3, [r1, #12]
 800a164:	061b      	lsls	r3, r3, #24
 800a166:	b09d      	sub	sp, #116	@ 0x74
 800a168:	4607      	mov	r7, r0
 800a16a:	460d      	mov	r5, r1
 800a16c:	4614      	mov	r4, r2
 800a16e:	d510      	bpl.n	800a192 <_svfiprintf_r+0x36>
 800a170:	690b      	ldr	r3, [r1, #16]
 800a172:	b973      	cbnz	r3, 800a192 <_svfiprintf_r+0x36>
 800a174:	2140      	movs	r1, #64	@ 0x40
 800a176:	f7fe fbd3 	bl	8008920 <_malloc_r>
 800a17a:	6028      	str	r0, [r5, #0]
 800a17c:	6128      	str	r0, [r5, #16]
 800a17e:	b930      	cbnz	r0, 800a18e <_svfiprintf_r+0x32>
 800a180:	230c      	movs	r3, #12
 800a182:	603b      	str	r3, [r7, #0]
 800a184:	f04f 30ff 	mov.w	r0, #4294967295
 800a188:	b01d      	add	sp, #116	@ 0x74
 800a18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18e:	2340      	movs	r3, #64	@ 0x40
 800a190:	616b      	str	r3, [r5, #20]
 800a192:	2300      	movs	r3, #0
 800a194:	9309      	str	r3, [sp, #36]	@ 0x24
 800a196:	2320      	movs	r3, #32
 800a198:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a19c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1a0:	2330      	movs	r3, #48	@ 0x30
 800a1a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a340 <_svfiprintf_r+0x1e4>
 800a1a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1aa:	f04f 0901 	mov.w	r9, #1
 800a1ae:	4623      	mov	r3, r4
 800a1b0:	469a      	mov	sl, r3
 800a1b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1b6:	b10a      	cbz	r2, 800a1bc <_svfiprintf_r+0x60>
 800a1b8:	2a25      	cmp	r2, #37	@ 0x25
 800a1ba:	d1f9      	bne.n	800a1b0 <_svfiprintf_r+0x54>
 800a1bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a1c0:	d00b      	beq.n	800a1da <_svfiprintf_r+0x7e>
 800a1c2:	465b      	mov	r3, fp
 800a1c4:	4622      	mov	r2, r4
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	4638      	mov	r0, r7
 800a1ca:	f7ff ff6b 	bl	800a0a4 <__ssputs_r>
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f000 80a7 	beq.w	800a322 <_svfiprintf_r+0x1c6>
 800a1d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1d6:	445a      	add	r2, fp
 800a1d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1da:	f89a 3000 	ldrb.w	r3, [sl]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 809f 	beq.w	800a322 <_svfiprintf_r+0x1c6>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1ee:	f10a 0a01 	add.w	sl, sl, #1
 800a1f2:	9304      	str	r3, [sp, #16]
 800a1f4:	9307      	str	r3, [sp, #28]
 800a1f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1fc:	4654      	mov	r4, sl
 800a1fe:	2205      	movs	r2, #5
 800a200:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a204:	484e      	ldr	r0, [pc, #312]	@ (800a340 <_svfiprintf_r+0x1e4>)
 800a206:	f7f6 f803 	bl	8000210 <memchr>
 800a20a:	9a04      	ldr	r2, [sp, #16]
 800a20c:	b9d8      	cbnz	r0, 800a246 <_svfiprintf_r+0xea>
 800a20e:	06d0      	lsls	r0, r2, #27
 800a210:	bf44      	itt	mi
 800a212:	2320      	movmi	r3, #32
 800a214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a218:	0711      	lsls	r1, r2, #28
 800a21a:	bf44      	itt	mi
 800a21c:	232b      	movmi	r3, #43	@ 0x2b
 800a21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a222:	f89a 3000 	ldrb.w	r3, [sl]
 800a226:	2b2a      	cmp	r3, #42	@ 0x2a
 800a228:	d015      	beq.n	800a256 <_svfiprintf_r+0xfa>
 800a22a:	9a07      	ldr	r2, [sp, #28]
 800a22c:	4654      	mov	r4, sl
 800a22e:	2000      	movs	r0, #0
 800a230:	f04f 0c0a 	mov.w	ip, #10
 800a234:	4621      	mov	r1, r4
 800a236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a23a:	3b30      	subs	r3, #48	@ 0x30
 800a23c:	2b09      	cmp	r3, #9
 800a23e:	d94b      	bls.n	800a2d8 <_svfiprintf_r+0x17c>
 800a240:	b1b0      	cbz	r0, 800a270 <_svfiprintf_r+0x114>
 800a242:	9207      	str	r2, [sp, #28]
 800a244:	e014      	b.n	800a270 <_svfiprintf_r+0x114>
 800a246:	eba0 0308 	sub.w	r3, r0, r8
 800a24a:	fa09 f303 	lsl.w	r3, r9, r3
 800a24e:	4313      	orrs	r3, r2
 800a250:	9304      	str	r3, [sp, #16]
 800a252:	46a2      	mov	sl, r4
 800a254:	e7d2      	b.n	800a1fc <_svfiprintf_r+0xa0>
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	1d19      	adds	r1, r3, #4
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	9103      	str	r1, [sp, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	bfbb      	ittet	lt
 800a262:	425b      	neglt	r3, r3
 800a264:	f042 0202 	orrlt.w	r2, r2, #2
 800a268:	9307      	strge	r3, [sp, #28]
 800a26a:	9307      	strlt	r3, [sp, #28]
 800a26c:	bfb8      	it	lt
 800a26e:	9204      	strlt	r2, [sp, #16]
 800a270:	7823      	ldrb	r3, [r4, #0]
 800a272:	2b2e      	cmp	r3, #46	@ 0x2e
 800a274:	d10a      	bne.n	800a28c <_svfiprintf_r+0x130>
 800a276:	7863      	ldrb	r3, [r4, #1]
 800a278:	2b2a      	cmp	r3, #42	@ 0x2a
 800a27a:	d132      	bne.n	800a2e2 <_svfiprintf_r+0x186>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	1d1a      	adds	r2, r3, #4
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	9203      	str	r2, [sp, #12]
 800a284:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a288:	3402      	adds	r4, #2
 800a28a:	9305      	str	r3, [sp, #20]
 800a28c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a350 <_svfiprintf_r+0x1f4>
 800a290:	7821      	ldrb	r1, [r4, #0]
 800a292:	2203      	movs	r2, #3
 800a294:	4650      	mov	r0, sl
 800a296:	f7f5 ffbb 	bl	8000210 <memchr>
 800a29a:	b138      	cbz	r0, 800a2ac <_svfiprintf_r+0x150>
 800a29c:	9b04      	ldr	r3, [sp, #16]
 800a29e:	eba0 000a 	sub.w	r0, r0, sl
 800a2a2:	2240      	movs	r2, #64	@ 0x40
 800a2a4:	4082      	lsls	r2, r0
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	3401      	adds	r4, #1
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b0:	4824      	ldr	r0, [pc, #144]	@ (800a344 <_svfiprintf_r+0x1e8>)
 800a2b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2b6:	2206      	movs	r2, #6
 800a2b8:	f7f5 ffaa 	bl	8000210 <memchr>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d036      	beq.n	800a32e <_svfiprintf_r+0x1d2>
 800a2c0:	4b21      	ldr	r3, [pc, #132]	@ (800a348 <_svfiprintf_r+0x1ec>)
 800a2c2:	bb1b      	cbnz	r3, 800a30c <_svfiprintf_r+0x1b0>
 800a2c4:	9b03      	ldr	r3, [sp, #12]
 800a2c6:	3307      	adds	r3, #7
 800a2c8:	f023 0307 	bic.w	r3, r3, #7
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	9303      	str	r3, [sp, #12]
 800a2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d2:	4433      	add	r3, r6
 800a2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2d6:	e76a      	b.n	800a1ae <_svfiprintf_r+0x52>
 800a2d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2dc:	460c      	mov	r4, r1
 800a2de:	2001      	movs	r0, #1
 800a2e0:	e7a8      	b.n	800a234 <_svfiprintf_r+0xd8>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	3401      	adds	r4, #1
 800a2e6:	9305      	str	r3, [sp, #20]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	f04f 0c0a 	mov.w	ip, #10
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2f4:	3a30      	subs	r2, #48	@ 0x30
 800a2f6:	2a09      	cmp	r2, #9
 800a2f8:	d903      	bls.n	800a302 <_svfiprintf_r+0x1a6>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0c6      	beq.n	800a28c <_svfiprintf_r+0x130>
 800a2fe:	9105      	str	r1, [sp, #20]
 800a300:	e7c4      	b.n	800a28c <_svfiprintf_r+0x130>
 800a302:	fb0c 2101 	mla	r1, ip, r1, r2
 800a306:	4604      	mov	r4, r0
 800a308:	2301      	movs	r3, #1
 800a30a:	e7f0      	b.n	800a2ee <_svfiprintf_r+0x192>
 800a30c:	ab03      	add	r3, sp, #12
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	462a      	mov	r2, r5
 800a312:	4b0e      	ldr	r3, [pc, #56]	@ (800a34c <_svfiprintf_r+0x1f0>)
 800a314:	a904      	add	r1, sp, #16
 800a316:	4638      	mov	r0, r7
 800a318:	f7fc fbc4 	bl	8006aa4 <_printf_float>
 800a31c:	1c42      	adds	r2, r0, #1
 800a31e:	4606      	mov	r6, r0
 800a320:	d1d6      	bne.n	800a2d0 <_svfiprintf_r+0x174>
 800a322:	89ab      	ldrh	r3, [r5, #12]
 800a324:	065b      	lsls	r3, r3, #25
 800a326:	f53f af2d 	bmi.w	800a184 <_svfiprintf_r+0x28>
 800a32a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a32c:	e72c      	b.n	800a188 <_svfiprintf_r+0x2c>
 800a32e:	ab03      	add	r3, sp, #12
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	462a      	mov	r2, r5
 800a334:	4b05      	ldr	r3, [pc, #20]	@ (800a34c <_svfiprintf_r+0x1f0>)
 800a336:	a904      	add	r1, sp, #16
 800a338:	4638      	mov	r0, r7
 800a33a:	f7fc fe4b 	bl	8006fd4 <_printf_i>
 800a33e:	e7ed      	b.n	800a31c <_svfiprintf_r+0x1c0>
 800a340:	0800b5a1 	.word	0x0800b5a1
 800a344:	0800b5ab 	.word	0x0800b5ab
 800a348:	08006aa5 	.word	0x08006aa5
 800a34c:	0800a0a5 	.word	0x0800a0a5
 800a350:	0800b5a7 	.word	0x0800b5a7

0800a354 <__sfputc_r>:
 800a354:	6893      	ldr	r3, [r2, #8]
 800a356:	3b01      	subs	r3, #1
 800a358:	2b00      	cmp	r3, #0
 800a35a:	b410      	push	{r4}
 800a35c:	6093      	str	r3, [r2, #8]
 800a35e:	da08      	bge.n	800a372 <__sfputc_r+0x1e>
 800a360:	6994      	ldr	r4, [r2, #24]
 800a362:	42a3      	cmp	r3, r4
 800a364:	db01      	blt.n	800a36a <__sfputc_r+0x16>
 800a366:	290a      	cmp	r1, #10
 800a368:	d103      	bne.n	800a372 <__sfputc_r+0x1e>
 800a36a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a36e:	f7fd bafa 	b.w	8007966 <__swbuf_r>
 800a372:	6813      	ldr	r3, [r2, #0]
 800a374:	1c58      	adds	r0, r3, #1
 800a376:	6010      	str	r0, [r2, #0]
 800a378:	7019      	strb	r1, [r3, #0]
 800a37a:	4608      	mov	r0, r1
 800a37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <__sfputs_r>:
 800a382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a384:	4606      	mov	r6, r0
 800a386:	460f      	mov	r7, r1
 800a388:	4614      	mov	r4, r2
 800a38a:	18d5      	adds	r5, r2, r3
 800a38c:	42ac      	cmp	r4, r5
 800a38e:	d101      	bne.n	800a394 <__sfputs_r+0x12>
 800a390:	2000      	movs	r0, #0
 800a392:	e007      	b.n	800a3a4 <__sfputs_r+0x22>
 800a394:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a398:	463a      	mov	r2, r7
 800a39a:	4630      	mov	r0, r6
 800a39c:	f7ff ffda 	bl	800a354 <__sfputc_r>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d1f3      	bne.n	800a38c <__sfputs_r+0xa>
 800a3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3a8 <_vfiprintf_r>:
 800a3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ac:	460d      	mov	r5, r1
 800a3ae:	b09d      	sub	sp, #116	@ 0x74
 800a3b0:	4614      	mov	r4, r2
 800a3b2:	4698      	mov	r8, r3
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	b118      	cbz	r0, 800a3c0 <_vfiprintf_r+0x18>
 800a3b8:	6a03      	ldr	r3, [r0, #32]
 800a3ba:	b90b      	cbnz	r3, 800a3c0 <_vfiprintf_r+0x18>
 800a3bc:	f7fd f9ca 	bl	8007754 <__sinit>
 800a3c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3c2:	07d9      	lsls	r1, r3, #31
 800a3c4:	d405      	bmi.n	800a3d2 <_vfiprintf_r+0x2a>
 800a3c6:	89ab      	ldrh	r3, [r5, #12]
 800a3c8:	059a      	lsls	r2, r3, #22
 800a3ca:	d402      	bmi.n	800a3d2 <_vfiprintf_r+0x2a>
 800a3cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3ce:	f7fd fbdc 	bl	8007b8a <__retarget_lock_acquire_recursive>
 800a3d2:	89ab      	ldrh	r3, [r5, #12]
 800a3d4:	071b      	lsls	r3, r3, #28
 800a3d6:	d501      	bpl.n	800a3dc <_vfiprintf_r+0x34>
 800a3d8:	692b      	ldr	r3, [r5, #16]
 800a3da:	b99b      	cbnz	r3, 800a404 <_vfiprintf_r+0x5c>
 800a3dc:	4629      	mov	r1, r5
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f7fd fb00 	bl	80079e4 <__swsetup_r>
 800a3e4:	b170      	cbz	r0, 800a404 <_vfiprintf_r+0x5c>
 800a3e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3e8:	07dc      	lsls	r4, r3, #31
 800a3ea:	d504      	bpl.n	800a3f6 <_vfiprintf_r+0x4e>
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	b01d      	add	sp, #116	@ 0x74
 800a3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f6:	89ab      	ldrh	r3, [r5, #12]
 800a3f8:	0598      	lsls	r0, r3, #22
 800a3fa:	d4f7      	bmi.n	800a3ec <_vfiprintf_r+0x44>
 800a3fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3fe:	f7fd fbc5 	bl	8007b8c <__retarget_lock_release_recursive>
 800a402:	e7f3      	b.n	800a3ec <_vfiprintf_r+0x44>
 800a404:	2300      	movs	r3, #0
 800a406:	9309      	str	r3, [sp, #36]	@ 0x24
 800a408:	2320      	movs	r3, #32
 800a40a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a40e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a412:	2330      	movs	r3, #48	@ 0x30
 800a414:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a5c4 <_vfiprintf_r+0x21c>
 800a418:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a41c:	f04f 0901 	mov.w	r9, #1
 800a420:	4623      	mov	r3, r4
 800a422:	469a      	mov	sl, r3
 800a424:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a428:	b10a      	cbz	r2, 800a42e <_vfiprintf_r+0x86>
 800a42a:	2a25      	cmp	r2, #37	@ 0x25
 800a42c:	d1f9      	bne.n	800a422 <_vfiprintf_r+0x7a>
 800a42e:	ebba 0b04 	subs.w	fp, sl, r4
 800a432:	d00b      	beq.n	800a44c <_vfiprintf_r+0xa4>
 800a434:	465b      	mov	r3, fp
 800a436:	4622      	mov	r2, r4
 800a438:	4629      	mov	r1, r5
 800a43a:	4630      	mov	r0, r6
 800a43c:	f7ff ffa1 	bl	800a382 <__sfputs_r>
 800a440:	3001      	adds	r0, #1
 800a442:	f000 80a7 	beq.w	800a594 <_vfiprintf_r+0x1ec>
 800a446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a448:	445a      	add	r2, fp
 800a44a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a44c:	f89a 3000 	ldrb.w	r3, [sl]
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 809f 	beq.w	800a594 <_vfiprintf_r+0x1ec>
 800a456:	2300      	movs	r3, #0
 800a458:	f04f 32ff 	mov.w	r2, #4294967295
 800a45c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a460:	f10a 0a01 	add.w	sl, sl, #1
 800a464:	9304      	str	r3, [sp, #16]
 800a466:	9307      	str	r3, [sp, #28]
 800a468:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a46c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a46e:	4654      	mov	r4, sl
 800a470:	2205      	movs	r2, #5
 800a472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a476:	4853      	ldr	r0, [pc, #332]	@ (800a5c4 <_vfiprintf_r+0x21c>)
 800a478:	f7f5 feca 	bl	8000210 <memchr>
 800a47c:	9a04      	ldr	r2, [sp, #16]
 800a47e:	b9d8      	cbnz	r0, 800a4b8 <_vfiprintf_r+0x110>
 800a480:	06d1      	lsls	r1, r2, #27
 800a482:	bf44      	itt	mi
 800a484:	2320      	movmi	r3, #32
 800a486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a48a:	0713      	lsls	r3, r2, #28
 800a48c:	bf44      	itt	mi
 800a48e:	232b      	movmi	r3, #43	@ 0x2b
 800a490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a494:	f89a 3000 	ldrb.w	r3, [sl]
 800a498:	2b2a      	cmp	r3, #42	@ 0x2a
 800a49a:	d015      	beq.n	800a4c8 <_vfiprintf_r+0x120>
 800a49c:	9a07      	ldr	r2, [sp, #28]
 800a49e:	4654      	mov	r4, sl
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	f04f 0c0a 	mov.w	ip, #10
 800a4a6:	4621      	mov	r1, r4
 800a4a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4ac:	3b30      	subs	r3, #48	@ 0x30
 800a4ae:	2b09      	cmp	r3, #9
 800a4b0:	d94b      	bls.n	800a54a <_vfiprintf_r+0x1a2>
 800a4b2:	b1b0      	cbz	r0, 800a4e2 <_vfiprintf_r+0x13a>
 800a4b4:	9207      	str	r2, [sp, #28]
 800a4b6:	e014      	b.n	800a4e2 <_vfiprintf_r+0x13a>
 800a4b8:	eba0 0308 	sub.w	r3, r0, r8
 800a4bc:	fa09 f303 	lsl.w	r3, r9, r3
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	9304      	str	r3, [sp, #16]
 800a4c4:	46a2      	mov	sl, r4
 800a4c6:	e7d2      	b.n	800a46e <_vfiprintf_r+0xc6>
 800a4c8:	9b03      	ldr	r3, [sp, #12]
 800a4ca:	1d19      	adds	r1, r3, #4
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	9103      	str	r1, [sp, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	bfbb      	ittet	lt
 800a4d4:	425b      	neglt	r3, r3
 800a4d6:	f042 0202 	orrlt.w	r2, r2, #2
 800a4da:	9307      	strge	r3, [sp, #28]
 800a4dc:	9307      	strlt	r3, [sp, #28]
 800a4de:	bfb8      	it	lt
 800a4e0:	9204      	strlt	r2, [sp, #16]
 800a4e2:	7823      	ldrb	r3, [r4, #0]
 800a4e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4e6:	d10a      	bne.n	800a4fe <_vfiprintf_r+0x156>
 800a4e8:	7863      	ldrb	r3, [r4, #1]
 800a4ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4ec:	d132      	bne.n	800a554 <_vfiprintf_r+0x1ac>
 800a4ee:	9b03      	ldr	r3, [sp, #12]
 800a4f0:	1d1a      	adds	r2, r3, #4
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	9203      	str	r2, [sp, #12]
 800a4f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4fa:	3402      	adds	r4, #2
 800a4fc:	9305      	str	r3, [sp, #20]
 800a4fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a5d4 <_vfiprintf_r+0x22c>
 800a502:	7821      	ldrb	r1, [r4, #0]
 800a504:	2203      	movs	r2, #3
 800a506:	4650      	mov	r0, sl
 800a508:	f7f5 fe82 	bl	8000210 <memchr>
 800a50c:	b138      	cbz	r0, 800a51e <_vfiprintf_r+0x176>
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	eba0 000a 	sub.w	r0, r0, sl
 800a514:	2240      	movs	r2, #64	@ 0x40
 800a516:	4082      	lsls	r2, r0
 800a518:	4313      	orrs	r3, r2
 800a51a:	3401      	adds	r4, #1
 800a51c:	9304      	str	r3, [sp, #16]
 800a51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a522:	4829      	ldr	r0, [pc, #164]	@ (800a5c8 <_vfiprintf_r+0x220>)
 800a524:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a528:	2206      	movs	r2, #6
 800a52a:	f7f5 fe71 	bl	8000210 <memchr>
 800a52e:	2800      	cmp	r0, #0
 800a530:	d03f      	beq.n	800a5b2 <_vfiprintf_r+0x20a>
 800a532:	4b26      	ldr	r3, [pc, #152]	@ (800a5cc <_vfiprintf_r+0x224>)
 800a534:	bb1b      	cbnz	r3, 800a57e <_vfiprintf_r+0x1d6>
 800a536:	9b03      	ldr	r3, [sp, #12]
 800a538:	3307      	adds	r3, #7
 800a53a:	f023 0307 	bic.w	r3, r3, #7
 800a53e:	3308      	adds	r3, #8
 800a540:	9303      	str	r3, [sp, #12]
 800a542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a544:	443b      	add	r3, r7
 800a546:	9309      	str	r3, [sp, #36]	@ 0x24
 800a548:	e76a      	b.n	800a420 <_vfiprintf_r+0x78>
 800a54a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a54e:	460c      	mov	r4, r1
 800a550:	2001      	movs	r0, #1
 800a552:	e7a8      	b.n	800a4a6 <_vfiprintf_r+0xfe>
 800a554:	2300      	movs	r3, #0
 800a556:	3401      	adds	r4, #1
 800a558:	9305      	str	r3, [sp, #20]
 800a55a:	4619      	mov	r1, r3
 800a55c:	f04f 0c0a 	mov.w	ip, #10
 800a560:	4620      	mov	r0, r4
 800a562:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a566:	3a30      	subs	r2, #48	@ 0x30
 800a568:	2a09      	cmp	r2, #9
 800a56a:	d903      	bls.n	800a574 <_vfiprintf_r+0x1cc>
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d0c6      	beq.n	800a4fe <_vfiprintf_r+0x156>
 800a570:	9105      	str	r1, [sp, #20]
 800a572:	e7c4      	b.n	800a4fe <_vfiprintf_r+0x156>
 800a574:	fb0c 2101 	mla	r1, ip, r1, r2
 800a578:	4604      	mov	r4, r0
 800a57a:	2301      	movs	r3, #1
 800a57c:	e7f0      	b.n	800a560 <_vfiprintf_r+0x1b8>
 800a57e:	ab03      	add	r3, sp, #12
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	462a      	mov	r2, r5
 800a584:	4b12      	ldr	r3, [pc, #72]	@ (800a5d0 <_vfiprintf_r+0x228>)
 800a586:	a904      	add	r1, sp, #16
 800a588:	4630      	mov	r0, r6
 800a58a:	f7fc fa8b 	bl	8006aa4 <_printf_float>
 800a58e:	4607      	mov	r7, r0
 800a590:	1c78      	adds	r0, r7, #1
 800a592:	d1d6      	bne.n	800a542 <_vfiprintf_r+0x19a>
 800a594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a596:	07d9      	lsls	r1, r3, #31
 800a598:	d405      	bmi.n	800a5a6 <_vfiprintf_r+0x1fe>
 800a59a:	89ab      	ldrh	r3, [r5, #12]
 800a59c:	059a      	lsls	r2, r3, #22
 800a59e:	d402      	bmi.n	800a5a6 <_vfiprintf_r+0x1fe>
 800a5a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5a2:	f7fd faf3 	bl	8007b8c <__retarget_lock_release_recursive>
 800a5a6:	89ab      	ldrh	r3, [r5, #12]
 800a5a8:	065b      	lsls	r3, r3, #25
 800a5aa:	f53f af1f 	bmi.w	800a3ec <_vfiprintf_r+0x44>
 800a5ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5b0:	e71e      	b.n	800a3f0 <_vfiprintf_r+0x48>
 800a5b2:	ab03      	add	r3, sp, #12
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	462a      	mov	r2, r5
 800a5b8:	4b05      	ldr	r3, [pc, #20]	@ (800a5d0 <_vfiprintf_r+0x228>)
 800a5ba:	a904      	add	r1, sp, #16
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f7fc fd09 	bl	8006fd4 <_printf_i>
 800a5c2:	e7e4      	b.n	800a58e <_vfiprintf_r+0x1e6>
 800a5c4:	0800b5a1 	.word	0x0800b5a1
 800a5c8:	0800b5ab 	.word	0x0800b5ab
 800a5cc:	08006aa5 	.word	0x08006aa5
 800a5d0:	0800a383 	.word	0x0800a383
 800a5d4:	0800b5a7 	.word	0x0800b5a7

0800a5d8 <__sflush_r>:
 800a5d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e0:	0716      	lsls	r6, r2, #28
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	d454      	bmi.n	800a692 <__sflush_r+0xba>
 800a5e8:	684b      	ldr	r3, [r1, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	dc02      	bgt.n	800a5f4 <__sflush_r+0x1c>
 800a5ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	dd48      	ble.n	800a686 <__sflush_r+0xae>
 800a5f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5f6:	2e00      	cmp	r6, #0
 800a5f8:	d045      	beq.n	800a686 <__sflush_r+0xae>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a600:	682f      	ldr	r7, [r5, #0]
 800a602:	6a21      	ldr	r1, [r4, #32]
 800a604:	602b      	str	r3, [r5, #0]
 800a606:	d030      	beq.n	800a66a <__sflush_r+0x92>
 800a608:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	0759      	lsls	r1, r3, #29
 800a60e:	d505      	bpl.n	800a61c <__sflush_r+0x44>
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	1ad2      	subs	r2, r2, r3
 800a614:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a616:	b10b      	cbz	r3, 800a61c <__sflush_r+0x44>
 800a618:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a61a:	1ad2      	subs	r2, r2, r3
 800a61c:	2300      	movs	r3, #0
 800a61e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a620:	6a21      	ldr	r1, [r4, #32]
 800a622:	4628      	mov	r0, r5
 800a624:	47b0      	blx	r6
 800a626:	1c43      	adds	r3, r0, #1
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	d106      	bne.n	800a63a <__sflush_r+0x62>
 800a62c:	6829      	ldr	r1, [r5, #0]
 800a62e:	291d      	cmp	r1, #29
 800a630:	d82b      	bhi.n	800a68a <__sflush_r+0xb2>
 800a632:	4a2a      	ldr	r2, [pc, #168]	@ (800a6dc <__sflush_r+0x104>)
 800a634:	410a      	asrs	r2, r1
 800a636:	07d6      	lsls	r6, r2, #31
 800a638:	d427      	bmi.n	800a68a <__sflush_r+0xb2>
 800a63a:	2200      	movs	r2, #0
 800a63c:	6062      	str	r2, [r4, #4]
 800a63e:	04d9      	lsls	r1, r3, #19
 800a640:	6922      	ldr	r2, [r4, #16]
 800a642:	6022      	str	r2, [r4, #0]
 800a644:	d504      	bpl.n	800a650 <__sflush_r+0x78>
 800a646:	1c42      	adds	r2, r0, #1
 800a648:	d101      	bne.n	800a64e <__sflush_r+0x76>
 800a64a:	682b      	ldr	r3, [r5, #0]
 800a64c:	b903      	cbnz	r3, 800a650 <__sflush_r+0x78>
 800a64e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a652:	602f      	str	r7, [r5, #0]
 800a654:	b1b9      	cbz	r1, 800a686 <__sflush_r+0xae>
 800a656:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a65a:	4299      	cmp	r1, r3
 800a65c:	d002      	beq.n	800a664 <__sflush_r+0x8c>
 800a65e:	4628      	mov	r0, r5
 800a660:	f7fe f8ea 	bl	8008838 <_free_r>
 800a664:	2300      	movs	r3, #0
 800a666:	6363      	str	r3, [r4, #52]	@ 0x34
 800a668:	e00d      	b.n	800a686 <__sflush_r+0xae>
 800a66a:	2301      	movs	r3, #1
 800a66c:	4628      	mov	r0, r5
 800a66e:	47b0      	blx	r6
 800a670:	4602      	mov	r2, r0
 800a672:	1c50      	adds	r0, r2, #1
 800a674:	d1c9      	bne.n	800a60a <__sflush_r+0x32>
 800a676:	682b      	ldr	r3, [r5, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d0c6      	beq.n	800a60a <__sflush_r+0x32>
 800a67c:	2b1d      	cmp	r3, #29
 800a67e:	d001      	beq.n	800a684 <__sflush_r+0xac>
 800a680:	2b16      	cmp	r3, #22
 800a682:	d11e      	bne.n	800a6c2 <__sflush_r+0xea>
 800a684:	602f      	str	r7, [r5, #0]
 800a686:	2000      	movs	r0, #0
 800a688:	e022      	b.n	800a6d0 <__sflush_r+0xf8>
 800a68a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a68e:	b21b      	sxth	r3, r3
 800a690:	e01b      	b.n	800a6ca <__sflush_r+0xf2>
 800a692:	690f      	ldr	r7, [r1, #16]
 800a694:	2f00      	cmp	r7, #0
 800a696:	d0f6      	beq.n	800a686 <__sflush_r+0xae>
 800a698:	0793      	lsls	r3, r2, #30
 800a69a:	680e      	ldr	r6, [r1, #0]
 800a69c:	bf08      	it	eq
 800a69e:	694b      	ldreq	r3, [r1, #20]
 800a6a0:	600f      	str	r7, [r1, #0]
 800a6a2:	bf18      	it	ne
 800a6a4:	2300      	movne	r3, #0
 800a6a6:	eba6 0807 	sub.w	r8, r6, r7
 800a6aa:	608b      	str	r3, [r1, #8]
 800a6ac:	f1b8 0f00 	cmp.w	r8, #0
 800a6b0:	dde9      	ble.n	800a686 <__sflush_r+0xae>
 800a6b2:	6a21      	ldr	r1, [r4, #32]
 800a6b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a6b6:	4643      	mov	r3, r8
 800a6b8:	463a      	mov	r2, r7
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	47b0      	blx	r6
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	dc08      	bgt.n	800a6d4 <__sflush_r+0xfc>
 800a6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6ca:	81a3      	strh	r3, [r4, #12]
 800a6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d4:	4407      	add	r7, r0
 800a6d6:	eba8 0800 	sub.w	r8, r8, r0
 800a6da:	e7e7      	b.n	800a6ac <__sflush_r+0xd4>
 800a6dc:	dfbffffe 	.word	0xdfbffffe

0800a6e0 <_fflush_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	690b      	ldr	r3, [r1, #16]
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	460c      	mov	r4, r1
 800a6e8:	b913      	cbnz	r3, 800a6f0 <_fflush_r+0x10>
 800a6ea:	2500      	movs	r5, #0
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	b118      	cbz	r0, 800a6fa <_fflush_r+0x1a>
 800a6f2:	6a03      	ldr	r3, [r0, #32]
 800a6f4:	b90b      	cbnz	r3, 800a6fa <_fflush_r+0x1a>
 800a6f6:	f7fd f82d 	bl	8007754 <__sinit>
 800a6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0f3      	beq.n	800a6ea <_fflush_r+0xa>
 800a702:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a704:	07d0      	lsls	r0, r2, #31
 800a706:	d404      	bmi.n	800a712 <_fflush_r+0x32>
 800a708:	0599      	lsls	r1, r3, #22
 800a70a:	d402      	bmi.n	800a712 <_fflush_r+0x32>
 800a70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a70e:	f7fd fa3c 	bl	8007b8a <__retarget_lock_acquire_recursive>
 800a712:	4628      	mov	r0, r5
 800a714:	4621      	mov	r1, r4
 800a716:	f7ff ff5f 	bl	800a5d8 <__sflush_r>
 800a71a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a71c:	07da      	lsls	r2, r3, #31
 800a71e:	4605      	mov	r5, r0
 800a720:	d4e4      	bmi.n	800a6ec <_fflush_r+0xc>
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	059b      	lsls	r3, r3, #22
 800a726:	d4e1      	bmi.n	800a6ec <_fflush_r+0xc>
 800a728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a72a:	f7fd fa2f 	bl	8007b8c <__retarget_lock_release_recursive>
 800a72e:	e7dd      	b.n	800a6ec <_fflush_r+0xc>

0800a730 <__swhatbuf_r>:
 800a730:	b570      	push	{r4, r5, r6, lr}
 800a732:	460c      	mov	r4, r1
 800a734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a738:	2900      	cmp	r1, #0
 800a73a:	b096      	sub	sp, #88	@ 0x58
 800a73c:	4615      	mov	r5, r2
 800a73e:	461e      	mov	r6, r3
 800a740:	da0d      	bge.n	800a75e <__swhatbuf_r+0x2e>
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a748:	f04f 0100 	mov.w	r1, #0
 800a74c:	bf14      	ite	ne
 800a74e:	2340      	movne	r3, #64	@ 0x40
 800a750:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a754:	2000      	movs	r0, #0
 800a756:	6031      	str	r1, [r6, #0]
 800a758:	602b      	str	r3, [r5, #0]
 800a75a:	b016      	add	sp, #88	@ 0x58
 800a75c:	bd70      	pop	{r4, r5, r6, pc}
 800a75e:	466a      	mov	r2, sp
 800a760:	f000 f874 	bl	800a84c <_fstat_r>
 800a764:	2800      	cmp	r0, #0
 800a766:	dbec      	blt.n	800a742 <__swhatbuf_r+0x12>
 800a768:	9901      	ldr	r1, [sp, #4]
 800a76a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a76e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a772:	4259      	negs	r1, r3
 800a774:	4159      	adcs	r1, r3
 800a776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a77a:	e7eb      	b.n	800a754 <__swhatbuf_r+0x24>

0800a77c <__smakebuf_r>:
 800a77c:	898b      	ldrh	r3, [r1, #12]
 800a77e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a780:	079d      	lsls	r5, r3, #30
 800a782:	4606      	mov	r6, r0
 800a784:	460c      	mov	r4, r1
 800a786:	d507      	bpl.n	800a798 <__smakebuf_r+0x1c>
 800a788:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	6123      	str	r3, [r4, #16]
 800a790:	2301      	movs	r3, #1
 800a792:	6163      	str	r3, [r4, #20]
 800a794:	b003      	add	sp, #12
 800a796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a798:	ab01      	add	r3, sp, #4
 800a79a:	466a      	mov	r2, sp
 800a79c:	f7ff ffc8 	bl	800a730 <__swhatbuf_r>
 800a7a0:	9f00      	ldr	r7, [sp, #0]
 800a7a2:	4605      	mov	r5, r0
 800a7a4:	4639      	mov	r1, r7
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f7fe f8ba 	bl	8008920 <_malloc_r>
 800a7ac:	b948      	cbnz	r0, 800a7c2 <__smakebuf_r+0x46>
 800a7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b2:	059a      	lsls	r2, r3, #22
 800a7b4:	d4ee      	bmi.n	800a794 <__smakebuf_r+0x18>
 800a7b6:	f023 0303 	bic.w	r3, r3, #3
 800a7ba:	f043 0302 	orr.w	r3, r3, #2
 800a7be:	81a3      	strh	r3, [r4, #12]
 800a7c0:	e7e2      	b.n	800a788 <__smakebuf_r+0xc>
 800a7c2:	89a3      	ldrh	r3, [r4, #12]
 800a7c4:	6020      	str	r0, [r4, #0]
 800a7c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7ca:	81a3      	strh	r3, [r4, #12]
 800a7cc:	9b01      	ldr	r3, [sp, #4]
 800a7ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a7d2:	b15b      	cbz	r3, 800a7ec <__smakebuf_r+0x70>
 800a7d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f000 f849 	bl	800a870 <_isatty_r>
 800a7de:	b128      	cbz	r0, 800a7ec <__smakebuf_r+0x70>
 800a7e0:	89a3      	ldrh	r3, [r4, #12]
 800a7e2:	f023 0303 	bic.w	r3, r3, #3
 800a7e6:	f043 0301 	orr.w	r3, r3, #1
 800a7ea:	81a3      	strh	r3, [r4, #12]
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	431d      	orrs	r5, r3
 800a7f0:	81a5      	strh	r5, [r4, #12]
 800a7f2:	e7cf      	b.n	800a794 <__smakebuf_r+0x18>

0800a7f4 <memmove>:
 800a7f4:	4288      	cmp	r0, r1
 800a7f6:	b510      	push	{r4, lr}
 800a7f8:	eb01 0402 	add.w	r4, r1, r2
 800a7fc:	d902      	bls.n	800a804 <memmove+0x10>
 800a7fe:	4284      	cmp	r4, r0
 800a800:	4623      	mov	r3, r4
 800a802:	d807      	bhi.n	800a814 <memmove+0x20>
 800a804:	1e43      	subs	r3, r0, #1
 800a806:	42a1      	cmp	r1, r4
 800a808:	d008      	beq.n	800a81c <memmove+0x28>
 800a80a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a80e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a812:	e7f8      	b.n	800a806 <memmove+0x12>
 800a814:	4402      	add	r2, r0
 800a816:	4601      	mov	r1, r0
 800a818:	428a      	cmp	r2, r1
 800a81a:	d100      	bne.n	800a81e <memmove+0x2a>
 800a81c:	bd10      	pop	{r4, pc}
 800a81e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a826:	e7f7      	b.n	800a818 <memmove+0x24>

0800a828 <strncmp>:
 800a828:	b510      	push	{r4, lr}
 800a82a:	b16a      	cbz	r2, 800a848 <strncmp+0x20>
 800a82c:	3901      	subs	r1, #1
 800a82e:	1884      	adds	r4, r0, r2
 800a830:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a834:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a838:	429a      	cmp	r2, r3
 800a83a:	d103      	bne.n	800a844 <strncmp+0x1c>
 800a83c:	42a0      	cmp	r0, r4
 800a83e:	d001      	beq.n	800a844 <strncmp+0x1c>
 800a840:	2a00      	cmp	r2, #0
 800a842:	d1f5      	bne.n	800a830 <strncmp+0x8>
 800a844:	1ad0      	subs	r0, r2, r3
 800a846:	bd10      	pop	{r4, pc}
 800a848:	4610      	mov	r0, r2
 800a84a:	e7fc      	b.n	800a846 <strncmp+0x1e>

0800a84c <_fstat_r>:
 800a84c:	b538      	push	{r3, r4, r5, lr}
 800a84e:	4d07      	ldr	r5, [pc, #28]	@ (800a86c <_fstat_r+0x20>)
 800a850:	2300      	movs	r3, #0
 800a852:	4604      	mov	r4, r0
 800a854:	4608      	mov	r0, r1
 800a856:	4611      	mov	r1, r2
 800a858:	602b      	str	r3, [r5, #0]
 800a85a:	f7f7 ff2f 	bl	80026bc <_fstat>
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	d102      	bne.n	800a868 <_fstat_r+0x1c>
 800a862:	682b      	ldr	r3, [r5, #0]
 800a864:	b103      	cbz	r3, 800a868 <_fstat_r+0x1c>
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	bd38      	pop	{r3, r4, r5, pc}
 800a86a:	bf00      	nop
 800a86c:	20000588 	.word	0x20000588

0800a870 <_isatty_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d06      	ldr	r5, [pc, #24]	@ (800a88c <_isatty_r+0x1c>)
 800a874:	2300      	movs	r3, #0
 800a876:	4604      	mov	r4, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	602b      	str	r3, [r5, #0]
 800a87c:	f7f7 ff2e 	bl	80026dc <_isatty>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d102      	bne.n	800a88a <_isatty_r+0x1a>
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	b103      	cbz	r3, 800a88a <_isatty_r+0x1a>
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	20000588 	.word	0x20000588

0800a890 <_sbrk_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4d06      	ldr	r5, [pc, #24]	@ (800a8ac <_sbrk_r+0x1c>)
 800a894:	2300      	movs	r3, #0
 800a896:	4604      	mov	r4, r0
 800a898:	4608      	mov	r0, r1
 800a89a:	602b      	str	r3, [r5, #0]
 800a89c:	f7f7 ff36 	bl	800270c <_sbrk>
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	d102      	bne.n	800a8aa <_sbrk_r+0x1a>
 800a8a4:	682b      	ldr	r3, [r5, #0]
 800a8a6:	b103      	cbz	r3, 800a8aa <_sbrk_r+0x1a>
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}
 800a8ac:	20000588 	.word	0x20000588

0800a8b0 <memcpy>:
 800a8b0:	440a      	add	r2, r1
 800a8b2:	4291      	cmp	r1, r2
 800a8b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8b8:	d100      	bne.n	800a8bc <memcpy+0xc>
 800a8ba:	4770      	bx	lr
 800a8bc:	b510      	push	{r4, lr}
 800a8be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8c6:	4291      	cmp	r1, r2
 800a8c8:	d1f9      	bne.n	800a8be <memcpy+0xe>
 800a8ca:	bd10      	pop	{r4, pc}
 800a8cc:	0000      	movs	r0, r0
	...

0800a8d0 <nan>:
 800a8d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a8d8 <nan+0x8>
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	00000000 	.word	0x00000000
 800a8dc:	7ff80000 	.word	0x7ff80000

0800a8e0 <__assert_func>:
 800a8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8e2:	4614      	mov	r4, r2
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	4b09      	ldr	r3, [pc, #36]	@ (800a90c <__assert_func+0x2c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	68d8      	ldr	r0, [r3, #12]
 800a8ee:	b954      	cbnz	r4, 800a906 <__assert_func+0x26>
 800a8f0:	4b07      	ldr	r3, [pc, #28]	@ (800a910 <__assert_func+0x30>)
 800a8f2:	461c      	mov	r4, r3
 800a8f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8f8:	9100      	str	r1, [sp, #0]
 800a8fa:	462b      	mov	r3, r5
 800a8fc:	4905      	ldr	r1, [pc, #20]	@ (800a914 <__assert_func+0x34>)
 800a8fe:	f000 fba7 	bl	800b050 <fiprintf>
 800a902:	f000 fbb7 	bl	800b074 <abort>
 800a906:	4b04      	ldr	r3, [pc, #16]	@ (800a918 <__assert_func+0x38>)
 800a908:	e7f4      	b.n	800a8f4 <__assert_func+0x14>
 800a90a:	bf00      	nop
 800a90c:	2000002c 	.word	0x2000002c
 800a910:	0800b5f5 	.word	0x0800b5f5
 800a914:	0800b5c7 	.word	0x0800b5c7
 800a918:	0800b5ba 	.word	0x0800b5ba

0800a91c <_calloc_r>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	fba1 5402 	umull	r5, r4, r1, r2
 800a922:	b93c      	cbnz	r4, 800a934 <_calloc_r+0x18>
 800a924:	4629      	mov	r1, r5
 800a926:	f7fd fffb 	bl	8008920 <_malloc_r>
 800a92a:	4606      	mov	r6, r0
 800a92c:	b928      	cbnz	r0, 800a93a <_calloc_r+0x1e>
 800a92e:	2600      	movs	r6, #0
 800a930:	4630      	mov	r0, r6
 800a932:	bd70      	pop	{r4, r5, r6, pc}
 800a934:	220c      	movs	r2, #12
 800a936:	6002      	str	r2, [r0, #0]
 800a938:	e7f9      	b.n	800a92e <_calloc_r+0x12>
 800a93a:	462a      	mov	r2, r5
 800a93c:	4621      	mov	r1, r4
 800a93e:	f7fd f8a7 	bl	8007a90 <memset>
 800a942:	e7f5      	b.n	800a930 <_calloc_r+0x14>

0800a944 <rshift>:
 800a944:	6903      	ldr	r3, [r0, #16]
 800a946:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a94a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a94e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a952:	f100 0414 	add.w	r4, r0, #20
 800a956:	dd45      	ble.n	800a9e4 <rshift+0xa0>
 800a958:	f011 011f 	ands.w	r1, r1, #31
 800a95c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a960:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a964:	d10c      	bne.n	800a980 <rshift+0x3c>
 800a966:	f100 0710 	add.w	r7, r0, #16
 800a96a:	4629      	mov	r1, r5
 800a96c:	42b1      	cmp	r1, r6
 800a96e:	d334      	bcc.n	800a9da <rshift+0x96>
 800a970:	1a9b      	subs	r3, r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	1eea      	subs	r2, r5, #3
 800a976:	4296      	cmp	r6, r2
 800a978:	bf38      	it	cc
 800a97a:	2300      	movcc	r3, #0
 800a97c:	4423      	add	r3, r4
 800a97e:	e015      	b.n	800a9ac <rshift+0x68>
 800a980:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a984:	f1c1 0820 	rsb	r8, r1, #32
 800a988:	40cf      	lsrs	r7, r1
 800a98a:	f105 0e04 	add.w	lr, r5, #4
 800a98e:	46a1      	mov	r9, r4
 800a990:	4576      	cmp	r6, lr
 800a992:	46f4      	mov	ip, lr
 800a994:	d815      	bhi.n	800a9c2 <rshift+0x7e>
 800a996:	1a9a      	subs	r2, r3, r2
 800a998:	0092      	lsls	r2, r2, #2
 800a99a:	3a04      	subs	r2, #4
 800a99c:	3501      	adds	r5, #1
 800a99e:	42ae      	cmp	r6, r5
 800a9a0:	bf38      	it	cc
 800a9a2:	2200      	movcc	r2, #0
 800a9a4:	18a3      	adds	r3, r4, r2
 800a9a6:	50a7      	str	r7, [r4, r2]
 800a9a8:	b107      	cbz	r7, 800a9ac <rshift+0x68>
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	1b1a      	subs	r2, r3, r4
 800a9ae:	42a3      	cmp	r3, r4
 800a9b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a9b4:	bf08      	it	eq
 800a9b6:	2300      	moveq	r3, #0
 800a9b8:	6102      	str	r2, [r0, #16]
 800a9ba:	bf08      	it	eq
 800a9bc:	6143      	streq	r3, [r0, #20]
 800a9be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9c2:	f8dc c000 	ldr.w	ip, [ip]
 800a9c6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a9ca:	ea4c 0707 	orr.w	r7, ip, r7
 800a9ce:	f849 7b04 	str.w	r7, [r9], #4
 800a9d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9d6:	40cf      	lsrs	r7, r1
 800a9d8:	e7da      	b.n	800a990 <rshift+0x4c>
 800a9da:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9de:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9e2:	e7c3      	b.n	800a96c <rshift+0x28>
 800a9e4:	4623      	mov	r3, r4
 800a9e6:	e7e1      	b.n	800a9ac <rshift+0x68>

0800a9e8 <__hexdig_fun>:
 800a9e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a9ec:	2b09      	cmp	r3, #9
 800a9ee:	d802      	bhi.n	800a9f6 <__hexdig_fun+0xe>
 800a9f0:	3820      	subs	r0, #32
 800a9f2:	b2c0      	uxtb	r0, r0
 800a9f4:	4770      	bx	lr
 800a9f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a9fa:	2b05      	cmp	r3, #5
 800a9fc:	d801      	bhi.n	800aa02 <__hexdig_fun+0x1a>
 800a9fe:	3847      	subs	r0, #71	@ 0x47
 800aa00:	e7f7      	b.n	800a9f2 <__hexdig_fun+0xa>
 800aa02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa06:	2b05      	cmp	r3, #5
 800aa08:	d801      	bhi.n	800aa0e <__hexdig_fun+0x26>
 800aa0a:	3827      	subs	r0, #39	@ 0x27
 800aa0c:	e7f1      	b.n	800a9f2 <__hexdig_fun+0xa>
 800aa0e:	2000      	movs	r0, #0
 800aa10:	4770      	bx	lr
	...

0800aa14 <__gethex>:
 800aa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa18:	b085      	sub	sp, #20
 800aa1a:	468a      	mov	sl, r1
 800aa1c:	9302      	str	r3, [sp, #8]
 800aa1e:	680b      	ldr	r3, [r1, #0]
 800aa20:	9001      	str	r0, [sp, #4]
 800aa22:	4690      	mov	r8, r2
 800aa24:	1c9c      	adds	r4, r3, #2
 800aa26:	46a1      	mov	r9, r4
 800aa28:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa2c:	2830      	cmp	r0, #48	@ 0x30
 800aa2e:	d0fa      	beq.n	800aa26 <__gethex+0x12>
 800aa30:	eba9 0303 	sub.w	r3, r9, r3
 800aa34:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa38:	f7ff ffd6 	bl	800a9e8 <__hexdig_fun>
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d168      	bne.n	800ab14 <__gethex+0x100>
 800aa42:	49a0      	ldr	r1, [pc, #640]	@ (800acc4 <__gethex+0x2b0>)
 800aa44:	2201      	movs	r2, #1
 800aa46:	4648      	mov	r0, r9
 800aa48:	f7ff feee 	bl	800a828 <strncmp>
 800aa4c:	4607      	mov	r7, r0
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d167      	bne.n	800ab22 <__gethex+0x10e>
 800aa52:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aa56:	4626      	mov	r6, r4
 800aa58:	f7ff ffc6 	bl	800a9e8 <__hexdig_fun>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d062      	beq.n	800ab26 <__gethex+0x112>
 800aa60:	4623      	mov	r3, r4
 800aa62:	7818      	ldrb	r0, [r3, #0]
 800aa64:	2830      	cmp	r0, #48	@ 0x30
 800aa66:	4699      	mov	r9, r3
 800aa68:	f103 0301 	add.w	r3, r3, #1
 800aa6c:	d0f9      	beq.n	800aa62 <__gethex+0x4e>
 800aa6e:	f7ff ffbb 	bl	800a9e8 <__hexdig_fun>
 800aa72:	fab0 f580 	clz	r5, r0
 800aa76:	096d      	lsrs	r5, r5, #5
 800aa78:	f04f 0b01 	mov.w	fp, #1
 800aa7c:	464a      	mov	r2, r9
 800aa7e:	4616      	mov	r6, r2
 800aa80:	3201      	adds	r2, #1
 800aa82:	7830      	ldrb	r0, [r6, #0]
 800aa84:	f7ff ffb0 	bl	800a9e8 <__hexdig_fun>
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d1f8      	bne.n	800aa7e <__gethex+0x6a>
 800aa8c:	498d      	ldr	r1, [pc, #564]	@ (800acc4 <__gethex+0x2b0>)
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4630      	mov	r0, r6
 800aa92:	f7ff fec9 	bl	800a828 <strncmp>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d13f      	bne.n	800ab1a <__gethex+0x106>
 800aa9a:	b944      	cbnz	r4, 800aaae <__gethex+0x9a>
 800aa9c:	1c74      	adds	r4, r6, #1
 800aa9e:	4622      	mov	r2, r4
 800aaa0:	4616      	mov	r6, r2
 800aaa2:	3201      	adds	r2, #1
 800aaa4:	7830      	ldrb	r0, [r6, #0]
 800aaa6:	f7ff ff9f 	bl	800a9e8 <__hexdig_fun>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d1f8      	bne.n	800aaa0 <__gethex+0x8c>
 800aaae:	1ba4      	subs	r4, r4, r6
 800aab0:	00a7      	lsls	r7, r4, #2
 800aab2:	7833      	ldrb	r3, [r6, #0]
 800aab4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aab8:	2b50      	cmp	r3, #80	@ 0x50
 800aaba:	d13e      	bne.n	800ab3a <__gethex+0x126>
 800aabc:	7873      	ldrb	r3, [r6, #1]
 800aabe:	2b2b      	cmp	r3, #43	@ 0x2b
 800aac0:	d033      	beq.n	800ab2a <__gethex+0x116>
 800aac2:	2b2d      	cmp	r3, #45	@ 0x2d
 800aac4:	d034      	beq.n	800ab30 <__gethex+0x11c>
 800aac6:	1c71      	adds	r1, r6, #1
 800aac8:	2400      	movs	r4, #0
 800aaca:	7808      	ldrb	r0, [r1, #0]
 800aacc:	f7ff ff8c 	bl	800a9e8 <__hexdig_fun>
 800aad0:	1e43      	subs	r3, r0, #1
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	2b18      	cmp	r3, #24
 800aad6:	d830      	bhi.n	800ab3a <__gethex+0x126>
 800aad8:	f1a0 0210 	sub.w	r2, r0, #16
 800aadc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aae0:	f7ff ff82 	bl	800a9e8 <__hexdig_fun>
 800aae4:	f100 3cff 	add.w	ip, r0, #4294967295
 800aae8:	fa5f fc8c 	uxtb.w	ip, ip
 800aaec:	f1bc 0f18 	cmp.w	ip, #24
 800aaf0:	f04f 030a 	mov.w	r3, #10
 800aaf4:	d91e      	bls.n	800ab34 <__gethex+0x120>
 800aaf6:	b104      	cbz	r4, 800aafa <__gethex+0xe6>
 800aaf8:	4252      	negs	r2, r2
 800aafa:	4417      	add	r7, r2
 800aafc:	f8ca 1000 	str.w	r1, [sl]
 800ab00:	b1ed      	cbz	r5, 800ab3e <__gethex+0x12a>
 800ab02:	f1bb 0f00 	cmp.w	fp, #0
 800ab06:	bf0c      	ite	eq
 800ab08:	2506      	moveq	r5, #6
 800ab0a:	2500      	movne	r5, #0
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	b005      	add	sp, #20
 800ab10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab14:	2500      	movs	r5, #0
 800ab16:	462c      	mov	r4, r5
 800ab18:	e7b0      	b.n	800aa7c <__gethex+0x68>
 800ab1a:	2c00      	cmp	r4, #0
 800ab1c:	d1c7      	bne.n	800aaae <__gethex+0x9a>
 800ab1e:	4627      	mov	r7, r4
 800ab20:	e7c7      	b.n	800aab2 <__gethex+0x9e>
 800ab22:	464e      	mov	r6, r9
 800ab24:	462f      	mov	r7, r5
 800ab26:	2501      	movs	r5, #1
 800ab28:	e7c3      	b.n	800aab2 <__gethex+0x9e>
 800ab2a:	2400      	movs	r4, #0
 800ab2c:	1cb1      	adds	r1, r6, #2
 800ab2e:	e7cc      	b.n	800aaca <__gethex+0xb6>
 800ab30:	2401      	movs	r4, #1
 800ab32:	e7fb      	b.n	800ab2c <__gethex+0x118>
 800ab34:	fb03 0002 	mla	r0, r3, r2, r0
 800ab38:	e7ce      	b.n	800aad8 <__gethex+0xc4>
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	e7de      	b.n	800aafc <__gethex+0xe8>
 800ab3e:	eba6 0309 	sub.w	r3, r6, r9
 800ab42:	3b01      	subs	r3, #1
 800ab44:	4629      	mov	r1, r5
 800ab46:	2b07      	cmp	r3, #7
 800ab48:	dc0a      	bgt.n	800ab60 <__gethex+0x14c>
 800ab4a:	9801      	ldr	r0, [sp, #4]
 800ab4c:	f7fd ff74 	bl	8008a38 <_Balloc>
 800ab50:	4604      	mov	r4, r0
 800ab52:	b940      	cbnz	r0, 800ab66 <__gethex+0x152>
 800ab54:	4b5c      	ldr	r3, [pc, #368]	@ (800acc8 <__gethex+0x2b4>)
 800ab56:	4602      	mov	r2, r0
 800ab58:	21e4      	movs	r1, #228	@ 0xe4
 800ab5a:	485c      	ldr	r0, [pc, #368]	@ (800accc <__gethex+0x2b8>)
 800ab5c:	f7ff fec0 	bl	800a8e0 <__assert_func>
 800ab60:	3101      	adds	r1, #1
 800ab62:	105b      	asrs	r3, r3, #1
 800ab64:	e7ef      	b.n	800ab46 <__gethex+0x132>
 800ab66:	f100 0a14 	add.w	sl, r0, #20
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	4655      	mov	r5, sl
 800ab6e:	469b      	mov	fp, r3
 800ab70:	45b1      	cmp	r9, r6
 800ab72:	d337      	bcc.n	800abe4 <__gethex+0x1d0>
 800ab74:	f845 bb04 	str.w	fp, [r5], #4
 800ab78:	eba5 050a 	sub.w	r5, r5, sl
 800ab7c:	10ad      	asrs	r5, r5, #2
 800ab7e:	6125      	str	r5, [r4, #16]
 800ab80:	4658      	mov	r0, fp
 800ab82:	f7fe f84b 	bl	8008c1c <__hi0bits>
 800ab86:	016d      	lsls	r5, r5, #5
 800ab88:	f8d8 6000 	ldr.w	r6, [r8]
 800ab8c:	1a2d      	subs	r5, r5, r0
 800ab8e:	42b5      	cmp	r5, r6
 800ab90:	dd54      	ble.n	800ac3c <__gethex+0x228>
 800ab92:	1bad      	subs	r5, r5, r6
 800ab94:	4629      	mov	r1, r5
 800ab96:	4620      	mov	r0, r4
 800ab98:	f7fe fbdf 	bl	800935a <__any_on>
 800ab9c:	4681      	mov	r9, r0
 800ab9e:	b178      	cbz	r0, 800abc0 <__gethex+0x1ac>
 800aba0:	1e6b      	subs	r3, r5, #1
 800aba2:	1159      	asrs	r1, r3, #5
 800aba4:	f003 021f 	and.w	r2, r3, #31
 800aba8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800abac:	f04f 0901 	mov.w	r9, #1
 800abb0:	fa09 f202 	lsl.w	r2, r9, r2
 800abb4:	420a      	tst	r2, r1
 800abb6:	d003      	beq.n	800abc0 <__gethex+0x1ac>
 800abb8:	454b      	cmp	r3, r9
 800abba:	dc36      	bgt.n	800ac2a <__gethex+0x216>
 800abbc:	f04f 0902 	mov.w	r9, #2
 800abc0:	4629      	mov	r1, r5
 800abc2:	4620      	mov	r0, r4
 800abc4:	f7ff febe 	bl	800a944 <rshift>
 800abc8:	442f      	add	r7, r5
 800abca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abce:	42bb      	cmp	r3, r7
 800abd0:	da42      	bge.n	800ac58 <__gethex+0x244>
 800abd2:	9801      	ldr	r0, [sp, #4]
 800abd4:	4621      	mov	r1, r4
 800abd6:	f7fd ff6f 	bl	8008ab8 <_Bfree>
 800abda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abdc:	2300      	movs	r3, #0
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	25a3      	movs	r5, #163	@ 0xa3
 800abe2:	e793      	b.n	800ab0c <__gethex+0xf8>
 800abe4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800abe8:	2a2e      	cmp	r2, #46	@ 0x2e
 800abea:	d012      	beq.n	800ac12 <__gethex+0x1fe>
 800abec:	2b20      	cmp	r3, #32
 800abee:	d104      	bne.n	800abfa <__gethex+0x1e6>
 800abf0:	f845 bb04 	str.w	fp, [r5], #4
 800abf4:	f04f 0b00 	mov.w	fp, #0
 800abf8:	465b      	mov	r3, fp
 800abfa:	7830      	ldrb	r0, [r6, #0]
 800abfc:	9303      	str	r3, [sp, #12]
 800abfe:	f7ff fef3 	bl	800a9e8 <__hexdig_fun>
 800ac02:	9b03      	ldr	r3, [sp, #12]
 800ac04:	f000 000f 	and.w	r0, r0, #15
 800ac08:	4098      	lsls	r0, r3
 800ac0a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac0e:	3304      	adds	r3, #4
 800ac10:	e7ae      	b.n	800ab70 <__gethex+0x15c>
 800ac12:	45b1      	cmp	r9, r6
 800ac14:	d8ea      	bhi.n	800abec <__gethex+0x1d8>
 800ac16:	492b      	ldr	r1, [pc, #172]	@ (800acc4 <__gethex+0x2b0>)
 800ac18:	9303      	str	r3, [sp, #12]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7ff fe03 	bl	800a828 <strncmp>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d1e1      	bne.n	800abec <__gethex+0x1d8>
 800ac28:	e7a2      	b.n	800ab70 <__gethex+0x15c>
 800ac2a:	1ea9      	subs	r1, r5, #2
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f7fe fb94 	bl	800935a <__any_on>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d0c2      	beq.n	800abbc <__gethex+0x1a8>
 800ac36:	f04f 0903 	mov.w	r9, #3
 800ac3a:	e7c1      	b.n	800abc0 <__gethex+0x1ac>
 800ac3c:	da09      	bge.n	800ac52 <__gethex+0x23e>
 800ac3e:	1b75      	subs	r5, r6, r5
 800ac40:	4621      	mov	r1, r4
 800ac42:	9801      	ldr	r0, [sp, #4]
 800ac44:	462a      	mov	r2, r5
 800ac46:	f7fe f94f 	bl	8008ee8 <__lshift>
 800ac4a:	1b7f      	subs	r7, r7, r5
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	f100 0a14 	add.w	sl, r0, #20
 800ac52:	f04f 0900 	mov.w	r9, #0
 800ac56:	e7b8      	b.n	800abca <__gethex+0x1b6>
 800ac58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac5c:	42bd      	cmp	r5, r7
 800ac5e:	dd6f      	ble.n	800ad40 <__gethex+0x32c>
 800ac60:	1bed      	subs	r5, r5, r7
 800ac62:	42ae      	cmp	r6, r5
 800ac64:	dc34      	bgt.n	800acd0 <__gethex+0x2bc>
 800ac66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d022      	beq.n	800acb4 <__gethex+0x2a0>
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d024      	beq.n	800acbc <__gethex+0x2a8>
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d115      	bne.n	800aca2 <__gethex+0x28e>
 800ac76:	42ae      	cmp	r6, r5
 800ac78:	d113      	bne.n	800aca2 <__gethex+0x28e>
 800ac7a:	2e01      	cmp	r6, #1
 800ac7c:	d10b      	bne.n	800ac96 <__gethex+0x282>
 800ac7e:	9a02      	ldr	r2, [sp, #8]
 800ac80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac84:	6013      	str	r3, [r2, #0]
 800ac86:	2301      	movs	r3, #1
 800ac88:	6123      	str	r3, [r4, #16]
 800ac8a:	f8ca 3000 	str.w	r3, [sl]
 800ac8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac90:	2562      	movs	r5, #98	@ 0x62
 800ac92:	601c      	str	r4, [r3, #0]
 800ac94:	e73a      	b.n	800ab0c <__gethex+0xf8>
 800ac96:	1e71      	subs	r1, r6, #1
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f7fe fb5e 	bl	800935a <__any_on>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d1ed      	bne.n	800ac7e <__gethex+0x26a>
 800aca2:	9801      	ldr	r0, [sp, #4]
 800aca4:	4621      	mov	r1, r4
 800aca6:	f7fd ff07 	bl	8008ab8 <_Bfree>
 800acaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acac:	2300      	movs	r3, #0
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	2550      	movs	r5, #80	@ 0x50
 800acb2:	e72b      	b.n	800ab0c <__gethex+0xf8>
 800acb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1f3      	bne.n	800aca2 <__gethex+0x28e>
 800acba:	e7e0      	b.n	800ac7e <__gethex+0x26a>
 800acbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1dd      	bne.n	800ac7e <__gethex+0x26a>
 800acc2:	e7ee      	b.n	800aca2 <__gethex+0x28e>
 800acc4:	0800b448 	.word	0x0800b448
 800acc8:	0800b2dd 	.word	0x0800b2dd
 800accc:	0800b5f6 	.word	0x0800b5f6
 800acd0:	1e6f      	subs	r7, r5, #1
 800acd2:	f1b9 0f00 	cmp.w	r9, #0
 800acd6:	d130      	bne.n	800ad3a <__gethex+0x326>
 800acd8:	b127      	cbz	r7, 800ace4 <__gethex+0x2d0>
 800acda:	4639      	mov	r1, r7
 800acdc:	4620      	mov	r0, r4
 800acde:	f7fe fb3c 	bl	800935a <__any_on>
 800ace2:	4681      	mov	r9, r0
 800ace4:	117a      	asrs	r2, r7, #5
 800ace6:	2301      	movs	r3, #1
 800ace8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800acec:	f007 071f 	and.w	r7, r7, #31
 800acf0:	40bb      	lsls	r3, r7
 800acf2:	4213      	tst	r3, r2
 800acf4:	4629      	mov	r1, r5
 800acf6:	4620      	mov	r0, r4
 800acf8:	bf18      	it	ne
 800acfa:	f049 0902 	orrne.w	r9, r9, #2
 800acfe:	f7ff fe21 	bl	800a944 <rshift>
 800ad02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad06:	1b76      	subs	r6, r6, r5
 800ad08:	2502      	movs	r5, #2
 800ad0a:	f1b9 0f00 	cmp.w	r9, #0
 800ad0e:	d047      	beq.n	800ada0 <__gethex+0x38c>
 800ad10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d015      	beq.n	800ad44 <__gethex+0x330>
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d017      	beq.n	800ad4c <__gethex+0x338>
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d109      	bne.n	800ad34 <__gethex+0x320>
 800ad20:	f019 0f02 	tst.w	r9, #2
 800ad24:	d006      	beq.n	800ad34 <__gethex+0x320>
 800ad26:	f8da 3000 	ldr.w	r3, [sl]
 800ad2a:	ea49 0903 	orr.w	r9, r9, r3
 800ad2e:	f019 0f01 	tst.w	r9, #1
 800ad32:	d10e      	bne.n	800ad52 <__gethex+0x33e>
 800ad34:	f045 0510 	orr.w	r5, r5, #16
 800ad38:	e032      	b.n	800ada0 <__gethex+0x38c>
 800ad3a:	f04f 0901 	mov.w	r9, #1
 800ad3e:	e7d1      	b.n	800ace4 <__gethex+0x2d0>
 800ad40:	2501      	movs	r5, #1
 800ad42:	e7e2      	b.n	800ad0a <__gethex+0x2f6>
 800ad44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad46:	f1c3 0301 	rsb	r3, r3, #1
 800ad4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0f0      	beq.n	800ad34 <__gethex+0x320>
 800ad52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad56:	f104 0314 	add.w	r3, r4, #20
 800ad5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ad62:	f04f 0c00 	mov.w	ip, #0
 800ad66:	4618      	mov	r0, r3
 800ad68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad70:	d01b      	beq.n	800adaa <__gethex+0x396>
 800ad72:	3201      	adds	r2, #1
 800ad74:	6002      	str	r2, [r0, #0]
 800ad76:	2d02      	cmp	r5, #2
 800ad78:	f104 0314 	add.w	r3, r4, #20
 800ad7c:	d13c      	bne.n	800adf8 <__gethex+0x3e4>
 800ad7e:	f8d8 2000 	ldr.w	r2, [r8]
 800ad82:	3a01      	subs	r2, #1
 800ad84:	42b2      	cmp	r2, r6
 800ad86:	d109      	bne.n	800ad9c <__gethex+0x388>
 800ad88:	1171      	asrs	r1, r6, #5
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad90:	f006 061f 	and.w	r6, r6, #31
 800ad94:	fa02 f606 	lsl.w	r6, r2, r6
 800ad98:	421e      	tst	r6, r3
 800ad9a:	d13a      	bne.n	800ae12 <__gethex+0x3fe>
 800ad9c:	f045 0520 	orr.w	r5, r5, #32
 800ada0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ada2:	601c      	str	r4, [r3, #0]
 800ada4:	9b02      	ldr	r3, [sp, #8]
 800ada6:	601f      	str	r7, [r3, #0]
 800ada8:	e6b0      	b.n	800ab0c <__gethex+0xf8>
 800adaa:	4299      	cmp	r1, r3
 800adac:	f843 cc04 	str.w	ip, [r3, #-4]
 800adb0:	d8d9      	bhi.n	800ad66 <__gethex+0x352>
 800adb2:	68a3      	ldr	r3, [r4, #8]
 800adb4:	459b      	cmp	fp, r3
 800adb6:	db17      	blt.n	800ade8 <__gethex+0x3d4>
 800adb8:	6861      	ldr	r1, [r4, #4]
 800adba:	9801      	ldr	r0, [sp, #4]
 800adbc:	3101      	adds	r1, #1
 800adbe:	f7fd fe3b 	bl	8008a38 <_Balloc>
 800adc2:	4681      	mov	r9, r0
 800adc4:	b918      	cbnz	r0, 800adce <__gethex+0x3ba>
 800adc6:	4b1a      	ldr	r3, [pc, #104]	@ (800ae30 <__gethex+0x41c>)
 800adc8:	4602      	mov	r2, r0
 800adca:	2184      	movs	r1, #132	@ 0x84
 800adcc:	e6c5      	b.n	800ab5a <__gethex+0x146>
 800adce:	6922      	ldr	r2, [r4, #16]
 800add0:	3202      	adds	r2, #2
 800add2:	f104 010c 	add.w	r1, r4, #12
 800add6:	0092      	lsls	r2, r2, #2
 800add8:	300c      	adds	r0, #12
 800adda:	f7ff fd69 	bl	800a8b0 <memcpy>
 800adde:	4621      	mov	r1, r4
 800ade0:	9801      	ldr	r0, [sp, #4]
 800ade2:	f7fd fe69 	bl	8008ab8 <_Bfree>
 800ade6:	464c      	mov	r4, r9
 800ade8:	6923      	ldr	r3, [r4, #16]
 800adea:	1c5a      	adds	r2, r3, #1
 800adec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800adf0:	6122      	str	r2, [r4, #16]
 800adf2:	2201      	movs	r2, #1
 800adf4:	615a      	str	r2, [r3, #20]
 800adf6:	e7be      	b.n	800ad76 <__gethex+0x362>
 800adf8:	6922      	ldr	r2, [r4, #16]
 800adfa:	455a      	cmp	r2, fp
 800adfc:	dd0b      	ble.n	800ae16 <__gethex+0x402>
 800adfe:	2101      	movs	r1, #1
 800ae00:	4620      	mov	r0, r4
 800ae02:	f7ff fd9f 	bl	800a944 <rshift>
 800ae06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae0a:	3701      	adds	r7, #1
 800ae0c:	42bb      	cmp	r3, r7
 800ae0e:	f6ff aee0 	blt.w	800abd2 <__gethex+0x1be>
 800ae12:	2501      	movs	r5, #1
 800ae14:	e7c2      	b.n	800ad9c <__gethex+0x388>
 800ae16:	f016 061f 	ands.w	r6, r6, #31
 800ae1a:	d0fa      	beq.n	800ae12 <__gethex+0x3fe>
 800ae1c:	4453      	add	r3, sl
 800ae1e:	f1c6 0620 	rsb	r6, r6, #32
 800ae22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae26:	f7fd fef9 	bl	8008c1c <__hi0bits>
 800ae2a:	42b0      	cmp	r0, r6
 800ae2c:	dbe7      	blt.n	800adfe <__gethex+0x3ea>
 800ae2e:	e7f0      	b.n	800ae12 <__gethex+0x3fe>
 800ae30:	0800b2dd 	.word	0x0800b2dd

0800ae34 <L_shift>:
 800ae34:	f1c2 0208 	rsb	r2, r2, #8
 800ae38:	0092      	lsls	r2, r2, #2
 800ae3a:	b570      	push	{r4, r5, r6, lr}
 800ae3c:	f1c2 0620 	rsb	r6, r2, #32
 800ae40:	6843      	ldr	r3, [r0, #4]
 800ae42:	6804      	ldr	r4, [r0, #0]
 800ae44:	fa03 f506 	lsl.w	r5, r3, r6
 800ae48:	432c      	orrs	r4, r5
 800ae4a:	40d3      	lsrs	r3, r2
 800ae4c:	6004      	str	r4, [r0, #0]
 800ae4e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae52:	4288      	cmp	r0, r1
 800ae54:	d3f4      	bcc.n	800ae40 <L_shift+0xc>
 800ae56:	bd70      	pop	{r4, r5, r6, pc}

0800ae58 <__match>:
 800ae58:	b530      	push	{r4, r5, lr}
 800ae5a:	6803      	ldr	r3, [r0, #0]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae62:	b914      	cbnz	r4, 800ae6a <__match+0x12>
 800ae64:	6003      	str	r3, [r0, #0]
 800ae66:	2001      	movs	r0, #1
 800ae68:	bd30      	pop	{r4, r5, pc}
 800ae6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ae72:	2d19      	cmp	r5, #25
 800ae74:	bf98      	it	ls
 800ae76:	3220      	addls	r2, #32
 800ae78:	42a2      	cmp	r2, r4
 800ae7a:	d0f0      	beq.n	800ae5e <__match+0x6>
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	e7f3      	b.n	800ae68 <__match+0x10>

0800ae80 <__hexnan>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	680b      	ldr	r3, [r1, #0]
 800ae86:	6801      	ldr	r1, [r0, #0]
 800ae88:	115e      	asrs	r6, r3, #5
 800ae8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae8e:	f013 031f 	ands.w	r3, r3, #31
 800ae92:	b087      	sub	sp, #28
 800ae94:	bf18      	it	ne
 800ae96:	3604      	addne	r6, #4
 800ae98:	2500      	movs	r5, #0
 800ae9a:	1f37      	subs	r7, r6, #4
 800ae9c:	4682      	mov	sl, r0
 800ae9e:	4690      	mov	r8, r2
 800aea0:	9301      	str	r3, [sp, #4]
 800aea2:	f846 5c04 	str.w	r5, [r6, #-4]
 800aea6:	46b9      	mov	r9, r7
 800aea8:	463c      	mov	r4, r7
 800aeaa:	9502      	str	r5, [sp, #8]
 800aeac:	46ab      	mov	fp, r5
 800aeae:	784a      	ldrb	r2, [r1, #1]
 800aeb0:	1c4b      	adds	r3, r1, #1
 800aeb2:	9303      	str	r3, [sp, #12]
 800aeb4:	b342      	cbz	r2, 800af08 <__hexnan+0x88>
 800aeb6:	4610      	mov	r0, r2
 800aeb8:	9105      	str	r1, [sp, #20]
 800aeba:	9204      	str	r2, [sp, #16]
 800aebc:	f7ff fd94 	bl	800a9e8 <__hexdig_fun>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d151      	bne.n	800af68 <__hexnan+0xe8>
 800aec4:	9a04      	ldr	r2, [sp, #16]
 800aec6:	9905      	ldr	r1, [sp, #20]
 800aec8:	2a20      	cmp	r2, #32
 800aeca:	d818      	bhi.n	800aefe <__hexnan+0x7e>
 800aecc:	9b02      	ldr	r3, [sp, #8]
 800aece:	459b      	cmp	fp, r3
 800aed0:	dd13      	ble.n	800aefa <__hexnan+0x7a>
 800aed2:	454c      	cmp	r4, r9
 800aed4:	d206      	bcs.n	800aee4 <__hexnan+0x64>
 800aed6:	2d07      	cmp	r5, #7
 800aed8:	dc04      	bgt.n	800aee4 <__hexnan+0x64>
 800aeda:	462a      	mov	r2, r5
 800aedc:	4649      	mov	r1, r9
 800aede:	4620      	mov	r0, r4
 800aee0:	f7ff ffa8 	bl	800ae34 <L_shift>
 800aee4:	4544      	cmp	r4, r8
 800aee6:	d952      	bls.n	800af8e <__hexnan+0x10e>
 800aee8:	2300      	movs	r3, #0
 800aeea:	f1a4 0904 	sub.w	r9, r4, #4
 800aeee:	f844 3c04 	str.w	r3, [r4, #-4]
 800aef2:	f8cd b008 	str.w	fp, [sp, #8]
 800aef6:	464c      	mov	r4, r9
 800aef8:	461d      	mov	r5, r3
 800aefa:	9903      	ldr	r1, [sp, #12]
 800aefc:	e7d7      	b.n	800aeae <__hexnan+0x2e>
 800aefe:	2a29      	cmp	r2, #41	@ 0x29
 800af00:	d157      	bne.n	800afb2 <__hexnan+0x132>
 800af02:	3102      	adds	r1, #2
 800af04:	f8ca 1000 	str.w	r1, [sl]
 800af08:	f1bb 0f00 	cmp.w	fp, #0
 800af0c:	d051      	beq.n	800afb2 <__hexnan+0x132>
 800af0e:	454c      	cmp	r4, r9
 800af10:	d206      	bcs.n	800af20 <__hexnan+0xa0>
 800af12:	2d07      	cmp	r5, #7
 800af14:	dc04      	bgt.n	800af20 <__hexnan+0xa0>
 800af16:	462a      	mov	r2, r5
 800af18:	4649      	mov	r1, r9
 800af1a:	4620      	mov	r0, r4
 800af1c:	f7ff ff8a 	bl	800ae34 <L_shift>
 800af20:	4544      	cmp	r4, r8
 800af22:	d936      	bls.n	800af92 <__hexnan+0x112>
 800af24:	f1a8 0204 	sub.w	r2, r8, #4
 800af28:	4623      	mov	r3, r4
 800af2a:	f853 1b04 	ldr.w	r1, [r3], #4
 800af2e:	f842 1f04 	str.w	r1, [r2, #4]!
 800af32:	429f      	cmp	r7, r3
 800af34:	d2f9      	bcs.n	800af2a <__hexnan+0xaa>
 800af36:	1b3b      	subs	r3, r7, r4
 800af38:	f023 0303 	bic.w	r3, r3, #3
 800af3c:	3304      	adds	r3, #4
 800af3e:	3401      	adds	r4, #1
 800af40:	3e03      	subs	r6, #3
 800af42:	42b4      	cmp	r4, r6
 800af44:	bf88      	it	hi
 800af46:	2304      	movhi	r3, #4
 800af48:	4443      	add	r3, r8
 800af4a:	2200      	movs	r2, #0
 800af4c:	f843 2b04 	str.w	r2, [r3], #4
 800af50:	429f      	cmp	r7, r3
 800af52:	d2fb      	bcs.n	800af4c <__hexnan+0xcc>
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	b91b      	cbnz	r3, 800af60 <__hexnan+0xe0>
 800af58:	4547      	cmp	r7, r8
 800af5a:	d128      	bne.n	800afae <__hexnan+0x12e>
 800af5c:	2301      	movs	r3, #1
 800af5e:	603b      	str	r3, [r7, #0]
 800af60:	2005      	movs	r0, #5
 800af62:	b007      	add	sp, #28
 800af64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af68:	3501      	adds	r5, #1
 800af6a:	2d08      	cmp	r5, #8
 800af6c:	f10b 0b01 	add.w	fp, fp, #1
 800af70:	dd06      	ble.n	800af80 <__hexnan+0x100>
 800af72:	4544      	cmp	r4, r8
 800af74:	d9c1      	bls.n	800aefa <__hexnan+0x7a>
 800af76:	2300      	movs	r3, #0
 800af78:	f844 3c04 	str.w	r3, [r4, #-4]
 800af7c:	2501      	movs	r5, #1
 800af7e:	3c04      	subs	r4, #4
 800af80:	6822      	ldr	r2, [r4, #0]
 800af82:	f000 000f 	and.w	r0, r0, #15
 800af86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af8a:	6020      	str	r0, [r4, #0]
 800af8c:	e7b5      	b.n	800aefa <__hexnan+0x7a>
 800af8e:	2508      	movs	r5, #8
 800af90:	e7b3      	b.n	800aefa <__hexnan+0x7a>
 800af92:	9b01      	ldr	r3, [sp, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d0dd      	beq.n	800af54 <__hexnan+0xd4>
 800af98:	f1c3 0320 	rsb	r3, r3, #32
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295
 800afa0:	40da      	lsrs	r2, r3
 800afa2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800afa6:	4013      	ands	r3, r2
 800afa8:	f846 3c04 	str.w	r3, [r6, #-4]
 800afac:	e7d2      	b.n	800af54 <__hexnan+0xd4>
 800afae:	3f04      	subs	r7, #4
 800afb0:	e7d0      	b.n	800af54 <__hexnan+0xd4>
 800afb2:	2004      	movs	r0, #4
 800afb4:	e7d5      	b.n	800af62 <__hexnan+0xe2>

0800afb6 <__ascii_mbtowc>:
 800afb6:	b082      	sub	sp, #8
 800afb8:	b901      	cbnz	r1, 800afbc <__ascii_mbtowc+0x6>
 800afba:	a901      	add	r1, sp, #4
 800afbc:	b142      	cbz	r2, 800afd0 <__ascii_mbtowc+0x1a>
 800afbe:	b14b      	cbz	r3, 800afd4 <__ascii_mbtowc+0x1e>
 800afc0:	7813      	ldrb	r3, [r2, #0]
 800afc2:	600b      	str	r3, [r1, #0]
 800afc4:	7812      	ldrb	r2, [r2, #0]
 800afc6:	1e10      	subs	r0, r2, #0
 800afc8:	bf18      	it	ne
 800afca:	2001      	movne	r0, #1
 800afcc:	b002      	add	sp, #8
 800afce:	4770      	bx	lr
 800afd0:	4610      	mov	r0, r2
 800afd2:	e7fb      	b.n	800afcc <__ascii_mbtowc+0x16>
 800afd4:	f06f 0001 	mvn.w	r0, #1
 800afd8:	e7f8      	b.n	800afcc <__ascii_mbtowc+0x16>

0800afda <_realloc_r>:
 800afda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afde:	4680      	mov	r8, r0
 800afe0:	4615      	mov	r5, r2
 800afe2:	460c      	mov	r4, r1
 800afe4:	b921      	cbnz	r1, 800aff0 <_realloc_r+0x16>
 800afe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afea:	4611      	mov	r1, r2
 800afec:	f7fd bc98 	b.w	8008920 <_malloc_r>
 800aff0:	b92a      	cbnz	r2, 800affe <_realloc_r+0x24>
 800aff2:	f7fd fc21 	bl	8008838 <_free_r>
 800aff6:	2400      	movs	r4, #0
 800aff8:	4620      	mov	r0, r4
 800affa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800affe:	f000 f840 	bl	800b082 <_malloc_usable_size_r>
 800b002:	4285      	cmp	r5, r0
 800b004:	4606      	mov	r6, r0
 800b006:	d802      	bhi.n	800b00e <_realloc_r+0x34>
 800b008:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b00c:	d8f4      	bhi.n	800aff8 <_realloc_r+0x1e>
 800b00e:	4629      	mov	r1, r5
 800b010:	4640      	mov	r0, r8
 800b012:	f7fd fc85 	bl	8008920 <_malloc_r>
 800b016:	4607      	mov	r7, r0
 800b018:	2800      	cmp	r0, #0
 800b01a:	d0ec      	beq.n	800aff6 <_realloc_r+0x1c>
 800b01c:	42b5      	cmp	r5, r6
 800b01e:	462a      	mov	r2, r5
 800b020:	4621      	mov	r1, r4
 800b022:	bf28      	it	cs
 800b024:	4632      	movcs	r2, r6
 800b026:	f7ff fc43 	bl	800a8b0 <memcpy>
 800b02a:	4621      	mov	r1, r4
 800b02c:	4640      	mov	r0, r8
 800b02e:	f7fd fc03 	bl	8008838 <_free_r>
 800b032:	463c      	mov	r4, r7
 800b034:	e7e0      	b.n	800aff8 <_realloc_r+0x1e>

0800b036 <__ascii_wctomb>:
 800b036:	4603      	mov	r3, r0
 800b038:	4608      	mov	r0, r1
 800b03a:	b141      	cbz	r1, 800b04e <__ascii_wctomb+0x18>
 800b03c:	2aff      	cmp	r2, #255	@ 0xff
 800b03e:	d904      	bls.n	800b04a <__ascii_wctomb+0x14>
 800b040:	228a      	movs	r2, #138	@ 0x8a
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	f04f 30ff 	mov.w	r0, #4294967295
 800b048:	4770      	bx	lr
 800b04a:	700a      	strb	r2, [r1, #0]
 800b04c:	2001      	movs	r0, #1
 800b04e:	4770      	bx	lr

0800b050 <fiprintf>:
 800b050:	b40e      	push	{r1, r2, r3}
 800b052:	b503      	push	{r0, r1, lr}
 800b054:	4601      	mov	r1, r0
 800b056:	ab03      	add	r3, sp, #12
 800b058:	4805      	ldr	r0, [pc, #20]	@ (800b070 <fiprintf+0x20>)
 800b05a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b05e:	6800      	ldr	r0, [r0, #0]
 800b060:	9301      	str	r3, [sp, #4]
 800b062:	f7ff f9a1 	bl	800a3a8 <_vfiprintf_r>
 800b066:	b002      	add	sp, #8
 800b068:	f85d eb04 	ldr.w	lr, [sp], #4
 800b06c:	b003      	add	sp, #12
 800b06e:	4770      	bx	lr
 800b070:	2000002c 	.word	0x2000002c

0800b074 <abort>:
 800b074:	b508      	push	{r3, lr}
 800b076:	2006      	movs	r0, #6
 800b078:	f000 f834 	bl	800b0e4 <raise>
 800b07c:	2001      	movs	r0, #1
 800b07e:	f7f7 facd 	bl	800261c <_exit>

0800b082 <_malloc_usable_size_r>:
 800b082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b086:	1f18      	subs	r0, r3, #4
 800b088:	2b00      	cmp	r3, #0
 800b08a:	bfbc      	itt	lt
 800b08c:	580b      	ldrlt	r3, [r1, r0]
 800b08e:	18c0      	addlt	r0, r0, r3
 800b090:	4770      	bx	lr

0800b092 <_raise_r>:
 800b092:	291f      	cmp	r1, #31
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4605      	mov	r5, r0
 800b098:	460c      	mov	r4, r1
 800b09a:	d904      	bls.n	800b0a6 <_raise_r+0x14>
 800b09c:	2316      	movs	r3, #22
 800b09e:	6003      	str	r3, [r0, #0]
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0a8:	b112      	cbz	r2, 800b0b0 <_raise_r+0x1e>
 800b0aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0ae:	b94b      	cbnz	r3, 800b0c4 <_raise_r+0x32>
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f000 f831 	bl	800b118 <_getpid_r>
 800b0b6:	4622      	mov	r2, r4
 800b0b8:	4601      	mov	r1, r0
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0c0:	f000 b818 	b.w	800b0f4 <_kill_r>
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d00a      	beq.n	800b0de <_raise_r+0x4c>
 800b0c8:	1c59      	adds	r1, r3, #1
 800b0ca:	d103      	bne.n	800b0d4 <_raise_r+0x42>
 800b0cc:	2316      	movs	r3, #22
 800b0ce:	6003      	str	r3, [r0, #0]
 800b0d0:	2001      	movs	r0, #1
 800b0d2:	e7e7      	b.n	800b0a4 <_raise_r+0x12>
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b0da:	4620      	mov	r0, r4
 800b0dc:	4798      	blx	r3
 800b0de:	2000      	movs	r0, #0
 800b0e0:	e7e0      	b.n	800b0a4 <_raise_r+0x12>
	...

0800b0e4 <raise>:
 800b0e4:	4b02      	ldr	r3, [pc, #8]	@ (800b0f0 <raise+0xc>)
 800b0e6:	4601      	mov	r1, r0
 800b0e8:	6818      	ldr	r0, [r3, #0]
 800b0ea:	f7ff bfd2 	b.w	800b092 <_raise_r>
 800b0ee:	bf00      	nop
 800b0f0:	2000002c 	.word	0x2000002c

0800b0f4 <_kill_r>:
 800b0f4:	b538      	push	{r3, r4, r5, lr}
 800b0f6:	4d07      	ldr	r5, [pc, #28]	@ (800b114 <_kill_r+0x20>)
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	4608      	mov	r0, r1
 800b0fe:	4611      	mov	r1, r2
 800b100:	602b      	str	r3, [r5, #0]
 800b102:	f7f7 fa7b 	bl	80025fc <_kill>
 800b106:	1c43      	adds	r3, r0, #1
 800b108:	d102      	bne.n	800b110 <_kill_r+0x1c>
 800b10a:	682b      	ldr	r3, [r5, #0]
 800b10c:	b103      	cbz	r3, 800b110 <_kill_r+0x1c>
 800b10e:	6023      	str	r3, [r4, #0]
 800b110:	bd38      	pop	{r3, r4, r5, pc}
 800b112:	bf00      	nop
 800b114:	20000588 	.word	0x20000588

0800b118 <_getpid_r>:
 800b118:	f7f7 ba68 	b.w	80025ec <_getpid>

0800b11c <_init>:
 800b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11e:	bf00      	nop
 800b120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b122:	bc08      	pop	{r3}
 800b124:	469e      	mov	lr, r3
 800b126:	4770      	bx	lr

0800b128 <_fini>:
 800b128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12a:	bf00      	nop
 800b12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12e:	bc08      	pop	{r3}
 800b130:	469e      	mov	lr, r3
 800b132:	4770      	bx	lr
